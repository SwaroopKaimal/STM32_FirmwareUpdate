
STM32_BL_UART_FwUpdate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054fc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  080056ac  080056ac  000066ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cec  08005cec  00007088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005cec  08005cec  00006cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cf4  08005cf4  00007088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cf4  08005cf4  00006cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cf8  08005cf8  00006cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08005cfc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000088  08005d84  00007088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08005d84  000073f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ceb7  00000000  00000000  000070b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223d  00000000  00000000  00013f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  000161b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ec  00000000  00000000  00016d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd1  00000000  00000000  00017634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6e2  00000000  00000000  00040405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7aa7  00000000  00000000  0004eae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014658e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000337c  00000000  00000000  001465d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00149950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005694 	.word	0x08005694

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08005694 	.word	0x08005694

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f001 f8d2 	bl	800177a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f85d 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f92d 	bl	8000838 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005de:	f000 f8cf 	bl	8000780 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f8f9 	bl	80007d8 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80005e6:	f000 f8a9 	bl	800073c <MX_CRC_Init>

  /*Initially active bank is set as FLASH_ACTIVE_BANK1 as factory setup. TODO: Write protect and other necessary operations*/
  //update_active_bank_number(FLASH_ACTIVE_BANK2);

  /*Fetch the bank no. which has to be activated*/
  active_bank_number = fetch_active_bank_number();
 80005ea:	f000 ff23 	bl	8001434 <fetch_active_bank_number>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <main+0xa4>)
 80005f4:	701a      	strb	r2, [r3, #0]
  printmsg("BL_DEBUG_MSG: Active Bank: %d \n\r", active_bank_number);
 80005f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <main+0xa4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	4619      	mov	r1, r3
 80005fc:	481d      	ldr	r0, [pc, #116]	@ (8000674 <main+0xa8>)
 80005fe:	f000 f9c1 	bl	8000984 <printmsg>


  /*If button is pressed*/
  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8000602:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000606:	481c      	ldr	r0, [pc, #112]	@ (8000678 <main+0xac>)
 8000608:	f002 f986 	bl	8002918 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b01      	cmp	r3, #1
 8000610:	d126      	bne.n	8000660 <main+0x94>
  {
	  printmsg("BL_DEBUG_MSG: Button pressed. Checking for firmware updates.\n\r");
 8000612:	481a      	ldr	r0, [pc, #104]	@ (800067c <main+0xb0>)
 8000614:	f000 f9b6 	bl	8000984 <printmsg>
	  /* Function to return the version available on the host application */
	  //uint8_t available_version = fetch_available_firmware_version(); TODO: Fix Flow Logic
	  //printmsg("BL_DEBUG_MSG: Fetched version: %d \n\r", available_version);

	  /* Check if the user needs to update firmware, get input via Debug UART */
	  printmsg("BL_DEBUG_MSG: Update Firmware? Y/n \n\r");
 8000618:	4819      	ldr	r0, [pc, #100]	@ (8000680 <main+0xb4>)
 800061a:	f000 f9b3 	bl	8000984 <printmsg>
	  uint8_t update_option;
	  HAL_UART_Receive(D_UART, &update_option, 1, HAL_MAX_DELAY);
 800061e:	1df9      	adds	r1, r7, #7
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	2201      	movs	r2, #1
 8000626:	4817      	ldr	r0, [pc, #92]	@ (8000684 <main+0xb8>)
 8000628:	f003 fdf9 	bl	800421e <HAL_UART_Receive>
	  if(update_option == 'Y' || update_option == 'y')
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b59      	cmp	r3, #89	@ 0x59
 8000630:	d002      	beq.n	8000638 <main+0x6c>
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b79      	cmp	r3, #121	@ 0x79
 8000636:	d102      	bne.n	800063e <main+0x72>
	  {
		  /*User requires a firmware update */

		  handle_firmware_update();
 8000638:	f000 fe46 	bl	80012c8 <handle_firmware_update>
 800063c:	e015      	b.n	800066a <main+0x9e>

	  }else if(update_option == 'N' || update_option == 'n')
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b4e      	cmp	r3, #78	@ 0x4e
 8000642:	d002      	beq.n	800064a <main+0x7e>
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b6e      	cmp	r3, #110	@ 0x6e
 8000648:	d105      	bne.n	8000656 <main+0x8a>
	  {
		  /*User does not requires a firmware update, go to custom boot loader*/
		  printmsg("BL_DEBUG_MSG: Update not required, entering bootloader mode \n\r");
 800064a:	480f      	ldr	r0, [pc, #60]	@ (8000688 <main+0xbc>)
 800064c:	f000 f99a 	bl	8000984 <printmsg>

		  /*Continuously check for user inputs to the boot loader*/
		  bootloader_uart_read_data();
 8000650:	f000 fa12 	bl	8000a78 <bootloader_uart_read_data>
 8000654:	e009      	b.n	800066a <main+0x9e>

	  }else{
		  printmsg("BL_DEBUG_MSG: Invalid option. Please reset the board. \n\r");
 8000656:	480d      	ldr	r0, [pc, #52]	@ (800068c <main+0xc0>)
 8000658:	f000 f994 	bl	8000984 <printmsg>
		  while(1);
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <main+0x90>
	  }

  }else{

	  printmsg("BL_DEBUG_MSG: Button not pressed. Executing user application\n\r");
 8000660:	480b      	ldr	r0, [pc, #44]	@ (8000690 <main+0xc4>)
 8000662:	f000 f98f 	bl	8000984 <printmsg>

	  bootloader_jump_to_active_bank(); /*Jump to the active bank binaries*/
 8000666:	f000 f9b3 	bl	80009d0 <bootloader_jump_to_active_bank>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066a:	bf00      	nop
 800066c:	e7fd      	b.n	800066a <main+0x9e>
 800066e:	bf00      	nop
 8000670:	200002a0 	.word	0x200002a0
 8000674:	080056ac 	.word	0x080056ac
 8000678:	48000800 	.word	0x48000800
 800067c:	080056d0 	.word	0x080056d0
 8000680:	08005710 	.word	0x08005710
 8000684:	200000c8 	.word	0x200000c8
 8000688:	08005738 	.word	0x08005738
 800068c:	08005778 	.word	0x08005778
 8000690:	080057b4 	.word	0x080057b4

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	@ 0x58
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2244      	movs	r2, #68	@ 0x44
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 fb78 	bl	8004d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ba:	f002 f96b 	bl	8002994 <HAL_PWREx_ControlVoltageScaling>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c4:	f000 fec8 	bl	8001458 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006c8:	2310      	movs	r3, #16
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d4:	2360      	movs	r3, #96	@ 0x60
 80006d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006dc:	2301      	movs	r3, #1
 80006de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006e4:	2328      	movs	r3, #40	@ 0x28
 80006e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 f9b1 	bl	8002a60 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000704:	f000 fea8 	bl	8001458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2303      	movs	r3, #3
 800070e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	2104      	movs	r1, #4
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fdb6 	bl	8003294 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800072e:	f000 fe93 	bl	8001458 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3758      	adds	r7, #88	@ 0x58
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000740:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <MX_CRC_Init+0x3c>)
 8000742:	4a0e      	ldr	r2, [pc, #56]	@ (800077c <MX_CRC_Init+0x40>)
 8000744:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_CRC_Init+0x3c>)
 8000748:	2200      	movs	r2, #0
 800074a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <MX_CRC_Init+0x3c>)
 800074e:	2200      	movs	r2, #0
 8000750:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_CRC_Init+0x3c>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_CRC_Init+0x3c>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_CRC_Init+0x3c>)
 8000760:	2203      	movs	r2, #3
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_CRC_Init+0x3c>)
 8000766:	f001 f963 	bl	8001a30 <HAL_CRC_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000770:	f000 fe72 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000a4 	.word	0x200000a4
 800077c:	40023000 	.word	0x40023000

08000780 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_LPUART1_UART_Init+0x50>)
 8000786:	4a13      	ldr	r2, [pc, #76]	@ (80007d4 <MX_LPUART1_UART_Init+0x54>)
 8000788:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_LPUART1_UART_Init+0x50>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_LPUART1_UART_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <MX_LPUART1_UART_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_LPUART1_UART_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <MX_LPUART1_UART_Init+0x50>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_LPUART1_UART_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <MX_LPUART1_UART_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_LPUART1_UART_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <MX_LPUART1_UART_Init+0x50>)
 80007be:	f003 fc57 	bl	8004070 <HAL_UART_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80007c8:	f000 fe46 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000c8 	.word	0x200000c8
 80007d4:	40008000 	.word	0x40008000

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	@ (8000834 <MX_USART2_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_USART2_UART_Init+0x58>)
 800081c:	f003 fc28 	bl	8004070 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 fe17 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000150 	.word	0x20000150
 8000834:	40004400 	.word	0x40004400

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08c      	sub	sp, #48	@ 0x30
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b49      	ldr	r3, [pc, #292]	@ (8000974 <MX_GPIO_Init+0x13c>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a48      	ldr	r2, [pc, #288]	@ (8000974 <MX_GPIO_Init+0x13c>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b46      	ldr	r3, [pc, #280]	@ (8000974 <MX_GPIO_Init+0x13c>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	4b43      	ldr	r3, [pc, #268]	@ (8000974 <MX_GPIO_Init+0x13c>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a42      	ldr	r2, [pc, #264]	@ (8000974 <MX_GPIO_Init+0x13c>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b40      	ldr	r3, [pc, #256]	@ (8000974 <MX_GPIO_Init+0x13c>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b3d      	ldr	r3, [pc, #244]	@ (8000974 <MX_GPIO_Init+0x13c>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a3c      	ldr	r2, [pc, #240]	@ (8000974 <MX_GPIO_Init+0x13c>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b3a      	ldr	r3, [pc, #232]	@ (8000974 <MX_GPIO_Init+0x13c>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000896:	4b37      	ldr	r3, [pc, #220]	@ (8000974 <MX_GPIO_Init+0x13c>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	4a36      	ldr	r2, [pc, #216]	@ (8000974 <MX_GPIO_Init+0x13c>)
 800089c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a2:	4b34      	ldr	r3, [pc, #208]	@ (8000974 <MX_GPIO_Init+0x13c>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80008ae:	f002 f8c7 	bl	8002a40 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b30      	ldr	r3, [pc, #192]	@ (8000974 <MX_GPIO_Init+0x13c>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	4a2f      	ldr	r2, [pc, #188]	@ (8000974 <MX_GPIO_Init+0x13c>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008be:	4b2d      	ldr	r3, [pc, #180]	@ (8000974 <MX_GPIO_Init+0x13c>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <MX_GPIO_Init+0x13c>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	4a29      	ldr	r2, [pc, #164]	@ (8000974 <MX_GPIO_Init+0x13c>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d6:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <MX_GPIO_Init+0x13c>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80008e8:	4823      	ldr	r0, [pc, #140]	@ (8000978 <MX_GPIO_Init+0x140>)
 80008ea:	f002 f82d 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 5131 	mov.w	r1, #11328	@ 0x2c40
 80008f4:	4821      	ldr	r0, [pc, #132]	@ (800097c <MX_GPIO_Init+0x144>)
 80008f6:	f002 f827 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000900:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	481b      	ldr	r0, [pc, #108]	@ (8000980 <MX_GPIO_Init+0x148>)
 8000912:	f001 fe6f 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000916:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4812      	ldr	r0, [pc, #72]	@ (8000978 <MX_GPIO_Init+0x140>)
 8000930:	f001 fe60 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 8000934:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	@ (800097c <MX_GPIO_Init+0x144>)
 800094a:	f001 fe53 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 800094e:	f44f 5331 	mov.w	r3, #11328	@ 0x2c40
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_GPIO_Init+0x144>)
 8000968:	f001 fe44 	bl	80025f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800096c:	bf00      	nop
 800096e:	3730      	adds	r7, #48	@ 0x30
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40021000 	.word	0x40021000
 8000978:	48000400 	.word	0x48000400
 800097c:	48001800 	.word	0x48001800
 8000980:	48000800 	.word	0x48000800

08000984 <printmsg>:

/* USER CODE BEGIN 4 */

void printmsg(char *format, ...){/* The ... (ellipsis) means that more arguments can follow */
 8000984:	b40f      	push	{r0, r1, r2, r3}
 8000986:	b580      	push	{r7, lr}
 8000988:	b096      	sub	sp, #88	@ 0x58
 800098a:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN

	char str[80];
	/*Extract the argument list using C VA APIs*/
	va_list args;
	va_start(args, format);
 800098c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000990:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800099a:	4618      	mov	r0, r3
 800099c:	f004 f9f2 	bl	8004d84 <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fc23 	bl	80001f0 <strlen>
 80009aa:	4603      	mov	r3, r0
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	f107 0108 	add.w	r1, r7, #8
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <printmsg+0x48>)
 80009b8:	f003 fba8 	bl	800410c <HAL_UART_Transmit>
	va_end(args);
#endif
}
 80009bc:	bf00      	nop
 80009be:	3758      	adds	r7, #88	@ 0x58
 80009c0:	46bd      	mov	sp, r7
 80009c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009c6:	b004      	add	sp, #16
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	200000c8 	.word	0x200000c8

080009d0 <bootloader_jump_to_active_bank>:

void bootloader_jump_to_active_bank()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
	 * 2. Redirects interrupts by re-mapping VTOR.
	 * 3. Fetches the application’s Reset_Handler address.
	 * 4. Calls it, effectively jumping to the user application.
	 */

	printmsg("BL_DEBUG_MSG: bootloader_jump_to_user_app\n\r");
 80009d6:	481e      	ldr	r0, [pc, #120]	@ (8000a50 <bootloader_jump_to_active_bank+0x80>)
 80009d8:	f7ff ffd4 	bl	8000984 <printmsg>
	/*1. Configure the Main Stack Pointer (MSP) by reading the value form the flash base address of desired sector*/
	/* Check which firmware bank is active and run active firmware bank*/

	uint32_t resethandler_address;

	if(active_bank_number == FLASH_ACTIVE_BANK1)
 80009dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a54 <bootloader_jump_to_active_bank+0x84>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d112      	bne.n	8000a0a <bootloader_jump_to_active_bank+0x3a>
	{

		printmsg("BL_DEBUG_MSG: Firmware Bank 1 Active. \n\r");
 80009e4:	481c      	ldr	r0, [pc, #112]	@ (8000a58 <bootloader_jump_to_active_bank+0x88>)
 80009e6:	f7ff ffcd 	bl	8000984 <printmsg>

		uint32_t msp_value = *(volatile uint32_t*)FLASH_FIRMWARE1;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <bootloader_jump_to_active_bank+0x8c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f383 8808 	msr	MSP, r3
}
 80009fa:	bf00      	nop

		/* Set MSP function from CMSIS*/
		__set_MSP(msp_value);

		/* Re-map vector table to user application base address */
		SCB->VTOR = FLASH_FIRMWARE1; /* System Control Block - Vector Table Offset Register */
 80009fc:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <bootloader_jump_to_active_bank+0x90>)
 80009fe:	4a17      	ldr	r2, [pc, #92]	@ (8000a5c <bootloader_jump_to_active_bank+0x8c>)
 8000a00:	609a      	str	r2, [r3, #8]

		/* Fetch the reset handler address of the user application
		* from the location FIRMWARE_BASE_ADDRESS + 4 (32bits) */
		resethandler_address = *(volatile uint32_t*)(FLASH_FIRMWARE1 + 4);
 8000a02:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <bootloader_jump_to_active_bank+0x94>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	e019      	b.n	8000a3e <bootloader_jump_to_active_bank+0x6e>

	}else if(active_bank_number == FLASH_ACTIVE_BANK2){
 8000a0a:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <bootloader_jump_to_active_bank+0x84>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d112      	bne.n	8000a38 <bootloader_jump_to_active_bank+0x68>

		printmsg("BL_DEBUG_MSG: Firmware Bank 2 Active. \n\r");
 8000a12:	4815      	ldr	r0, [pc, #84]	@ (8000a68 <bootloader_jump_to_active_bank+0x98>)
 8000a14:	f7ff ffb6 	bl	8000984 <printmsg>

		uint32_t msp_value = *(volatile uint32_t*)FLASH_FIRMWARE2;
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <bootloader_jump_to_active_bank+0x9c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	f383 8808 	msr	MSP, r3
}
 8000a28:	bf00      	nop

		__set_MSP(msp_value);

		SCB->VTOR = FLASH_FIRMWARE2;
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <bootloader_jump_to_active_bank+0x90>)
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a6c <bootloader_jump_to_active_bank+0x9c>)
 8000a2e:	609a      	str	r2, [r3, #8]

		resethandler_address = *(volatile uint32_t*)(FLASH_FIRMWARE2 + 4);
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <bootloader_jump_to_active_bank+0xa0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	e002      	b.n	8000a3e <bootloader_jump_to_active_bank+0x6e>
	}
	else{
		/*If values fetched from FLASH Meta data page is not 0 or 1*/
		printmsg("BL_DEBUG_MSG: Firmware Bank Error! \n\r");
 8000a38:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <bootloader_jump_to_active_bank+0xa4>)
 8000a3a:	f7ff ffa3 	bl	8000984 <printmsg>
	}

	void (*app_reset_handler)(void); /*A function pointer to hold the address of reset handler*/
	app_reset_handler = (void*) resethandler_address;
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	60bb      	str	r3, [r7, #8]

	/*3. Jumping to the reset handler of user application - Now this address will be loaded into the Program Counter*/
	app_reset_handler();
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	4798      	blx	r3

}
 8000a46:	bf00      	nop
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	080057f4 	.word	0x080057f4
 8000a54:	200002a0 	.word	0x200002a0
 8000a58:	08005820 	.word	0x08005820
 8000a5c:	08008000 	.word	0x08008000
 8000a60:	e000ed00 	.word	0xe000ed00
 8000a64:	08008004 	.word	0x08008004
 8000a68:	0800584c 	.word	0x0800584c
 8000a6c:	08080000 	.word	0x08080000
 8000a70:	08080004 	.word	0x08080004
 8000a74:	08005878 	.word	0x08005878

08000a78 <bootloader_uart_read_data>:

void bootloader_uart_read_data()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer, 0, BL_RX_LEN);
 8000a82:	22c8      	movs	r2, #200	@ 0xc8
 8000a84:	2100      	movs	r1, #0
 8000a86:	4832      	ldr	r0, [pc, #200]	@ (8000b50 <bootloader_uart_read_data+0xd8>)
 8000a88:	f004 f986 	bl	8004d98 <memset>

		/*First read only one byte, which is the length. Then read the other bytes from UART */
		HAL_UART_Receive(C_UART, (uint8_t*)&bl_rx_buffer, 1, HAL_MAX_DELAY);
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a90:	2201      	movs	r2, #1
 8000a92:	492f      	ldr	r1, [pc, #188]	@ (8000b50 <bootloader_uart_read_data+0xd8>)
 8000a94:	482f      	ldr	r0, [pc, #188]	@ (8000b54 <bootloader_uart_read_data+0xdc>)
 8000a96:	f003 fbc2 	bl	800421e <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 8000a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b50 <bootloader_uart_read_data+0xd8>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
		/*Receive the command*/
		HAL_UART_Receive(C_UART, (uint8_t*)&bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa8:	492b      	ldr	r1, [pc, #172]	@ (8000b58 <bootloader_uart_read_data+0xe0>)
 8000aaa:	482a      	ldr	r0, [pc, #168]	@ (8000b54 <bootloader_uart_read_data+0xdc>)
 8000aac:	f003 fbb7 	bl	800421e <HAL_UART_Receive>

		switch(bl_rx_buffer[1]) /* To check for command codes */
 8000ab0:	4b27      	ldr	r3, [pc, #156]	@ (8000b50 <bootloader_uart_read_data+0xd8>)
 8000ab2:	785b      	ldrb	r3, [r3, #1]
 8000ab4:	3b51      	subs	r3, #81	@ 0x51
 8000ab6:	2b0f      	cmp	r3, #15
 8000ab8:	d845      	bhi.n	8000b46 <bootloader_uart_read_data+0xce>
 8000aba:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac0 <bootloader_uart_read_data+0x48>)
 8000abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac0:	08000b01 	.word	0x08000b01
 8000ac4:	08000b09 	.word	0x08000b09
 8000ac8:	08000b11 	.word	0x08000b11
 8000acc:	08000b19 	.word	0x08000b19
 8000ad0:	08000b47 	.word	0x08000b47
 8000ad4:	08000b21 	.word	0x08000b21
 8000ad8:	08000b29 	.word	0x08000b29
 8000adc:	08000b31 	.word	0x08000b31
 8000ae0:	08000b47 	.word	0x08000b47
 8000ae4:	08000b47 	.word	0x08000b47
 8000ae8:	08000b47 	.word	0x08000b47
 8000aec:	08000b39 	.word	0x08000b39
 8000af0:	08000b47 	.word	0x08000b47
 8000af4:	08000b47 	.word	0x08000b47
 8000af8:	08000b47 	.word	0x08000b47
 8000afc:	08000b41 	.word	0x08000b41
		{
		case BL_GET_VER:
			bootloader_handle_getver_cmd(bl_rx_buffer);
 8000b00:	4813      	ldr	r0, [pc, #76]	@ (8000b50 <bootloader_uart_read_data+0xd8>)
 8000b02:	f000 f82d 	bl	8000b60 <bootloader_handle_getver_cmd>
			break;
 8000b06:	e022      	b.n	8000b4e <bootloader_uart_read_data+0xd6>
		case BL_GET_HELP:
			bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000b08:	4811      	ldr	r0, [pc, #68]	@ (8000b50 <bootloader_uart_read_data+0xd8>)
 8000b0a:	f000 f86d 	bl	8000be8 <bootloader_handle_gethelp_cmd>
			break;
 8000b0e:	e01e      	b.n	8000b4e <bootloader_uart_read_data+0xd6>
		case BL_GET_CID:
			bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000b10:	480f      	ldr	r0, [pc, #60]	@ (8000b50 <bootloader_uart_read_data+0xd8>)
 8000b12:	f000 f8a1 	bl	8000c58 <bootloader_handle_getcid_cmd>
			break;
 8000b16:	e01a      	b.n	8000b4e <bootloader_uart_read_data+0xd6>
		case BL_GET_RDP_STATUS:
			bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000b18:	480d      	ldr	r0, [pc, #52]	@ (8000b50 <bootloader_uart_read_data+0xd8>)
 8000b1a:	f000 f8e3 	bl	8000ce4 <bootloader_handle_getrdp_cmd>
			break;
 8000b1e:	e016      	b.n	8000b4e <bootloader_uart_read_data+0xd6>
		case BL_FLASH_ERASE:
			bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000b20:	480b      	ldr	r0, [pc, #44]	@ (8000b50 <bootloader_uart_read_data+0xd8>)
 8000b22:	f000 f925 	bl	8000d70 <bootloader_handle_flash_erase_cmd>
			break;
 8000b26:	e012      	b.n	8000b4e <bootloader_uart_read_data+0xd6>
		case BL_MEM_WRITE:
			bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000b28:	4809      	ldr	r0, [pc, #36]	@ (8000b50 <bootloader_uart_read_data+0xd8>)
 8000b2a:	f000 f98d 	bl	8000e48 <bootloader_handle_mem_write_cmd>
			break;
 8000b2e:	e00e      	b.n	8000b4e <bootloader_uart_read_data+0xd6>
		case BL_EN_RW_PROTECT:
			bootloader_handle_en_rw_protect(bl_rx_buffer);
 8000b30:	4807      	ldr	r0, [pc, #28]	@ (8000b50 <bootloader_uart_read_data+0xd8>)
 8000b32:	f000 f9ff 	bl	8000f34 <bootloader_handle_en_rw_protect>
			break;
 8000b36:	e00a      	b.n	8000b4e <bootloader_uart_read_data+0xd6>
		case BL_DIS_R_W_PROTECT:
			bootloader_handle_dis_rw_protect(bl_rx_buffer);
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <bootloader_uart_read_data+0xd8>)
 8000b3a:	f000 fa05 	bl	8000f48 <bootloader_handle_dis_rw_protect>
			break;
 8000b3e:	e006      	b.n	8000b4e <bootloader_uart_read_data+0xd6>
		case BL_SHOW_ACTIVE_BANK:
			bootloader_show_active_bank(bl_rx_buffer);
 8000b40:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <bootloader_uart_read_data+0xd8>)
 8000b42:	f000 fc35 	bl	80013b0 <bootloader_show_active_bank>
		default:
			printmsg("BL_DEBUG_MSG:Invalid command code received from host \n\r");
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <bootloader_uart_read_data+0xe4>)
 8000b48:	f7ff ff1c 	bl	8000984 <printmsg>
			break;
 8000b4c:	bf00      	nop
		memset(bl_rx_buffer, 0, BL_RX_LEN);
 8000b4e:	e798      	b.n	8000a82 <bootloader_uart_read_data+0xa>
 8000b50:	200001d8 	.word	0x200001d8
 8000b54:	20000150 	.word	0x20000150
 8000b58:	200001d9 	.word	0x200001d9
 8000b5c:	080058a0 	.word	0x080058a0

08000b60 <bootloader_handle_getver_cmd>:
}

/******************* Boot loader handler functions *******************/

void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
    /* Handle "Get Version" command */
	uint8_t bl_version;

	uint32_t command_packet_len = bl_rx_buffer[0] + 1; /*Length to follow + First byte*/
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]

	/*Extract the 4 bytes of CRC32 sent by the host*/
	uint32_t host_crc = *((uint32_t*)(bl_rx_buffer + command_packet_len - 4)); /* CRC is always 32 bits (4 bytes) here */
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	3b04      	subs	r3, #4
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	613b      	str	r3, [r7, #16]

	/*Verify checksum*/
	printmsg("BL_DEBUG_MSG: bootloader_handle_getver_cmd\n\r");
 8000b7c:	4816      	ldr	r0, [pc, #88]	@ (8000bd8 <bootloader_handle_getver_cmd+0x78>)
 8000b7e:	f7ff ff01 	bl	8000984 <printmsg>
	if(! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3b04      	subs	r3, #4
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fa10 	bl	8000fb0 <bootloader_verify_crc>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d117      	bne.n	8000bc6 <bootloader_handle_getver_cmd+0x66>
	{
		/*Checksum is correct*/
		printmsg("BL_DEBUG_MSG: Checksum success...!\n\r");
 8000b96:	4811      	ldr	r0, [pc, #68]	@ (8000bdc <bootloader_handle_getver_cmd+0x7c>)
 8000b98:	f7ff fef4 	bl	8000984 <printmsg>
		bootloader_send_ack(1);
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f000 f9ef 	bl	8000f80 <bootloader_send_ack>
		bl_version = get_bootloader_version();
 8000ba2:	f000 fa4d 	bl	8001040 <get_bootloader_version>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG: BL_VER: %d &#x\n\r", bl_version, bl_version);
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	4619      	mov	r1, r3
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	480b      	ldr	r0, [pc, #44]	@ (8000be0 <bootloader_handle_getver_cmd+0x80>)
 8000bb4:	f7ff fee6 	bl	8000984 <printmsg>
		bootloader_uart_write_data(&bl_version, 1); /* Sends data back to the HOST */
 8000bb8:	f107 030f 	add.w	r3, r7, #15
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fa2a 	bl	8001018 <bootloader_uart_write_data>
		printmsg("BL_DEBUG_MSG: Checksum failed...!\n\r");
		bootloader_send_nack();

	}

}
 8000bc4:	e004      	b.n	8000bd0 <bootloader_handle_getver_cmd+0x70>
		printmsg("BL_DEBUG_MSG: Checksum failed...!\n\r");
 8000bc6:	4807      	ldr	r0, [pc, #28]	@ (8000be4 <bootloader_handle_getver_cmd+0x84>)
 8000bc8:	f7ff fedc 	bl	8000984 <printmsg>
		bootloader_send_nack();
 8000bcc:	f000 f9c6 	bl	8000f5c <bootloader_send_nack>
}
 8000bd0:	bf00      	nop
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	080058d8 	.word	0x080058d8
 8000bdc:	08005908 	.word	0x08005908
 8000be0:	08005930 	.word	0x08005930
 8000be4:	08005950 	.word	0x08005950

08000be8 <bootloader_handle_gethelp_cmd>:

void bootloader_handle_gethelp_cmd(uint8_t *bl_rx_buffer)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    /* Handle "Get Help" command */
	printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n\r");
 8000bf0:	4815      	ldr	r0, [pc, #84]	@ (8000c48 <bootloader_handle_gethelp_cmd+0x60>)
 8000bf2:	f7ff fec7 	bl	8000984 <printmsg>

	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]

	uint32_t host_crc = *((uint32_t*)(bl_rx_buffer + command_packet_len - 4));
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3b04      	subs	r3, #4
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60bb      	str	r3, [r7, #8]

	if(! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	3b04      	subs	r3, #4
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	4619      	mov	r1, r3
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f000 f9cc 	bl	8000fb0 <bootloader_verify_crc>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10a      	bne.n	8000c34 <bootloader_handle_gethelp_cmd+0x4c>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\n\r");
 8000c1e:	480b      	ldr	r0, [pc, #44]	@ (8000c4c <bootloader_handle_gethelp_cmd+0x64>)
 8000c20:	f7ff feb0 	bl	8000984 <printmsg>
		bootloader_send_ack(sizeof(supported_commands));
 8000c24:	2009      	movs	r0, #9
 8000c26:	f000 f9ab 	bl	8000f80 <bootloader_send_ack>
		bootloader_uart_write_data(supported_commands, sizeof(supported_commands));
 8000c2a:	2109      	movs	r1, #9
 8000c2c:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <bootloader_handle_gethelp_cmd+0x68>)
 8000c2e:	f000 f9f3 	bl	8001018 <bootloader_uart_write_data>

	}else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
		bootloader_send_nack();
	}
}
 8000c32:	e004      	b.n	8000c3e <bootloader_handle_gethelp_cmd+0x56>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
 8000c34:	4807      	ldr	r0, [pc, #28]	@ (8000c54 <bootloader_handle_gethelp_cmd+0x6c>)
 8000c36:	f7ff fea5 	bl	8000984 <printmsg>
		bootloader_send_nack();
 8000c3a:	f000 f98f 	bl	8000f5c <bootloader_send_nack>
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	08005974 	.word	0x08005974
 8000c4c:	080059a4 	.word	0x080059a4
 8000c50:	20000000 	.word	0x20000000
 8000c54:	080059c8 	.word	0x080059c8

08000c58 <bootloader_handle_getcid_cmd>:

void bootloader_handle_getcid_cmd(uint8_t *bl_rx_buffer)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
    /* Handle "Get Chip ID" command */
	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n\r");
 8000c60:	481c      	ldr	r0, [pc, #112]	@ (8000cd4 <bootloader_handle_getcid_cmd+0x7c>)
 8000c62:	f7ff fe8f 	bl	8000984 <printmsg>

	uint16_t bl_cid_num = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	81fb      	strh	r3, [r7, #14]

	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]

	uint32_t host_crc = *((uint32_t*)(bl_rx_buffer + command_packet_len - 4));
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3b04      	subs	r3, #4
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	613b      	str	r3, [r7, #16]

	if(! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3b04      	subs	r3, #4
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4619      	mov	r1, r3
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f000 f992 	bl	8000fb0 <bootloader_verify_crc>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d117      	bne.n	8000cc2 <bootloader_handle_getcid_cmd+0x6a>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\n\r");
 8000c92:	4811      	ldr	r0, [pc, #68]	@ (8000cd8 <bootloader_handle_getcid_cmd+0x80>)
 8000c94:	f7ff fe76 	bl	8000984 <printmsg>
		bootloader_send_ack(2);
 8000c98:	2002      	movs	r0, #2
 8000c9a:	f000 f971 	bl	8000f80 <bootloader_send_ack>
		bl_cid_num = get_mcu_chip_id();
 8000c9e:	f000 f9d7 	bl	8001050 <get_mcu_chip_id>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	81fb      	strh	r3, [r7, #14]
		printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n\r",bl_cid_num, bl_cid_num);
 8000ca6:	89fb      	ldrh	r3, [r7, #14]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	461a      	mov	r2, r3
 8000cae:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <bootloader_handle_getcid_cmd+0x84>)
 8000cb0:	f7ff fe68 	bl	8000984 <printmsg>
		bootloader_uart_write_data((uint8_t*)&bl_cid_num, 2);
 8000cb4:	f107 030e 	add.w	r3, r7, #14
 8000cb8:	2102      	movs	r1, #2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f9ac 	bl	8001018 <bootloader_uart_write_data>
	}else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
		bootloader_send_nack();
	}
}
 8000cc0:	e004      	b.n	8000ccc <bootloader_handle_getcid_cmd+0x74>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
 8000cc2:	4807      	ldr	r0, [pc, #28]	@ (8000ce0 <bootloader_handle_getcid_cmd+0x88>)
 8000cc4:	f7ff fe5e 	bl	8000984 <printmsg>
		bootloader_send_nack();
 8000cc8:	f000 f948 	bl	8000f5c <bootloader_send_nack>
}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	080059e8 	.word	0x080059e8
 8000cd8:	080059a4 	.word	0x080059a4
 8000cdc:	08005a14 	.word	0x08005a14
 8000ce0:	080059c8 	.word	0x080059c8

08000ce4 <bootloader_handle_getrdp_cmd>:

void bootloader_handle_getrdp_cmd(uint8_t *bl_rx_buffer)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
    /* Handle "Get Read Protection Level" command */
	printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n\r");
 8000cec:	481c      	ldr	r0, [pc, #112]	@ (8000d60 <bootloader_handle_getrdp_cmd+0x7c>)
 8000cee:	f7ff fe49 	bl	8000984 <printmsg>

	uint8_t rdp_level = 0x00;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3b04      	subs	r3, #4
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3b04      	subs	r3, #4
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4619      	mov	r1, r3
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 f94c 	bl	8000fb0 <bootloader_verify_crc>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d117      	bne.n	8000d4e <bootloader_handle_getrdp_cmd+0x6a>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\n\r");
 8000d1e:	4811      	ldr	r0, [pc, #68]	@ (8000d64 <bootloader_handle_getrdp_cmd+0x80>)
 8000d20:	f7ff fe30 	bl	8000984 <printmsg>
		bootloader_send_ack(1);
 8000d24:	2001      	movs	r0, #1
 8000d26:	f000 f92b 	bl	8000f80 <bootloader_send_ack>
		rdp_level = get_flash_rdp_level();
 8000d2a:	f000 f9a3 	bl	8001074 <get_flash_rdp_level>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG:RDP level: %d %#x\n\r",rdp_level, rdp_level);
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	4619      	mov	r1, r3
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <bootloader_handle_getrdp_cmd+0x84>)
 8000d3c:	f7ff fe22 	bl	8000984 <printmsg>
		bootloader_uart_write_data(&rdp_level, 1);
 8000d40:	f107 030f 	add.w	r3, r7, #15
 8000d44:	2101      	movs	r1, #1
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f966 	bl	8001018 <bootloader_uart_write_data>

	}else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
		bootloader_send_nack();
	}
}
 8000d4c:	e004      	b.n	8000d58 <bootloader_handle_getrdp_cmd+0x74>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
 8000d4e:	4807      	ldr	r0, [pc, #28]	@ (8000d6c <bootloader_handle_getrdp_cmd+0x88>)
 8000d50:	f7ff fe18 	bl	8000984 <printmsg>
		bootloader_send_nack();
 8000d54:	f000 f902 	bl	8000f5c <bootloader_send_nack>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08005a38 	.word	0x08005a38
 8000d64:	080059a4 	.word	0x080059a4
 8000d68:	08005a64 	.word	0x08005a64
 8000d6c:	080059c8 	.word	0x080059c8

08000d70 <bootloader_handle_flash_erase_cmd>:

void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
    uint8_t erase_status = 0x00;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]
    uint32_t command_packet_len;
    uint32_t host_crc;

    printmsg("BL_DEBUG_MSG: bootloader_handle_flash_erase_cmd\n\r");
 8000d7c:	482b      	ldr	r0, [pc, #172]	@ (8000e2c <bootloader_handle_flash_erase_cmd+0xbc>)
 8000d7e:	f7ff fe01 	bl	8000984 <printmsg>

    /* Get total command length and host CRC */
    command_packet_len = bl_rx_buffer[0] + 1;
 8000d82:	4b2b      	ldr	r3, [pc, #172]	@ (8000e30 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	61bb      	str	r3, [r7, #24]
    host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len - 4));
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	3b04      	subs	r3, #4
 8000d8e:	4a28      	ldr	r2, [pc, #160]	@ (8000e30 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000d90:	4413      	add	r3, r2
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	617b      	str	r3, [r7, #20]

    /* Verify CRC */
    if (!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	3b04      	subs	r3, #4
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4824      	ldr	r0, [pc, #144]	@ (8000e30 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000da0:	f000 f906 	bl	8000fb0 <bootloader_verify_crc>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d136      	bne.n	8000e18 <bootloader_handle_flash_erase_cmd+0xa8>
    {
        printmsg("BL_DEBUG_MSG: CRC check success.\n\r");
 8000daa:	4822      	ldr	r0, [pc, #136]	@ (8000e34 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000dac:	f7ff fdea 	bl	8000984 <printmsg>
        bootloader_send_ack(1);
 8000db0:	2001      	movs	r0, #1
 8000db2:	f000 f8e5 	bl	8000f80 <bootloader_send_ack>

        uint32_t page_number     = pBuffer[2];
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3302      	adds	r3, #2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	61fb      	str	r3, [r7, #28]
        uint32_t number_of_pages = pBuffer[3];
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3303      	adds	r3, #3
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	613b      	str	r3, [r7, #16]

        printmsg("BL_DEBUG_MSG: page_number=%ld  number_of_pages=%ld\n\r", page_number, number_of_pages);
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	69f9      	ldr	r1, [r7, #28]
 8000dca:	481b      	ldr	r0, [pc, #108]	@ (8000e38 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000dcc:	f7ff fdda 	bl	8000984 <printmsg>

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dd6:	4819      	ldr	r0, [pc, #100]	@ (8000e3c <bootloader_handle_flash_erase_cmd+0xcc>)
 8000dd8:	f001 fdb6 	bl	8002948 <HAL_GPIO_WritePin>

        /* Mass erase check */
        if (page_number == 0xFF)
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	2bff      	cmp	r3, #255	@ 0xff
 8000de0:	d102      	bne.n	8000de8 <bootloader_handle_flash_erase_cmd+0x78>
        {
            /* Convert to sentinel value used in execute_flash_erase() */
            page_number = 0xFFFFFFFFU;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	61fb      	str	r3, [r7, #28]
        }

        erase_status = execute_flash_erase(page_number, number_of_pages);
 8000de8:	6939      	ldr	r1, [r7, #16]
 8000dea:	69f8      	ldr	r0, [r7, #28]
 8000dec:	f000 f984 	bl	80010f8 <execute_flash_erase>
 8000df0:	4603      	mov	r3, r0
 8000df2:	73fb      	strb	r3, [r7, #15]

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dfa:	4810      	ldr	r0, [pc, #64]	@ (8000e3c <bootloader_handle_flash_erase_cmd+0xcc>)
 8000dfc:	f001 fda4 	bl	8002948 <HAL_GPIO_WritePin>

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n\r", erase_status);
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	4619      	mov	r1, r3
 8000e04:	480e      	ldr	r0, [pc, #56]	@ (8000e40 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000e06:	f7ff fdbd 	bl	8000984 <printmsg>

        /* Send erase result to host */
        bootloader_uart_write_data(&erase_status, 1);
 8000e0a:	f107 030f 	add.w	r3, r7, #15
 8000e0e:	2101      	movs	r1, #1
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f901 	bl	8001018 <bootloader_uart_write_data>
    else
    {
        printmsg("BL_DEBUG_MSG: CRC check failed!\n\r");
        bootloader_send_nack();
    }
}
 8000e16:	e004      	b.n	8000e22 <bootloader_handle_flash_erase_cmd+0xb2>
        printmsg("BL_DEBUG_MSG: CRC check failed!\n\r");
 8000e18:	480a      	ldr	r0, [pc, #40]	@ (8000e44 <bootloader_handle_flash_erase_cmd+0xd4>)
 8000e1a:	f7ff fdb3 	bl	8000984 <printmsg>
        bootloader_send_nack();
 8000e1e:	f000 f89d 	bl	8000f5c <bootloader_send_nack>
}
 8000e22:	bf00      	nop
 8000e24:	3720      	adds	r7, #32
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	08005a88 	.word	0x08005a88
 8000e30:	200001d8 	.word	0x200001d8
 8000e34:	08005abc 	.word	0x08005abc
 8000e38:	08005ae0 	.word	0x08005ae0
 8000e3c:	48000400 	.word	0x48000400
 8000e40:	08005b18 	.word	0x08005b18
 8000e44:	08005b40 	.word	0x08005b40

08000e48 <bootloader_handle_mem_write_cmd>:



void bootloader_handle_mem_write_cmd(uint8_t *bl_rx_buffer)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	/* Handle "Memory Write" command */

	printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n\r");
 8000e50:	4831      	ldr	r0, [pc, #196]	@ (8000f18 <bootloader_handle_mem_write_cmd+0xd0>)
 8000e52:	f7ff fd97 	bl	8000984 <printmsg>

	uint8_t write_status = 0x00;
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]
	uint8_t payload_len = bl_rx_buffer[6];
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	799b      	ldrb	r3, [r3, #6]
 8000e5e:	77fb      	strb	r3, [r7, #31]

	uint32_t mem_addr = *((uint32_t*)(&bl_rx_buffer[2]));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000e66:	61bb      	str	r3, [r7, #24]

	uint32_t command_packet_len = bl_rx_buffer[0] + 1 ;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer + command_packet_len - 4));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	3b04      	subs	r3, #4
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	613b      	str	r3, [r7, #16]

	if(! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len -4, host_crc))
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4619      	mov	r1, r3
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 f893 	bl	8000fb0 <bootloader_verify_crc>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d13a      	bne.n	8000f06 <bootloader_handle_mem_write_cmd+0xbe>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\n\r");
 8000e90:	4822      	ldr	r0, [pc, #136]	@ (8000f1c <bootloader_handle_mem_write_cmd+0xd4>)
 8000e92:	f7ff fd77 	bl	8000984 <printmsg>
		bootloader_send_ack(1);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f000 f872 	bl	8000f80 <bootloader_send_ack>
		printmsg("BL_DEBUG_MSG: mem write address : %#x\n\r",mem_addr);
 8000e9c:	69b9      	ldr	r1, [r7, #24]
 8000e9e:	4820      	ldr	r0, [pc, #128]	@ (8000f20 <bootloader_handle_mem_write_cmd+0xd8>)
 8000ea0:	f7ff fd70 	bl	8000984 <printmsg>

		if( verify_address(mem_addr) == ADDR_VALID ) {
 8000ea4:	69b8      	ldr	r0, [r7, #24]
 8000ea6:	f000 f8f9 	bl	800109c <verify_address>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d11e      	bne.n	8000eee <bootloader_handle_mem_write_cmd+0xa6>


			printmsg("BL_DEBUG_MSG: valid mem write address\n\r");
 8000eb0:	481c      	ldr	r0, [pc, #112]	@ (8000f24 <bootloader_handle_mem_write_cmd+0xdc>)
 8000eb2:	f7ff fd67 	bl	8000984 <printmsg>

			//glow the led to indicate bootloader is currently writing to memory
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ebc:	481a      	ldr	r0, [pc, #104]	@ (8000f28 <bootloader_handle_mem_write_cmd+0xe0>)
 8000ebe:	f001 fd43 	bl	8002948 <HAL_GPIO_WritePin>

			/* Execute memory write*/
			write_status = execute_mem_write(&bl_rx_buffer[7], mem_addr, payload_len);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3307      	adds	r3, #7
 8000ec6:	7ffa      	ldrb	r2, [r7, #31]
 8000ec8:	69b9      	ldr	r1, [r7, #24]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f958 	bl	8001180 <execute_mem_write>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eda:	4813      	ldr	r0, [pc, #76]	@ (8000f28 <bootloader_handle_mem_write_cmd+0xe0>)
 8000edc:	f001 fd34 	bl	8002948 <HAL_GPIO_WritePin>

			//inform host about the status
			bootloader_uart_write_data(&write_status,1);
 8000ee0:	f107 030f 	add.w	r3, r7, #15
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f896 	bl	8001018 <bootloader_uart_write_data>
		}
	}else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
		bootloader_send_nack();
	}
}
 8000eec:	e010      	b.n	8000f10 <bootloader_handle_mem_write_cmd+0xc8>
			printmsg("BL_DEBUG_MSG: invalid mem write address\n\r");
 8000eee:	480f      	ldr	r0, [pc, #60]	@ (8000f2c <bootloader_handle_mem_write_cmd+0xe4>)
 8000ef0:	f7ff fd48 	bl	8000984 <printmsg>
			write_status = ADDR_INVALID;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
			bootloader_uart_write_data(&write_status,1);
 8000ef8:	f107 030f 	add.w	r3, r7, #15
 8000efc:	2101      	movs	r1, #1
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f88a 	bl	8001018 <bootloader_uart_write_data>
}
 8000f04:	e004      	b.n	8000f10 <bootloader_handle_mem_write_cmd+0xc8>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
 8000f06:	480a      	ldr	r0, [pc, #40]	@ (8000f30 <bootloader_handle_mem_write_cmd+0xe8>)
 8000f08:	f7ff fd3c 	bl	8000984 <printmsg>
		bootloader_send_nack();
 8000f0c:	f000 f826 	bl	8000f5c <bootloader_send_nack>
}
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	08005b64 	.word	0x08005b64
 8000f1c:	080059a4 	.word	0x080059a4
 8000f20:	08005b94 	.word	0x08005b94
 8000f24:	08005bbc 	.word	0x08005bbc
 8000f28:	48000400 	.word	0x48000400
 8000f2c:	08005be4 	.word	0x08005be4
 8000f30:	080059c8 	.word	0x080059c8

08000f34 <bootloader_handle_en_rw_protect>:


void bootloader_handle_en_rw_protect(uint8_t *bl_rx_buffer)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
    /* Handle "Enable Read/Write Protection" command */
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <bootloader_handle_dis_rw_protect>:

void bootloader_handle_dis_rw_protect(uint8_t *bl_rx_buffer)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
    /* Handle "Disable Read/Write Protection" command */
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <bootloader_send_nack>:

void bootloader_send_nack(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000f62:	237f      	movs	r3, #127	@ 0x7f
 8000f64:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART, (uint8_t*)&nack, 1, HAL_MAX_DELAY);
 8000f66:	1df9      	adds	r1, r7, #7
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4803      	ldr	r0, [pc, #12]	@ (8000f7c <bootloader_send_nack+0x20>)
 8000f70:	f003 f8cc 	bl	800410c <HAL_UART_Transmit>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000150 	.word	0x20000150

08000f80 <bootloader_send_ack>:

void bootloader_send_ack(uint8_t follow_len)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	/* 2 Bytes are sent, first byte is ACK and second is the length value */
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8000f8a:	23a5      	movs	r3, #165	@ 0xa5
 8000f8c:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART, (uint8_t*)&ack_buf, 2, HAL_MAX_DELAY);
 8000f92:	f107 010c 	add.w	r1, r7, #12
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	4803      	ldr	r0, [pc, #12]	@ (8000fac <bootloader_send_ack+0x2c>)
 8000f9e:	f003 f8b5 	bl	800410c <HAL_UART_Transmit>

}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000150 	.word	0x20000150

08000fb0 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc(uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xff;
 8000fbc:	23ff      	movs	r3, #255	@ 0xff
 8000fbe:	61fb      	str	r3, [r7, #28]

	for(int i=0; i<len; i++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	e00f      	b.n	8000fe6 <bootloader_verify_crc+0x36>
	{
		uint32_t i_data = pData[i];
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480e      	ldr	r0, [pc, #56]	@ (8001014 <bootloader_verify_crc+0x64>)
 8000fda:	f000 fd8d 	bl	8001af8 <HAL_CRC_Accumulate>
 8000fde:	61f8      	str	r0, [r7, #28]
	for(int i=0; i<len; i++)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	68ba      	ldr	r2, [r7, #8]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d8eb      	bhi.n	8000fc6 <bootloader_verify_crc+0x16>
	}

	/* Reset CRC Calculation Unit */
	__HAL_CRC_DR_RESET(&hcrc);
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <bootloader_verify_crc+0x64>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <bootloader_verify_crc+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 0201 	orr.w	r2, r2, #1
 8000ffc:	609a      	str	r2, [r3, #8]

	if(uwCRCValue == crc_host)
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	d101      	bne.n	800100a <bootloader_verify_crc+0x5a>
		return VERIFY_CRC_SUCCESS;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <bootloader_verify_crc+0x5c>
	return VERIFY_CRC_FAIL;
 800100a:	2301      	movs	r3, #1

}
 800100c:	4618      	mov	r0, r3
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200000a4 	.word	0x200000a4

08001018 <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(C_UART, pBuffer, len, HAL_MAX_DELAY);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b29a      	uxth	r2, r3
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4803      	ldr	r0, [pc, #12]	@ (800103c <bootloader_uart_write_data+0x24>)
 800102e:	f003 f86d 	bl	800410c <HAL_UART_Transmit>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000150 	.word	0x20000150

08001040 <get_bootloader_version>:

uint8_t get_bootloader_version()
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 8001044:	2310      	movs	r3, #16
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
	   the user software. It is even accessible while the MCU is under system reset.
	 */

	uint16_t cid;
	/* Reading the register and masking the unnecessary bits */
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <get_mcu_chip_id+0x20>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001060:	80fb      	strh	r3, [r7, #6]
	return cid;
 8001062:	88fb      	ldrh	r3, [r7, #6]
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e0042000 	.word	0xe0042000

08001074 <get_flash_rdp_level>:

uint8_t get_flash_rdp_level(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	@ 0x30
 8001078:	af00      	add	r7, sp, #0
	 *
	 * When decreased from 'Level 1 to Level 0', the FLASH goes into MASS ERASE.
	 *
	 * */
	/*HAL Implementation*/
	uint8_t rdp_status = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	FLASH_OBProgramInitTypeDef ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	4618      	mov	r0, r3
 8001084:	f001 f8c0 	bl	8002208 <HAL_FLASHEx_OBGetConfig>
	rdp_status = (uint8_t)ob_handle.RDPLevel;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	return rdp_status;
 800108e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001092:	4618      	mov	r0, r3
 8001094:	3730      	adds	r7, #48	@ 0x30
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <verify_address>:


uint8_t verify_address(uint32_t go_address)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	/*Jump to FLASH, System Memory, SRAM1, SRAM2, Backup SRAM allowed,
	 * others such as peripheral memory not allowed*/

	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010aa:	d305      	bcc.n	80010b8 <verify_address+0x1c>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <verify_address+0x54>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d801      	bhi.n	80010b8 <verify_address+0x1c>

		return ADDR_VALID;
 80010b4:	2300      	movs	r3, #0
 80010b6:	e014      	b.n	80010e2 <verify_address+0x46>
	} else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80010be:	d305      	bcc.n	80010cc <verify_address+0x30>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a0c      	ldr	r2, [pc, #48]	@ (80010f4 <verify_address+0x58>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d801      	bhi.n	80010cc <verify_address+0x30>

		return ADDR_VALID;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e00a      	b.n	80010e2 <verify_address+0x46>
	} else if ( go_address >= FLASH_BASE && go_address <= FLASH_END) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80010d2:	d305      	bcc.n	80010e0 <verify_address+0x44>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80010da:	d201      	bcs.n	80010e0 <verify_address+0x44>

		return ADDR_VALID;
 80010dc:	2300      	movs	r3, #0
 80010de:	e000      	b.n	80010e2 <verify_address+0x46>
	}else
	return ADDR_INVALID;
 80010e0:	2301      	movs	r3, #1
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20040000 	.word	0x20040000
 80010f4:	10010000 	.word	0x10010000

080010f8 <execute_flash_erase>:

uint8_t execute_flash_erase(uint32_t page_number, uint32_t number_of_pages)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef flashErase_handle;
    uint32_t sectorError;
    HAL_StatusTypeDef status;

    /* Validate page range */
    if ((page_number >= 512U) || ((page_number + number_of_pages) > 512U))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001108:	d205      	bcs.n	8001116 <execute_flash_erase+0x1e>
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	4413      	add	r3, r2
 8001110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001114:	d901      	bls.n	800111a <execute_flash_erase+0x22>
        return INVALID_SECTOR;
 8001116:	2304      	movs	r3, #4
 8001118:	e02e      	b.n	8001178 <execute_flash_erase+0x80>

    HAL_FLASH_Unlock();
 800111a:	f000 fef5 	bl	8001f08 <HAL_FLASH_Unlock>

    if (page_number == 0xFFFFFFFFU)   /* Mass Erase */
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d104      	bne.n	8001130 <execute_flash_erase+0x38>
    {
        flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8001126:	2301      	movs	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
        flashErase_handle.Banks = FLASH_BANK_BOTH;   /* erase both banks */
 800112a:	2303      	movs	r3, #3
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	e011      	b.n	8001154 <execute_flash_erase+0x5c>
    }
    else
    {
        flashErase_handle.TypeErase = FLASH_TYPEERASE_PAGES;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]

        if (page_number < 256U)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2bff      	cmp	r3, #255	@ 0xff
 8001138:	d804      	bhi.n	8001144 <execute_flash_erase+0x4c>
        {
            flashErase_handle.Banks = FLASH_BANK_1;
 800113a:	2301      	movs	r3, #1
 800113c:	613b      	str	r3, [r7, #16]
            flashErase_handle.Page  = page_number;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	e005      	b.n	8001150 <execute_flash_erase+0x58>
        }
        else
        {
            flashErase_handle.Banks = FLASH_BANK_2;
 8001144:	2302      	movs	r3, #2
 8001146:	613b      	str	r3, [r7, #16]
            flashErase_handle.Page  = page_number - 256U;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800114e:	617b      	str	r3, [r7, #20]
        }

        flashErase_handle.NbPages = number_of_pages;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	61bb      	str	r3, [r7, #24]
    }

    status = HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8001154:	f107 0208 	add.w	r2, r7, #8
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f000 ffb6 	bl	80020d0 <HAL_FLASHEx_Erase>
 8001164:	4603      	mov	r3, r0
 8001166:	77fb      	strb	r3, [r7, #31]
    HAL_FLASH_Lock();
 8001168:	f000 fef0 	bl	8001f4c <HAL_FLASH_Lock>

    if (status != HAL_OK)
 800116c:	7ffb      	ldrb	r3, [r7, #31]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <execute_flash_erase+0x7e>
        return ERASE_FAILED;
 8001172:	2311      	movs	r3, #17
 8001174:	e000      	b.n	8001178 <execute_flash_erase+0x80>

    return ERASE_SUCCESS;
 8001176:	2322      	movs	r3, #34	@ 0x22
}
 8001178:	4618      	mov	r0, r3
 800117a:	3720      	adds	r7, #32
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <execute_mem_write>:


uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 8001180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001184:	b091      	sub	sp, #68	@ 0x44
 8001186:	af00      	add	r7, sp, #0
 8001188:	61f8      	str	r0, [r7, #28]
 800118a:	61b9      	str	r1, [r7, #24]
 800118c:	617a      	str	r2, [r7, #20]
	/* Below code is for FLASH_TYPEPROGRAM_DOUBLEWORD logic - host application sends single word */

    HAL_StatusTypeDef status = HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    if ((mem_address & 0x7U) != 0U) return (uint8_t)HAL_ERROR; /* must be 8-byte aligned */
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <execute_mem_write+0x22>
 800119e:	2301      	movs	r3, #1
 80011a0:	e08c      	b.n	80012bc <execute_mem_write+0x13c>
    if (len == 0U) return (uint8_t)HAL_OK;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <execute_mem_write+0x2c>
 80011a8:	2300      	movs	r3, #0
 80011aa:	e087      	b.n	80012bc <execute_mem_write+0x13c>

    HAL_FLASH_Unlock();
 80011ac:	f000 feac 	bl	8001f08 <HAL_FLASH_Unlock>

    for (uint32_t offset = 0; offset < len; offset += 8U) {
 80011b0:	2300      	movs	r3, #0
 80011b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011b4:	e078      	b.n	80012a8 <execute_mem_write+0x128>
        uint64_t data64 = 0ULL;
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        uint32_t chunk = ((len - offset) >= 8U) ? 8U : (len - offset);
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b08      	cmp	r3, #8
 80011ca:	bf28      	it	cs
 80011cc:	2308      	movcs	r3, #8
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* pack available bytes (little-endian) */
        for (uint32_t b = 0U; b < chunk; ++b) {
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011d4:	e027      	b.n	8001226 <execute_mem_write+0xa6>
            data64 |= ((uint64_t)pBuffer[offset + b]) << (8U * b);
 80011d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011da:	4413      	add	r3, r2
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	4413      	add	r3, r2
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2200      	movs	r2, #0
 80011e6:	469a      	mov	sl, r3
 80011e8:	4693      	mov	fp, r2
 80011ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	f1a3 0120 	sub.w	r1, r3, #32
 80011f2:	f1c3 0220 	rsb	r2, r3, #32
 80011f6:	fa0b f503 	lsl.w	r5, fp, r3
 80011fa:	fa0a f101 	lsl.w	r1, sl, r1
 80011fe:	430d      	orrs	r5, r1
 8001200:	fa2a f202 	lsr.w	r2, sl, r2
 8001204:	4315      	orrs	r5, r2
 8001206:	fa0a f403 	lsl.w	r4, sl, r3
 800120a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800120e:	ea42 0104 	orr.w	r1, r2, r4
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	432b      	orrs	r3, r5
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800121c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for (uint32_t b = 0U; b < chunk; ++b) {
 8001220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001222:	3301      	adds	r3, #1
 8001224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	429a      	cmp	r2, r3
 800122c:	d3d3      	bcc.n	80011d6 <execute_mem_write+0x56>
        }
        /* pad remaining bytes with 0xFF if needed */
        for (uint32_t b = chunk; b < 8U; ++b) {
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001232:	e024      	b.n	800127e <execute_mem_write+0xfe>
            data64 |= ((uint64_t)0xFFU) << (8U * b);
 8001234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001236:	00d8      	lsls	r0, r3, #3
 8001238:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	f1a0 0620 	sub.w	r6, r0, #32
 8001244:	f1c0 0120 	rsb	r1, r0, #32
 8001248:	fa03 f900 	lsl.w	r9, r3, r0
 800124c:	fa02 f606 	lsl.w	r6, r2, r6
 8001250:	ea49 0906 	orr.w	r9, r9, r6
 8001254:	fa22 f101 	lsr.w	r1, r2, r1
 8001258:	ea49 0901 	orr.w	r9, r9, r1
 800125c:	fa02 f800 	lsl.w	r8, r2, r0
 8001260:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001264:	ea42 0108 	orr.w	r1, r2, r8
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	ea43 0309 	orr.w	r3, r3, r9
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001274:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for (uint32_t b = chunk; b < 8U; ++b) {
 8001278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800127a:	3301      	adds	r3, #1
 800127c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800127e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001280:	2b07      	cmp	r3, #7
 8001282:	d9d7      	bls.n	8001234 <execute_mem_write+0xb4>
        }

        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, mem_address + offset, data64);
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001288:	18d1      	adds	r1, r2, r3
 800128a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800128e:	2000      	movs	r0, #0
 8001290:	f000 fdce 	bl	8001e30 <HAL_FLASH_Program>
 8001294:	4603      	mov	r3, r0
 8001296:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (status != HAL_OK) break;
 800129a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d107      	bne.n	80012b2 <execute_mem_write+0x132>
    for (uint32_t offset = 0; offset < len; offset += 8U) {
 80012a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012a4:	3308      	adds	r3, #8
 80012a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d382      	bcc.n	80011b6 <execute_mem_write+0x36>
 80012b0:	e000      	b.n	80012b4 <execute_mem_write+0x134>
        if (status != HAL_OK) break;
 80012b2:	bf00      	nop
    }

    HAL_FLASH_Lock();
 80012b4:	f000 fe4a 	bl	8001f4c <HAL_FLASH_Lock>
    return (uint8_t)status; /* 0 = HAL_OK */
 80012b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3744      	adds	r7, #68	@ 0x44
 80012c0:	46bd      	mov	sp, r7
 80012c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080012c8 <handle_firmware_update>:
	/*TODO: Add CRC verification for the received function*/
	return available_version;
}

uint8_t handle_firmware_update(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0

		/* Find the inactive bank address and corresponding page numbers*/
	uint32_t inactive_bank_adress = (active_bank_number == FLASH_ACTIVE_BANK1) ? FLASH_FIRMWARE2 : FLASH_FIRMWARE1;
 80012ce:	4b2f      	ldr	r3, [pc, #188]	@ (800138c <handle_firmware_update+0xc4>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <handle_firmware_update+0x12>
 80012d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001390 <handle_firmware_update+0xc8>)
 80012d8:	e000      	b.n	80012dc <handle_firmware_update+0x14>
 80012da:	4b2e      	ldr	r3, [pc, #184]	@ (8001394 <handle_firmware_update+0xcc>)
 80012dc:	613b      	str	r3, [r7, #16]
	uint32_t inactive_page_number = (active_bank_number == FLASH_ACTIVE_BANK1) ? 256 : 16;
 80012de:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <handle_firmware_update+0xc4>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d102      	bne.n	80012ec <handle_firmware_update+0x24>
 80012e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012ea:	e000      	b.n	80012ee <handle_firmware_update+0x26>
 80012ec:	2310      	movs	r3, #16
 80012ee:	60fb      	str	r3, [r7, #12]
	uint8_t inactive_bank_number = (active_bank_number == FLASH_ACTIVE_BANK1) ? FLASH_ACTIVE_BANK2 : FLASH_ACTIVE_BANK1;
 80012f0:	4b26      	ldr	r3, [pc, #152]	@ (800138c <handle_firmware_update+0xc4>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <handle_firmware_update+0x34>
 80012f8:	2302      	movs	r3, #2
 80012fa:	e000      	b.n	80012fe <handle_firmware_update+0x36>
 80012fc:	2301      	movs	r3, #1
 80012fe:	72fb      	strb	r3, [r7, #11]

	printmsg("BL_DEBUG_MSG: Downloading binaries to inactive bank: %d \n\r", inactive_bank_number);
 8001300:	7afb      	ldrb	r3, [r7, #11]
 8001302:	4619      	mov	r1, r3
 8001304:	4824      	ldr	r0, [pc, #144]	@ (8001398 <handle_firmware_update+0xd0>)
 8001306:	f7ff fb3d 	bl	8000984 <printmsg>

	uint8_t update_request = BL_FW_UPDATE_REQUIRED;
 800130a:	2388      	movs	r3, #136	@ 0x88
 800130c:	707b      	strb	r3, [r7, #1]
	bootloader_uart_write_data(&update_request, 1);
 800130e:	1c7b      	adds	r3, r7, #1
 8001310:	2101      	movs	r1, #1
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fe80 	bl	8001018 <bootloader_uart_write_data>

	uint32_t current_address = inactive_bank_adress;
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	617b      	str	r3, [r7, #20]

	/*TODO: Need a continuous loop here to continuously get the pay load and write*/
	while(1)
	{
		memset(bl_rx_buffer, 0, BL_RX_LEN);
 800131c:	22c8      	movs	r2, #200	@ 0xc8
 800131e:	2100      	movs	r1, #0
 8001320:	481e      	ldr	r0, [pc, #120]	@ (800139c <handle_firmware_update+0xd4>)
 8001322:	f003 fd39 	bl	8004d98 <memset>
		HAL_UART_Receive(C_UART, (uint8_t*)&bl_rx_buffer, 1, HAL_MAX_DELAY);
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	2201      	movs	r2, #1
 800132c:	491b      	ldr	r1, [pc, #108]	@ (800139c <handle_firmware_update+0xd4>)
 800132e:	481c      	ldr	r0, [pc, #112]	@ (80013a0 <handle_firmware_update+0xd8>)
 8001330:	f002 ff75 	bl	800421e <HAL_UART_Receive>
		if(bl_rx_buffer[0] == 250)
 8001334:	4b19      	ldr	r3, [pc, #100]	@ (800139c <handle_firmware_update+0xd4>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2bfa      	cmp	r3, #250	@ 0xfa
 800133a:	d103      	bne.n	8001344 <handle_firmware_update+0x7c>
		{
			printmsg("BL_DEBUG_MSG: Download Complete! \n\r");
 800133c:	4819      	ldr	r0, [pc, #100]	@ (80013a4 <handle_firmware_update+0xdc>)
 800133e:	f7ff fb21 	bl	8000984 <printmsg>
			break;
 8001342:	e018      	b.n	8001376 <handle_firmware_update+0xae>
		}
		uint32_t rcv_len = bl_rx_buffer[0];
 8001344:	4b15      	ldr	r3, [pc, #84]	@ (800139c <handle_firmware_update+0xd4>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	607b      	str	r3, [r7, #4]
		HAL_UART_Receive(C_UART, (uint8_t*)&bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	b29a      	uxth	r2, r3
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	4915      	ldr	r1, [pc, #84]	@ (80013a8 <handle_firmware_update+0xe0>)
 8001354:	4812      	ldr	r0, [pc, #72]	@ (80013a0 <handle_firmware_update+0xd8>)
 8001356:	f002 ff62 	bl	800421e <HAL_UART_Receive>

		/* Get the length and check if new firmware fit into the banks, <= 480KB (in terms of words) TODO: Add size check, verification, roll back, other features*/
		// uint8_t write_status = 0x00;
		uint8_t payload_len = bl_rx_buffer[6];
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <handle_firmware_update+0xd4>)
 800135c:	799b      	ldrb	r3, [r3, #6]
 800135e:	70fb      	strb	r3, [r7, #3]
		/* Erase the Inactive bank */
		//execute_flash_erase(inactive_page_number , 240);
		//printmsg("Inactive bank erased. Ready to write. \n\r");

		/* Download onto Inactive bank */
		execute_mem_write(&bl_rx_buffer[7], current_address, payload_len);
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	461a      	mov	r2, r3
 8001364:	6979      	ldr	r1, [r7, #20]
 8001366:	4811      	ldr	r0, [pc, #68]	@ (80013ac <handle_firmware_update+0xe4>)
 8001368:	f7ff ff0a 	bl	8001180 <execute_mem_write>
		current_address += payload_len;
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4413      	add	r3, r2
 8001372:	617b      	str	r3, [r7, #20]
	{
 8001374:	e7d2      	b.n	800131c <handle_firmware_update+0x54>

	}

	/*Update the active bank number in FLASH */
	uint8_t num_status = update_active_bank_number(inactive_bank_number);
 8001376:	7afb      	ldrb	r3, [r7, #11]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f827 	bl	80013cc <update_active_bank_number>
 800137e:	4603      	mov	r3, r0
 8001380:	70bb      	strb	r3, [r7, #2]

	return num_status;
 8001382:	78bb      	ldrb	r3, [r7, #2]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200002a0 	.word	0x200002a0
 8001390:	08080000 	.word	0x08080000
 8001394:	08008000 	.word	0x08008000
 8001398:	08005c10 	.word	0x08005c10
 800139c:	200001d8 	.word	0x200001d8
 80013a0:	20000150 	.word	0x20000150
 80013a4:	08005c4c 	.word	0x08005c4c
 80013a8:	200001d9 	.word	0x200001d9
 80013ac:	200001df 	.word	0x200001df

080013b0 <bootloader_show_active_bank>:

void bootloader_show_active_bank(uint8_t *pBuffer)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	/* Variable to store the active firmware bank number - To be preserved even after powering off
	 * One method: one dedicated page (2KB) in FLASH for configuration data - meta-data*/
	bootloader_uart_write_data((uint8_t*)&pBuffer[1], 1);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3301      	adds	r3, #1
 80013bc:	2101      	movs	r1, #1
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fe2a 	bl	8001018 <bootloader_uart_write_data>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <update_active_bank_number>:

uint8_t update_active_bank_number(uint8_t active_bank)
{
 80013cc:	b5b0      	push	{r4, r5, r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]

	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t pageError;
	HAL_StatusTypeDef status;

	HAL_FLASH_Unlock();
 80013d6:	f000 fd97 	bl	8001f08 <HAL_FLASH_Unlock>

	flashErase_handle.Banks = FLASH_BANK_2;
 80013da:	2302      	movs	r3, #2
 80013dc:	613b      	str	r3, [r7, #16]
	flashErase_handle.NbPages = 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	61bb      	str	r3, [r7, #24]
	flashErase_handle.Page = FLASH_METADATA_PAGE;
 80013e2:	f240 13ff 	movw	r3, #511	@ 0x1ff
 80013e6:	617b      	str	r3, [r7, #20]
	flashErase_handle.TypeErase = FLASH_TYPEERASE_PAGES;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]

	status = HAL_FLASHEx_Erase(&flashErase_handle, &pageError);
 80013ec:	f107 0208 	add.w	r2, r7, #8
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fe6a 	bl	80020d0 <HAL_FLASHEx_Erase>
 80013fc:	4603      	mov	r3, r0
 80013fe:	77fb      	strb	r3, [r7, #31]
	if (status == HAL_ERROR) return HAL_ERROR;
 8001400:	7ffb      	ldrb	r3, [r7, #31]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <update_active_bank_number+0x3e>
 8001406:	2301      	movs	r3, #1
 8001408:	e00e      	b.n	8001428 <update_active_bank_number+0x5c>

	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_METADATA_BASEADDR, (uint64_t)active_bank);
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2200      	movs	r2, #0
 800140e:	461c      	mov	r4, r3
 8001410:	4615      	mov	r5, r2
 8001412:	4622      	mov	r2, r4
 8001414:	462b      	mov	r3, r5
 8001416:	4906      	ldr	r1, [pc, #24]	@ (8001430 <update_active_bank_number+0x64>)
 8001418:	2000      	movs	r0, #0
 800141a:	f000 fd09 	bl	8001e30 <HAL_FLASH_Program>
 800141e:	4603      	mov	r3, r0
 8001420:	77fb      	strb	r3, [r7, #31]

	HAL_FLASH_Lock();
 8001422:	f000 fd93 	bl	8001f4c <HAL_FLASH_Lock>

	return status;
 8001426:	7ffb      	ldrb	r3, [r7, #31]

}
 8001428:	4618      	mov	r0, r3
 800142a:	3720      	adds	r7, #32
 800142c:	46bd      	mov	sp, r7
 800142e:	bdb0      	pop	{r4, r5, r7, pc}
 8001430:	080ff800 	.word	0x080ff800

08001434 <fetch_active_bank_number>:

uint8_t fetch_active_bank_number(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
	/*Fetch the active bank details from dedicated FLASH meta data page*/
	uint64_t retrieved_data;
	retrieved_data = *(const uint64_t*) FLASH_METADATA_BASEADDR;
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <fetch_active_bank_number+0x20>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	e9c7 2300 	strd	r2, r3, [r7]

	return (uint8_t)retrieved_data;
 8001444:	783b      	ldrb	r3, [r7, #0]
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	080ff800 	.word	0x080ff800

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <Error_Handler+0x8>

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <HAL_MspInit+0x44>)
 800146c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146e:	4a0e      	ldr	r2, [pc, #56]	@ (80014a8 <HAL_MspInit+0x44>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6613      	str	r3, [r2, #96]	@ 0x60
 8001476:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <HAL_MspInit+0x44>)
 8001478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <HAL_MspInit+0x44>)
 8001484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001486:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <HAL_MspInit+0x44>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800148c:	6593      	str	r3, [r2, #88]	@ 0x58
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_MspInit+0x44>)
 8001490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000

080014ac <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <HAL_CRC_MspInit+0x38>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d10b      	bne.n	80014d6 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <HAL_CRC_MspInit+0x3c>)
 80014c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c2:	4a09      	ldr	r2, [pc, #36]	@ (80014e8 <HAL_CRC_MspInit+0x3c>)
 80014c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80014ca:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <HAL_CRC_MspInit+0x3c>)
 80014cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023000 	.word	0x40023000
 80014e8:	40021000 	.word	0x40021000

080014ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b0ae      	sub	sp, #184	@ 0xb8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001504:	f107 0318 	add.w	r3, r7, #24
 8001508:	228c      	movs	r2, #140	@ 0x8c
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f003 fc43 	bl	8004d98 <memset>
  if(huart->Instance==LPUART1)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a43      	ldr	r2, [pc, #268]	@ (8001624 <HAL_UART_MspInit+0x138>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d13e      	bne.n	800159a <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800151c:	2320      	movs	r3, #32
 800151e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001520:	2300      	movs	r3, #0
 8001522:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001524:	f107 0318 	add.w	r3, r7, #24
 8001528:	4618      	mov	r0, r3
 800152a:	f002 f8d7 	bl	80036dc <HAL_RCCEx_PeriphCLKConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001534:	f7ff ff90 	bl	8001458 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001538:	4b3b      	ldr	r3, [pc, #236]	@ (8001628 <HAL_UART_MspInit+0x13c>)
 800153a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800153c:	4a3a      	ldr	r2, [pc, #232]	@ (8001628 <HAL_UART_MspInit+0x13c>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001544:	4b38      	ldr	r3, [pc, #224]	@ (8001628 <HAL_UART_MspInit+0x13c>)
 8001546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001550:	4b35      	ldr	r3, [pc, #212]	@ (8001628 <HAL_UART_MspInit+0x13c>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001554:	4a34      	ldr	r2, [pc, #208]	@ (8001628 <HAL_UART_MspInit+0x13c>)
 8001556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800155a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155c:	4b32      	ldr	r3, [pc, #200]	@ (8001628 <HAL_UART_MspInit+0x13c>)
 800155e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001568:	f001 fa6a 	bl	8002a40 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800156c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001570:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001586:	2308      	movs	r3, #8
 8001588:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800158c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001590:	4619      	mov	r1, r3
 8001592:	4826      	ldr	r0, [pc, #152]	@ (800162c <HAL_UART_MspInit+0x140>)
 8001594:	f001 f82e 	bl	80025f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001598:	e03f      	b.n	800161a <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a24      	ldr	r2, [pc, #144]	@ (8001630 <HAL_UART_MspInit+0x144>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d13a      	bne.n	800161a <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 f893 	bl	80036dc <HAL_RCCEx_PeriphCLKConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80015bc:	f7ff ff4c 	bl	8001458 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c0:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <HAL_UART_MspInit+0x13c>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	4a18      	ldr	r2, [pc, #96]	@ (8001628 <HAL_UART_MspInit+0x13c>)
 80015c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <HAL_UART_MspInit+0x13c>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <HAL_UART_MspInit+0x13c>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015dc:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <HAL_UART_MspInit+0x13c>)
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e4:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <HAL_UART_MspInit+0x13c>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015f0:	2360      	movs	r3, #96	@ 0x60
 80015f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001608:	2307      	movs	r3, #7
 800160a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001612:	4619      	mov	r1, r3
 8001614:	4807      	ldr	r0, [pc, #28]	@ (8001634 <HAL_UART_MspInit+0x148>)
 8001616:	f000 ffed 	bl	80025f4 <HAL_GPIO_Init>
}
 800161a:	bf00      	nop
 800161c:	37b8      	adds	r7, #184	@ 0xb8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40008000 	.word	0x40008000
 8001628:	40021000 	.word	0x40021000
 800162c:	48001800 	.word	0x48001800
 8001630:	40004400 	.word	0x40004400
 8001634:	48000c00 	.word	0x48000c00

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <NMI_Handler+0x4>

08001640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <MemManage_Handler+0x4>

08001650 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <UsageFault_Handler+0x4>

08001660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168e:	f000 f8c9 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a0:	4a14      	ldr	r2, [pc, #80]	@ (80016f4 <_sbrk+0x5c>)
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <_sbrk+0x60>)
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <_sbrk+0x64>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	@ (8001700 <_sbrk+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d207      	bcs.n	80016d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c8:	f003 fb6e 	bl	8004da8 <__errno>
 80016cc:	4603      	mov	r3, r0
 80016ce:	220c      	movs	r2, #12
 80016d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	e009      	b.n	80016ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d8:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016de:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <_sbrk+0x64>)
 80016e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20040000 	.word	0x20040000
 80016f8:	00000400 	.word	0x00000400
 80016fc:	200002a4 	.word	0x200002a4
 8001700:	200003f8 	.word	0x200003f8

08001704 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <SystemInit+0x20>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800170e:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <SystemInit+0x20>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001760 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800172c:	f7ff ffea 	bl	8001704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <LoopForever+0x6>)
  ldr r1, =_edata
 8001732:	490d      	ldr	r1, [pc, #52]	@ (8001768 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001734:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <LoopForever+0xe>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001748:	4c0a      	ldr	r4, [pc, #40]	@ (8001774 <LoopForever+0x16>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001756:	f003 fb2d 	bl	8004db4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800175a:	f7fe ff37 	bl	80005cc <main>

0800175e <LoopForever>:

LoopForever:
    b LoopForever
 800175e:	e7fe      	b.n	800175e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001760:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800176c:	08005cfc 	.word	0x08005cfc
  ldr r2, =_sbss
 8001770:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001774:	200003f4 	.word	0x200003f4

08001778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC1_2_IRQHandler>

0800177a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
 8001786:	f000 f91f 	bl	80019c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800178a:	2000      	movs	r0, #0
 800178c:	f000 f80e 	bl	80017ac <HAL_InitTick>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d002      	beq.n	800179c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	e001      	b.n	80017a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800179c:	f7ff fe62 	bl	8001464 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017a0:	79fb      	ldrb	r3, [r7, #7]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017b8:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <HAL_InitTick+0x6c>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d023      	beq.n	8001808 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017c0:	4b16      	ldr	r3, [pc, #88]	@ (800181c <HAL_InitTick+0x70>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <HAL_InitTick+0x6c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f91d 	bl	8001a16 <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10f      	bne.n	8001802 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d809      	bhi.n	80017fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f000 f8f5 	bl	80019de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <HAL_InitTick+0x74>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e007      	b.n	800180c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	e004      	b.n	800180c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	e001      	b.n	800180c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000014 	.word	0x20000014
 800181c:	2000000c 	.word	0x2000000c
 8001820:	20000010 	.word	0x20000010

08001824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000014 	.word	0x20000014
 8001848:	200002a8 	.word	0x200002a8

0800184c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200002a8 	.word	0x200002a8

08001864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b0:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <__NVIC_GetPriorityGrouping+0x18>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0307 	and.w	r3, r3, #7
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db0a      	blt.n	80018f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	490c      	ldr	r1, [pc, #48]	@ (8001914 <__NVIC_SetPriority+0x4c>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f0:	e00a      	b.n	8001908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4908      	ldr	r1, [pc, #32]	@ (8001918 <__NVIC_SetPriority+0x50>)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	3b04      	subs	r3, #4
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	440b      	add	r3, r1
 8001906:	761a      	strb	r2, [r3, #24]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000e100 	.word	0xe000e100
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	@ 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f1c3 0307 	rsb	r3, r3, #7
 8001936:	2b04      	cmp	r3, #4
 8001938:	bf28      	it	cs
 800193a:	2304      	movcs	r3, #4
 800193c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3304      	adds	r3, #4
 8001942:	2b06      	cmp	r3, #6
 8001944:	d902      	bls.n	800194c <NVIC_EncodePriority+0x30>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3b03      	subs	r3, #3
 800194a:	e000      	b.n	800194e <NVIC_EncodePriority+0x32>
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43d9      	mvns	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	4313      	orrs	r3, r2
         );
}
 8001976:	4618      	mov	r0, r3
 8001978:	3724      	adds	r7, #36	@ 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001994:	d301      	bcc.n	800199a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001996:	2301      	movs	r3, #1
 8001998:	e00f      	b.n	80019ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199a:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <SysTick_Config+0x40>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a2:	210f      	movs	r1, #15
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f7ff ff8e 	bl	80018c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ac:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <SysTick_Config+0x40>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b2:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <SysTick_Config+0x40>)
 80019b4:	2207      	movs	r2, #7
 80019b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	e000e010 	.word	0xe000e010

080019c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff47 	bl	8001864 <__NVIC_SetPriorityGrouping>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019f0:	f7ff ff5c 	bl	80018ac <__NVIC_GetPriorityGrouping>
 80019f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	6978      	ldr	r0, [r7, #20]
 80019fc:	f7ff ff8e 	bl	800191c <NVIC_EncodePriority>
 8001a00:	4602      	mov	r2, r0
 8001a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff5d 	bl	80018c8 <__NVIC_SetPriority>
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffb0 	bl	8001984 <SysTick_Config>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e054      	b.n	8001aec <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7f5b      	ldrb	r3, [r3, #29]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d105      	bne.n	8001a58 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fd2a 	bl	80014ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10c      	bne.n	8001a80 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a22      	ldr	r2, [pc, #136]	@ (8001af4 <HAL_CRC_Init+0xc4>)
 8001a6c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0218 	bic.w	r2, r2, #24
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	e00c      	b.n	8001a9a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6899      	ldr	r1, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f942 	bl	8001d14 <HAL_CRCEx_Polynomial_Set>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e028      	b.n	8001aec <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	795b      	ldrb	r3, [r3, #5]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d105      	bne.n	8001aae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aaa:	611a      	str	r2, [r3, #16]
 8001aac:	e004      	b.n	8001ab8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6912      	ldr	r2, [r2, #16]
 8001ab6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	04c11db7 	.word	0x04c11db7

08001af8 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d006      	beq.n	8001b24 <HAL_CRC_Accumulate+0x2c>
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d829      	bhi.n	8001b6e <HAL_CRC_Accumulate+0x76>
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d019      	beq.n	8001b52 <HAL_CRC_Accumulate+0x5a>
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d01e      	beq.n	8001b60 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8001b22:	e024      	b.n	8001b6e <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e00a      	b.n	8001b40 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	441a      	add	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d3f0      	bcc.n	8001b2a <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	613b      	str	r3, [r7, #16]
      break;
 8001b50:	e00e      	b.n	8001b70 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f812 	bl	8001b80 <CRC_Handle_8>
 8001b5c:	6138      	str	r0, [r7, #16]
      break;
 8001b5e:	e007      	b.n	8001b70 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f89b 	bl	8001ca0 <CRC_Handle_16>
 8001b6a:	6138      	str	r0, [r7, #16]
      break;
 8001b6c:	e000      	b.n	8001b70 <HAL_CRC_Accumulate+0x78>
      break;
 8001b6e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001b76:	693b      	ldr	r3, [r7, #16]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	@ 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	e023      	b.n	8001bda <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	4413      	add	r3, r2
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	440b      	add	r3, r1
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001bac:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	440b      	add	r3, r1
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001bbc:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	3303      	adds	r3, #3
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	440b      	add	r3, r1
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001bd0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001bd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d3d6      	bcc.n	8001b92 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d04f      	beq.n	8001c8e <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d107      	bne.n	8001c08 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	4413      	add	r3, r2
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d117      	bne.n	8001c42 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	4413      	add	r3, r2
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	3301      	adds	r3, #1
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	440b      	add	r3, r1
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	4313      	orrs	r3, r2
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	8b7a      	ldrh	r2, [r7, #26]
 8001c40:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d120      	bne.n	8001c8e <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	4413      	add	r3, r2
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	b21a      	sxth	r2, r3
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	3301      	adds	r3, #1
 8001c62:	68b9      	ldr	r1, [r7, #8]
 8001c64:	440b      	add	r3, r1
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b21b      	sxth	r3, r3
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	8b7a      	ldrh	r2, [r7, #26]
 8001c7a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	4413      	add	r3, r2
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3724      	adds	r7, #36	@ 0x24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	e013      	b.n	8001cda <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4413      	add	r3, r2
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	041a      	lsls	r2, r3, #16
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	440b      	add	r3, r1
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d3e6      	bcc.n	8001cb2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	881a      	ldrh	r2, [r3, #0]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001d24:	231f      	movs	r3, #31
 8001d26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	75fb      	strb	r3, [r7, #23]
 8001d36:	e063      	b.n	8001e00 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001d38:	bf00      	nop
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1e5a      	subs	r2, r3, #1
 8001d3e:	613a      	str	r2, [r7, #16]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <HAL_CRCEx_Polynomial_Set+0x44>
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b18      	cmp	r3, #24
 8001d5c:	d846      	bhi.n	8001dec <HAL_CRCEx_Polynomial_Set+0xd8>
 8001d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d64 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d64:	08001df3 	.word	0x08001df3
 8001d68:	08001ded 	.word	0x08001ded
 8001d6c:	08001ded 	.word	0x08001ded
 8001d70:	08001ded 	.word	0x08001ded
 8001d74:	08001ded 	.word	0x08001ded
 8001d78:	08001ded 	.word	0x08001ded
 8001d7c:	08001ded 	.word	0x08001ded
 8001d80:	08001ded 	.word	0x08001ded
 8001d84:	08001de1 	.word	0x08001de1
 8001d88:	08001ded 	.word	0x08001ded
 8001d8c:	08001ded 	.word	0x08001ded
 8001d90:	08001ded 	.word	0x08001ded
 8001d94:	08001ded 	.word	0x08001ded
 8001d98:	08001ded 	.word	0x08001ded
 8001d9c:	08001ded 	.word	0x08001ded
 8001da0:	08001ded 	.word	0x08001ded
 8001da4:	08001dd5 	.word	0x08001dd5
 8001da8:	08001ded 	.word	0x08001ded
 8001dac:	08001ded 	.word	0x08001ded
 8001db0:	08001ded 	.word	0x08001ded
 8001db4:	08001ded 	.word	0x08001ded
 8001db8:	08001ded 	.word	0x08001ded
 8001dbc:	08001ded 	.word	0x08001ded
 8001dc0:	08001ded 	.word	0x08001ded
 8001dc4:	08001dc9 	.word	0x08001dc9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d913      	bls.n	8001df6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001dd2:	e010      	b.n	8001df6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b07      	cmp	r3, #7
 8001dd8:	d90f      	bls.n	8001dfa <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001dde:	e00c      	b.n	8001dfa <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	d90b      	bls.n	8001dfe <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001dea:	e008      	b.n	8001dfe <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	75fb      	strb	r3, [r7, #23]
        break;
 8001df0:	e006      	b.n	8001e00 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001df2:	bf00      	nop
 8001df4:	e004      	b.n	8001e00 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001df6:	bf00      	nop
 8001df8:	e002      	b.n	8001e00 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001dfa:	bf00      	nop
 8001dfc:	e000      	b.n	8001e00 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001dfe:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10d      	bne.n	8001e22 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f023 0118 	bic.w	r1, r3, #24
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e42:	4b2f      	ldr	r3, [pc, #188]	@ (8001f00 <HAL_FLASH_Program+0xd0>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_FLASH_Program+0x1e>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e053      	b.n	8001ef6 <HAL_FLASH_Program+0xc6>
 8001e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f00 <HAL_FLASH_Program+0xd0>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e54:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001e58:	f000 f888 	bl	8001f6c <FLASH_WaitForLastOperation>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d143      	bne.n	8001eee <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e66:	4b26      	ldr	r3, [pc, #152]	@ (8001f00 <HAL_FLASH_Program+0xd0>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001e6c:	4b25      	ldr	r3, [pc, #148]	@ (8001f04 <HAL_FLASH_Program+0xd4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d009      	beq.n	8001e8c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001e78:	4b22      	ldr	r3, [pc, #136]	@ (8001f04 <HAL_FLASH_Program+0xd4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a21      	ldr	r2, [pc, #132]	@ (8001f04 <HAL_FLASH_Program+0xd4>)
 8001e7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e82:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001e84:	4b1e      	ldr	r3, [pc, #120]	@ (8001f00 <HAL_FLASH_Program+0xd0>)
 8001e86:	2202      	movs	r2, #2
 8001e88:	771a      	strb	r2, [r3, #28]
 8001e8a:	e002      	b.n	8001e92 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <HAL_FLASH_Program+0xd0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e9c:	68b8      	ldr	r0, [r7, #8]
 8001e9e:	f000 f8bb 	bl	8002018 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	e010      	b.n	8001eca <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d002      	beq.n	8001eb4 <HAL_FLASH_Program+0x84>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d10a      	bne.n	8001eca <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	68b8      	ldr	r0, [r7, #8]
 8001eba:	f000 f8d3 	bl	8002064 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d102      	bne.n	8001eca <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001ec4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001ec8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001eca:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ece:	f000 f84d 	bl	8001f6c <FLASH_WaitForLastOperation>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d006      	beq.n	8001eea <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001edc:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <HAL_FLASH_Program+0xd4>)
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	4907      	ldr	r1, [pc, #28]	@ (8001f04 <HAL_FLASH_Program+0xd4>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001eea:	f000 fa39 	bl	8002360 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001eee:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <HAL_FLASH_Program+0xd0>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]

  return status;
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000018 	.word	0x20000018
 8001f04:	40022000 	.word	0x40022000

08001f08 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001f12:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <HAL_FLASH_Unlock+0x38>)
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	da0b      	bge.n	8001f32 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001f1a:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <HAL_FLASH_Unlock+0x38>)
 8001f1c:	4a09      	ldr	r2, [pc, #36]	@ (8001f44 <HAL_FLASH_Unlock+0x3c>)
 8001f1e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001f20:	4b07      	ldr	r3, [pc, #28]	@ (8001f40 <HAL_FLASH_Unlock+0x38>)
 8001f22:	4a09      	ldr	r2, [pc, #36]	@ (8001f48 <HAL_FLASH_Unlock+0x40>)
 8001f24:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_FLASH_Unlock+0x38>)
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da01      	bge.n	8001f32 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001f32:	79fb      	ldrb	r3, [r7, #7]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40022000 	.word	0x40022000
 8001f44:	45670123 	.word	0x45670123
 8001f48:	cdef89ab 	.word	0xcdef89ab

08001f4c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001f50:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <HAL_FLASH_Lock+0x1c>)
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	4a04      	ldr	r2, [pc, #16]	@ (8001f68 <HAL_FLASH_Lock+0x1c>)
 8001f56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f5a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40022000 	.word	0x40022000

08001f6c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7ff fc6a 	bl	800184c <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001f7a:	e00d      	b.n	8001f98 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f82:	d009      	beq.n	8001f98 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001f84:	f7ff fc62 	bl	800184c <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d801      	bhi.n	8001f98 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e036      	b.n	8002006 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001f98:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <FLASH_WaitForLastOperation+0xa4>)
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1eb      	bne.n	8001f7c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <FLASH_WaitForLastOperation+0xa4>)
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01d      	beq.n	8001ff2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001fb6:	4b17      	ldr	r3, [pc, #92]	@ (8002014 <FLASH_WaitForLastOperation+0xa8>)
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	4a15      	ldr	r2, [pc, #84]	@ (8002014 <FLASH_WaitForLastOperation+0xa8>)
 8001fc0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc8:	d307      	bcc.n	8001fda <FLASH_WaitForLastOperation+0x6e>
 8001fca:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <FLASH_WaitForLastOperation+0xa4>)
 8001fcc:	699a      	ldr	r2, [r3, #24]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8001fd4:	490e      	ldr	r1, [pc, #56]	@ (8002010 <FLASH_WaitForLastOperation+0xa4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	618b      	str	r3, [r1, #24]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <FLASH_WaitForLastOperation+0x82>
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <FLASH_WaitForLastOperation+0xa4>)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001fec:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e009      	b.n	8002006 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001ff2:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <FLASH_WaitForLastOperation+0xa4>)
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ffe:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <FLASH_WaitForLastOperation+0xa4>)
 8002000:	2201      	movs	r2, #1
 8002002:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40022000 	.word	0x40022000
 8002014:	20000018 	.word	0x20000018

08002018 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002024:	4b0e      	ldr	r3, [pc, #56]	@ (8002060 <FLASH_Program_DoubleWord+0x48>)
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	4a0d      	ldr	r2, [pc, #52]	@ (8002060 <FLASH_Program_DoubleWord+0x48>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002036:	f3bf 8f6f 	isb	sy
}
 800203a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800203c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	000a      	movs	r2, r1
 800204a:	2300      	movs	r3, #0
 800204c:	68f9      	ldr	r1, [r7, #12]
 800204e:	3104      	adds	r1, #4
 8002050:	4613      	mov	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	40022000 	.word	0x40022000

08002064 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	@ 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800206e:	2340      	movs	r3, #64	@ 0x40
 8002070:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800207a:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <FLASH_Program_Fast+0x68>)
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	4a13      	ldr	r2, [pc, #76]	@ (80020cc <FLASH_Program_Fast+0x68>)
 8002080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002084:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002086:	f3ef 8310 	mrs	r3, PRIMASK
 800208a:	60fb      	str	r3, [r7, #12]
  return(result);
 800208c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800208e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002090:	b672      	cpsid	i
}
 8002092:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	3304      	adds	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3304      	adds	r3, #4
 80020a6:	617b      	str	r3, [r7, #20]
    row_index--;
 80020a8:	7ffb      	ldrb	r3, [r7, #31]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80020ae:	7ffb      	ldrb	r3, [r7, #31]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ef      	bne.n	8002094 <FLASH_Program_Fast+0x30>
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f383 8810 	msr	PRIMASK, r3
}
 80020be:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80020c0:	bf00      	nop
 80020c2:	3724      	adds	r7, #36	@ 0x24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40022000 	.word	0x40022000

080020d0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80020da:	4b49      	ldr	r3, [pc, #292]	@ (8002200 <HAL_FLASHEx_Erase+0x130>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_FLASHEx_Erase+0x16>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e087      	b.n	80021f6 <HAL_FLASHEx_Erase+0x126>
 80020e6:	4b46      	ldr	r3, [pc, #280]	@ (8002200 <HAL_FLASHEx_Erase+0x130>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020ec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80020f0:	f7ff ff3c 	bl	8001f6c <FLASH_WaitForLastOperation>
 80020f4:	4603      	mov	r3, r0
 80020f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d177      	bne.n	80021ee <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020fe:	4b40      	ldr	r3, [pc, #256]	@ (8002200 <HAL_FLASHEx_Erase+0x130>)
 8002100:	2200      	movs	r2, #0
 8002102:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002104:	4b3f      	ldr	r3, [pc, #252]	@ (8002204 <HAL_FLASHEx_Erase+0x134>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800210c:	2b00      	cmp	r3, #0
 800210e:	d013      	beq.n	8002138 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002110:	4b3c      	ldr	r3, [pc, #240]	@ (8002204 <HAL_FLASHEx_Erase+0x134>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002118:	2b00      	cmp	r3, #0
 800211a:	d009      	beq.n	8002130 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800211c:	4b39      	ldr	r3, [pc, #228]	@ (8002204 <HAL_FLASHEx_Erase+0x134>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a38      	ldr	r2, [pc, #224]	@ (8002204 <HAL_FLASHEx_Erase+0x134>)
 8002122:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002126:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002128:	4b35      	ldr	r3, [pc, #212]	@ (8002200 <HAL_FLASHEx_Erase+0x130>)
 800212a:	2203      	movs	r2, #3
 800212c:	771a      	strb	r2, [r3, #28]
 800212e:	e016      	b.n	800215e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002130:	4b33      	ldr	r3, [pc, #204]	@ (8002200 <HAL_FLASHEx_Erase+0x130>)
 8002132:	2201      	movs	r2, #1
 8002134:	771a      	strb	r2, [r3, #28]
 8002136:	e012      	b.n	800215e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002138:	4b32      	ldr	r3, [pc, #200]	@ (8002204 <HAL_FLASHEx_Erase+0x134>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002140:	2b00      	cmp	r3, #0
 8002142:	d009      	beq.n	8002158 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002144:	4b2f      	ldr	r3, [pc, #188]	@ (8002204 <HAL_FLASHEx_Erase+0x134>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a2e      	ldr	r2, [pc, #184]	@ (8002204 <HAL_FLASHEx_Erase+0x134>)
 800214a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800214e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002150:	4b2b      	ldr	r3, [pc, #172]	@ (8002200 <HAL_FLASHEx_Erase+0x130>)
 8002152:	2202      	movs	r2, #2
 8002154:	771a      	strb	r2, [r3, #28]
 8002156:	e002      	b.n	800215e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002158:	4b29      	ldr	r3, [pc, #164]	@ (8002200 <HAL_FLASHEx_Erase+0x130>)
 800215a:	2200      	movs	r2, #0
 800215c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d113      	bne.n	800218e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f89a 	bl	80022a4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002170:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002174:	f7ff fefa 	bl	8001f6c <FLASH_WaitForLastOperation>
 8002178:	4603      	mov	r3, r0
 800217a:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800217c:	4b21      	ldr	r3, [pc, #132]	@ (8002204 <HAL_FLASHEx_Erase+0x134>)
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	4a20      	ldr	r2, [pc, #128]	@ (8002204 <HAL_FLASHEx_Erase+0x134>)
 8002182:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002186:	f023 0304 	bic.w	r3, r3, #4
 800218a:	6153      	str	r3, [r2, #20]
 800218c:	e02d      	b.n	80021ea <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	e01d      	b.n	80021da <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4619      	mov	r1, r3
 80021a4:	68b8      	ldr	r0, [r7, #8]
 80021a6:	f000 f8a5 	bl	80022f4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021aa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80021ae:	f7ff fedd 	bl	8001f6c <FLASH_WaitForLastOperation>
 80021b2:	4603      	mov	r3, r0
 80021b4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80021b6:	4b13      	ldr	r3, [pc, #76]	@ (8002204 <HAL_FLASHEx_Erase+0x134>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4a12      	ldr	r2, [pc, #72]	@ (8002204 <HAL_FLASHEx_Erase+0x134>)
 80021bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80021c0:	f023 0302 	bic.w	r3, r3, #2
 80021c4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	601a      	str	r2, [r3, #0]
          break;
 80021d2:	e00a      	b.n	80021ea <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	3301      	adds	r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d3d9      	bcc.n	800219e <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80021ea:	f000 f8b9 	bl	8002360 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80021ee:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <HAL_FLASHEx_Erase+0x130>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]

  return status;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000018 	.word	0x20000018
 8002204:	40022000 	.word	0x40022000

08002208 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2206      	movs	r2, #6
 8002214:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <HAL_FLASHEx_OBGetConfig+0x2e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d007      	beq.n	8002236 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800222a:	2b02      	cmp	r3, #2
 800222c:	d003      	beq.n	8002236 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b04      	cmp	r3, #4
 8002234:	d10f      	bne.n	8002256 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f043 0201 	orr.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6858      	ldr	r0, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f103 0108 	add.w	r1, r3, #8
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	330c      	adds	r3, #12
 8002250:	461a      	mov	r2, r3
 8002252:	f000 f8cf 	bl	80023f4 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8002256:	f000 f917 	bl	8002488 <FLASH_OB_GetRDP>
 800225a:	4602      	mov	r2, r0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8002260:	f000 f92c 	bl	80024bc <FLASH_OB_GetUser>
 8002264:	4602      	mov	r2, r0
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d003      	beq.n	800227a <HAL_FLASHEx_OBGetConfig+0x72>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d110      	bne.n	800229c <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f043 0208 	orr.w	r2, r3, #8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f103 001c 	add.w	r0, r3, #28
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f103 0120 	add.w	r1, r3, #32
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3324      	adds	r3, #36	@ 0x24
 8002296:	461a      	mov	r2, r3
 8002298:	f000 f924 	bl	80024e4 <FLASH_OB_GetPCROP>
  }
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80022b6:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <FLASH_MassErase+0x4c>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	4a0d      	ldr	r2, [pc, #52]	@ (80022f0 <FLASH_MassErase+0x4c>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80022cc:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <FLASH_MassErase+0x4c>)
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	4a07      	ldr	r2, [pc, #28]	@ (80022f0 <FLASH_MassErase+0x4c>)
 80022d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022d6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80022d8:	4b05      	ldr	r3, [pc, #20]	@ (80022f0 <FLASH_MassErase+0x4c>)
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	4a04      	ldr	r2, [pc, #16]	@ (80022f0 <FLASH_MassErase+0x4c>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e2:	6153      	str	r3, [r2, #20]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40022000 	.word	0x40022000

080022f4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d006      	beq.n	8002316 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002308:	4b14      	ldr	r3, [pc, #80]	@ (800235c <FLASH_PageErase+0x68>)
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	4a13      	ldr	r2, [pc, #76]	@ (800235c <FLASH_PageErase+0x68>)
 800230e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002312:	6153      	str	r3, [r2, #20]
 8002314:	e005      	b.n	8002322 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002316:	4b11      	ldr	r3, [pc, #68]	@ (800235c <FLASH_PageErase+0x68>)
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	4a10      	ldr	r2, [pc, #64]	@ (800235c <FLASH_PageErase+0x68>)
 800231c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002320:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002322:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <FLASH_PageErase+0x68>)
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8002332:	490a      	ldr	r1, [pc, #40]	@ (800235c <FLASH_PageErase+0x68>)
 8002334:	4313      	orrs	r3, r2
 8002336:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002338:	4b08      	ldr	r3, [pc, #32]	@ (800235c <FLASH_PageErase+0x68>)
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	4a07      	ldr	r2, [pc, #28]	@ (800235c <FLASH_PageErase+0x68>)
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002344:	4b05      	ldr	r3, [pc, #20]	@ (800235c <FLASH_PageErase+0x68>)
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	4a04      	ldr	r2, [pc, #16]	@ (800235c <FLASH_PageErase+0x68>)
 800234a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800234e:	6153      	str	r3, [r2, #20]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	40022000 	.word	0x40022000

08002360 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002366:	4b21      	ldr	r3, [pc, #132]	@ (80023ec <FLASH_FlushCaches+0x8c>)
 8002368:	7f1b      	ldrb	r3, [r3, #28]
 800236a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d002      	beq.n	8002378 <FLASH_FlushCaches+0x18>
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d117      	bne.n	80023a8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002378:	4b1d      	ldr	r3, [pc, #116]	@ (80023f0 <FLASH_FlushCaches+0x90>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1c      	ldr	r2, [pc, #112]	@ (80023f0 <FLASH_FlushCaches+0x90>)
 800237e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002382:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002384:	4b1a      	ldr	r3, [pc, #104]	@ (80023f0 <FLASH_FlushCaches+0x90>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a19      	ldr	r2, [pc, #100]	@ (80023f0 <FLASH_FlushCaches+0x90>)
 800238a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b17      	ldr	r3, [pc, #92]	@ (80023f0 <FLASH_FlushCaches+0x90>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a16      	ldr	r2, [pc, #88]	@ (80023f0 <FLASH_FlushCaches+0x90>)
 8002396:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800239a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800239c:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <FLASH_FlushCaches+0x90>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a13      	ldr	r2, [pc, #76]	@ (80023f0 <FLASH_FlushCaches+0x90>)
 80023a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023a6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d002      	beq.n	80023b4 <FLASH_FlushCaches+0x54>
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d111      	bne.n	80023d8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80023b4:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <FLASH_FlushCaches+0x90>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <FLASH_FlushCaches+0x90>)
 80023ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <FLASH_FlushCaches+0x90>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <FLASH_FlushCaches+0x90>)
 80023c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023ca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80023cc:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <FLASH_FlushCaches+0x90>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a07      	ldr	r2, [pc, #28]	@ (80023f0 <FLASH_FlushCaches+0x90>)
 80023d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023d6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80023d8:	4b04      	ldr	r3, [pc, #16]	@ (80023ec <FLASH_FlushCaches+0x8c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	771a      	strb	r2, [r3, #28]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000018 	.word	0x20000018
 80023f0:	40022000 	.word	0x40022000

080023f4 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10b      	bne.n	800241e <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8002406:	4b1f      	ldr	r3, [pc, #124]	@ (8002484 <FLASH_OB_GetWRP+0x90>)
 8002408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240a:	b2da      	uxtb	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 8002410:	4b1c      	ldr	r3, [pc, #112]	@ (8002484 <FLASH_OB_GetWRP+0x90>)
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	b2da      	uxtb	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 800241c:	e02b      	b.n	8002476 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d10b      	bne.n	800243c <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8002424:	4b17      	ldr	r3, [pc, #92]	@ (8002484 <FLASH_OB_GetWRP+0x90>)
 8002426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002428:	b2da      	uxtb	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 800242e:	4b15      	ldr	r3, [pc, #84]	@ (8002484 <FLASH_OB_GetWRP+0x90>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	0c1b      	lsrs	r3, r3, #16
 8002434:	b2da      	uxtb	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	601a      	str	r2, [r3, #0]
}
 800243a:	e01c      	b.n	8002476 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d10b      	bne.n	800245a <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8002442:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <FLASH_OB_GetWRP+0x90>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002446:	b2da      	uxtb	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 800244c:	4b0d      	ldr	r3, [pc, #52]	@ (8002484 <FLASH_OB_GetWRP+0x90>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002450:	0c1b      	lsrs	r3, r3, #16
 8002452:	b2da      	uxtb	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	601a      	str	r2, [r3, #0]
}
 8002458:	e00d      	b.n	8002476 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b04      	cmp	r3, #4
 800245e:	d10a      	bne.n	8002476 <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8002460:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <FLASH_OB_GetWRP+0x90>)
 8002462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002464:	b2da      	uxtb	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <FLASH_OB_GetWRP+0x90>)
 800246c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800246e:	0c1b      	lsrs	r3, r3, #16
 8002470:	b2da      	uxtb	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	601a      	str	r2, [r3, #0]
}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40022000 	.word	0x40022000

08002488 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800248e:	4b0a      	ldr	r3, [pc, #40]	@ (80024b8 <FLASH_OB_GetRDP+0x30>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2baa      	cmp	r3, #170	@ 0xaa
 800249a:	d004      	beq.n	80024a6 <FLASH_OB_GetRDP+0x1e>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2bcc      	cmp	r3, #204	@ 0xcc
 80024a0:	d001      	beq.n	80024a6 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 80024a2:	23bb      	movs	r3, #187	@ 0xbb
 80024a4:	e002      	b.n	80024ac <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 80024a6:	4b04      	ldr	r3, [pc, #16]	@ (80024b8 <FLASH_OB_GetRDP+0x30>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	b2db      	uxtb	r3, r3
  }
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40022000 	.word	0x40022000

080024bc <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <FLASH_OB_GetUser+0x24>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024ce:	607b      	str	r3, [r7, #4]

  return user_config;
 80024d0:	687b      	ldr	r3, [r7, #4]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40022000 	.word	0x40022000

080024e4 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	@ 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 80024f0:	4b3b      	ldr	r3, [pc, #236]	@ (80025e0 <FLASH_OB_GetPCROP+0xfc>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d115      	bne.n	8002528 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 80024fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002500:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002502:	4b38      	ldr	r3, [pc, #224]	@ (80025e4 <FLASH_OB_GetPCROP+0x100>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800250c:	4293      	cmp	r3, r2
 800250e:	d008      	beq.n	8002522 <FLASH_OB_GetPCROP+0x3e>
 8002510:	4b34      	ldr	r3, [pc, #208]	@ (80025e4 <FLASH_OB_GetPCROP+0x100>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	029b      	lsls	r3, r3, #10
 8002516:	085a      	lsrs	r2, r3, #1
 8002518:	4b33      	ldr	r3, [pc, #204]	@ (80025e8 <FLASH_OB_GetPCROP+0x104>)
 800251a:	4013      	ands	r3, r2
 800251c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8002520:	e000      	b.n	8002524 <FLASH_OB_GetPCROP+0x40>
 8002522:	4b32      	ldr	r3, [pc, #200]	@ (80025ec <FLASH_OB_GetPCROP+0x108>)
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	e014      	b.n	8002552 <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002528:	4b2e      	ldr	r3, [pc, #184]	@ (80025e4 <FLASH_OB_GetPCROP+0x100>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002532:	4293      	cmp	r3, r2
 8002534:	d008      	beq.n	8002548 <FLASH_OB_GetPCROP+0x64>
 8002536:	4b2b      	ldr	r3, [pc, #172]	@ (80025e4 <FLASH_OB_GetPCROP+0x100>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	029b      	lsls	r3, r3, #10
 800253c:	085a      	lsrs	r2, r3, #1
 800253e:	4b2a      	ldr	r3, [pc, #168]	@ (80025e8 <FLASH_OB_GetPCROP+0x104>)
 8002540:	4013      	ands	r3, r2
 8002542:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8002546:	e000      	b.n	800254a <FLASH_OB_GetPCROP+0x66>
 8002548:	4b28      	ldr	r3, [pc, #160]	@ (80025ec <FLASH_OB_GetPCROP+0x108>)
 800254a:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 800254c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002550:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d115      	bne.n	800258a <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800255e:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <FLASH_OB_GetPCROP+0x10c>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	b29b      	uxth	r3, r3
 8002564:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	00da      	lsls	r2, r3, #3
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	441a      	add	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8002572:	4b1f      	ldr	r3, [pc, #124]	@ (80025f0 <FLASH_OB_GetPCROP+0x10c>)
 8002574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002576:	b29b      	uxth	r3, r3
 8002578:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	00da      	lsls	r2, r3, #3
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	1dda      	adds	r2, r3, #7
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e01a      	b.n	80025c0 <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d114      	bne.n	80025c0 <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8002596:	4b16      	ldr	r3, [pc, #88]	@ (80025f0 <FLASH_OB_GetPCROP+0x10c>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259a:	b29b      	uxth	r3, r3
 800259c:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	00da      	lsls	r2, r3, #3
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	441a      	add	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 80025aa:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <FLASH_OB_GetPCROP+0x10c>)
 80025ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	00da      	lsls	r2, r3, #3
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4413      	add	r3, r2
 80025ba:	1dda      	adds	r2, r3, #7
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 80025c0:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <FLASH_OB_GetPCROP+0x10c>)
 80025c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	601a      	str	r2, [r3, #0]
}
 80025d2:	bf00      	nop
 80025d4:	3724      	adds	r7, #36	@ 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40010000 	.word	0x40010000
 80025e4:	1fff75e0 	.word	0x1fff75e0
 80025e8:	01fffe00 	.word	0x01fffe00
 80025ec:	08080000 	.word	0x08080000
 80025f0:	40022000 	.word	0x40022000

080025f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002602:	e166      	b.n	80028d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2101      	movs	r1, #1
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	4013      	ands	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8158 	beq.w	80028cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d005      	beq.n	8002634 <HAL_GPIO_Init+0x40>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d130      	bne.n	8002696 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800266a:	2201      	movs	r2, #1
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f003 0201 	and.w	r2, r3, #1
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d017      	beq.n	80026d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	2203      	movs	r2, #3
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d123      	bne.n	8002726 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	08da      	lsrs	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3208      	adds	r2, #8
 80026e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	08da      	lsrs	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3208      	adds	r2, #8
 8002720:	6939      	ldr	r1, [r7, #16]
 8002722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2203      	movs	r2, #3
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0203 	and.w	r2, r3, #3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 80b2 	beq.w	80028cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002768:	4b61      	ldr	r3, [pc, #388]	@ (80028f0 <HAL_GPIO_Init+0x2fc>)
 800276a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800276c:	4a60      	ldr	r2, [pc, #384]	@ (80028f0 <HAL_GPIO_Init+0x2fc>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6613      	str	r3, [r2, #96]	@ 0x60
 8002774:	4b5e      	ldr	r3, [pc, #376]	@ (80028f0 <HAL_GPIO_Init+0x2fc>)
 8002776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002780:	4a5c      	ldr	r2, [pc, #368]	@ (80028f4 <HAL_GPIO_Init+0x300>)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	3302      	adds	r3, #2
 8002788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	220f      	movs	r2, #15
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027aa:	d02b      	beq.n	8002804 <HAL_GPIO_Init+0x210>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a52      	ldr	r2, [pc, #328]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d025      	beq.n	8002800 <HAL_GPIO_Init+0x20c>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a51      	ldr	r2, [pc, #324]	@ (80028fc <HAL_GPIO_Init+0x308>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d01f      	beq.n	80027fc <HAL_GPIO_Init+0x208>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a50      	ldr	r2, [pc, #320]	@ (8002900 <HAL_GPIO_Init+0x30c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d019      	beq.n	80027f8 <HAL_GPIO_Init+0x204>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a4f      	ldr	r2, [pc, #316]	@ (8002904 <HAL_GPIO_Init+0x310>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d013      	beq.n	80027f4 <HAL_GPIO_Init+0x200>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a4e      	ldr	r2, [pc, #312]	@ (8002908 <HAL_GPIO_Init+0x314>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00d      	beq.n	80027f0 <HAL_GPIO_Init+0x1fc>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a4d      	ldr	r2, [pc, #308]	@ (800290c <HAL_GPIO_Init+0x318>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d007      	beq.n	80027ec <HAL_GPIO_Init+0x1f8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a4c      	ldr	r2, [pc, #304]	@ (8002910 <HAL_GPIO_Init+0x31c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d101      	bne.n	80027e8 <HAL_GPIO_Init+0x1f4>
 80027e4:	2307      	movs	r3, #7
 80027e6:	e00e      	b.n	8002806 <HAL_GPIO_Init+0x212>
 80027e8:	2308      	movs	r3, #8
 80027ea:	e00c      	b.n	8002806 <HAL_GPIO_Init+0x212>
 80027ec:	2306      	movs	r3, #6
 80027ee:	e00a      	b.n	8002806 <HAL_GPIO_Init+0x212>
 80027f0:	2305      	movs	r3, #5
 80027f2:	e008      	b.n	8002806 <HAL_GPIO_Init+0x212>
 80027f4:	2304      	movs	r3, #4
 80027f6:	e006      	b.n	8002806 <HAL_GPIO_Init+0x212>
 80027f8:	2303      	movs	r3, #3
 80027fa:	e004      	b.n	8002806 <HAL_GPIO_Init+0x212>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e002      	b.n	8002806 <HAL_GPIO_Init+0x212>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_GPIO_Init+0x212>
 8002804:	2300      	movs	r3, #0
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	f002 0203 	and.w	r2, r2, #3
 800280c:	0092      	lsls	r2, r2, #2
 800280e:	4093      	lsls	r3, r2
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002816:	4937      	ldr	r1, [pc, #220]	@ (80028f4 <HAL_GPIO_Init+0x300>)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002824:	4b3b      	ldr	r3, [pc, #236]	@ (8002914 <HAL_GPIO_Init+0x320>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	43db      	mvns	r3, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002848:	4a32      	ldr	r2, [pc, #200]	@ (8002914 <HAL_GPIO_Init+0x320>)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800284e:	4b31      	ldr	r3, [pc, #196]	@ (8002914 <HAL_GPIO_Init+0x320>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002872:	4a28      	ldr	r2, [pc, #160]	@ (8002914 <HAL_GPIO_Init+0x320>)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002878:	4b26      	ldr	r3, [pc, #152]	@ (8002914 <HAL_GPIO_Init+0x320>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	43db      	mvns	r3, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800289c:	4a1d      	ldr	r2, [pc, #116]	@ (8002914 <HAL_GPIO_Init+0x320>)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002914 <HAL_GPIO_Init+0x320>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028c6:	4a13      	ldr	r2, [pc, #76]	@ (8002914 <HAL_GPIO_Init+0x320>)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	3301      	adds	r3, #1
 80028d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f47f ae91 	bne.w	8002604 <HAL_GPIO_Init+0x10>
  }
}
 80028e2:	bf00      	nop
 80028e4:	bf00      	nop
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40010000 	.word	0x40010000
 80028f8:	48000400 	.word	0x48000400
 80028fc:	48000800 	.word	0x48000800
 8002900:	48000c00 	.word	0x48000c00
 8002904:	48001000 	.word	0x48001000
 8002908:	48001400 	.word	0x48001400
 800290c:	48001800 	.word	0x48001800
 8002910:	48001c00 	.word	0x48001c00
 8002914:	40010400 	.word	0x40010400

08002918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	887b      	ldrh	r3, [r7, #2]
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	e001      	b.n	800293a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800293a:	7bfb      	ldrb	r3, [r7, #15]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]
 8002954:	4613      	mov	r3, r2
 8002956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002958:	787b      	ldrb	r3, [r7, #1]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800295e:	887a      	ldrh	r2, [r7, #2]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002964:	e002      	b.n	800296c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800297c:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <HAL_PWREx_GetVoltageRange+0x18>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40007000 	.word	0x40007000

08002994 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029a2:	d130      	bne.n	8002a06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029a4:	4b23      	ldr	r3, [pc, #140]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029b0:	d038      	beq.n	8002a24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029b2:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2232      	movs	r2, #50	@ 0x32
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	4a1b      	ldr	r2, [pc, #108]	@ (8002a3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0c9b      	lsrs	r3, r3, #18
 80029d4:	3301      	adds	r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029d8:	e002      	b.n	80029e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3b01      	subs	r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029e0:	4b14      	ldr	r3, [pc, #80]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ec:	d102      	bne.n	80029f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f2      	bne.n	80029da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a00:	d110      	bne.n	8002a24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e00f      	b.n	8002a26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a06:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a12:	d007      	beq.n	8002a24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a14:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a1c:	4a05      	ldr	r2, [pc, #20]	@ (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40007000 	.word	0x40007000
 8002a38:	2000000c 	.word	0x2000000c
 8002a3c:	431bde83 	.word	0x431bde83

08002a40 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002a44:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4a04      	ldr	r2, [pc, #16]	@ (8002a5c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002a4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a4e:	6053      	str	r3, [r2, #4]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40007000 	.word	0x40007000

08002a60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f000 bc08 	b.w	8003284 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a74:	4b96      	ldr	r3, [pc, #600]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 030c 	and.w	r3, r3, #12
 8002a7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a7e:	4b94      	ldr	r3, [pc, #592]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80e4 	beq.w	8002c5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <HAL_RCC_OscConfig+0x4c>
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2b0c      	cmp	r3, #12
 8002aa0:	f040 808b 	bne.w	8002bba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	f040 8087 	bne.w	8002bba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aac:	4b88      	ldr	r3, [pc, #544]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x64>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e3df      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1a      	ldr	r2, [r3, #32]
 8002ac8:	4b81      	ldr	r3, [pc, #516]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d004      	beq.n	8002ade <HAL_RCC_OscConfig+0x7e>
 8002ad4:	4b7e      	ldr	r3, [pc, #504]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002adc:	e005      	b.n	8002aea <HAL_RCC_OscConfig+0x8a>
 8002ade:	4b7c      	ldr	r3, [pc, #496]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d223      	bcs.n	8002b36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fd92 	bl	800361c <RCC_SetFlashLatencyFromMSIRange>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e3c0      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b02:	4b73      	ldr	r3, [pc, #460]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a72      	ldr	r2, [pc, #456]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b08:	f043 0308 	orr.w	r3, r3, #8
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b70      	ldr	r3, [pc, #448]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	496d      	ldr	r1, [pc, #436]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b20:	4b6b      	ldr	r3, [pc, #428]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	4968      	ldr	r1, [pc, #416]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
 8002b34:	e025      	b.n	8002b82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b36:	4b66      	ldr	r3, [pc, #408]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a65      	ldr	r2, [pc, #404]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b3c:	f043 0308 	orr.w	r3, r3, #8
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b63      	ldr	r3, [pc, #396]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	4960      	ldr	r1, [pc, #384]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b54:	4b5e      	ldr	r3, [pc, #376]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	495b      	ldr	r1, [pc, #364]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fd52 	bl	800361c <RCC_SetFlashLatencyFromMSIRange>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e380      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b82:	f000 fc87 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 8002b86:	4602      	mov	r2, r0
 8002b88:	4b51      	ldr	r3, [pc, #324]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	4950      	ldr	r1, [pc, #320]	@ (8002cd4 <HAL_RCC_OscConfig+0x274>)
 8002b94:	5ccb      	ldrb	r3, [r1, r3]
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9e:	4a4e      	ldr	r2, [pc, #312]	@ (8002cd8 <HAL_RCC_OscConfig+0x278>)
 8002ba0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ba2:	4b4e      	ldr	r3, [pc, #312]	@ (8002cdc <HAL_RCC_OscConfig+0x27c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fe00 	bl	80017ac <HAL_InitTick>
 8002bac:	4603      	mov	r3, r0
 8002bae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d052      	beq.n	8002c5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	e364      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d032      	beq.n	8002c28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bc2:	4b43      	ldr	r3, [pc, #268]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a42      	ldr	r2, [pc, #264]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bce:	f7fe fe3d 	bl	800184c <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bd6:	f7fe fe39 	bl	800184c <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e34d      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002be8:	4b39      	ldr	r3, [pc, #228]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bf4:	4b36      	ldr	r3, [pc, #216]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a35      	ldr	r2, [pc, #212]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	f043 0308 	orr.w	r3, r3, #8
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b33      	ldr	r3, [pc, #204]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	4930      	ldr	r1, [pc, #192]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c12:	4b2f      	ldr	r3, [pc, #188]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	492b      	ldr	r1, [pc, #172]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	604b      	str	r3, [r1, #4]
 8002c26:	e01a      	b.n	8002c5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c28:	4b29      	ldr	r3, [pc, #164]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a28      	ldr	r2, [pc, #160]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c34:	f7fe fe0a 	bl	800184c <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fe06 	bl	800184c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e31a      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c4e:	4b20      	ldr	r3, [pc, #128]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x1dc>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d073      	beq.n	8002d52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_OscConfig+0x21c>
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	d10e      	bne.n	8002c94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d10b      	bne.n	8002c94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	4b14      	ldr	r3, [pc, #80]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d063      	beq.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d15f      	bne.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e2f7      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c9c:	d106      	bne.n	8002cac <HAL_RCC_OscConfig+0x24c>
 8002c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e025      	b.n	8002cf8 <HAL_RCC_OscConfig+0x298>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cb4:	d114      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x280>
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a05      	ldr	r2, [pc, #20]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4b03      	ldr	r3, [pc, #12]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a02      	ldr	r2, [pc, #8]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e013      	b.n	8002cf8 <HAL_RCC_OscConfig+0x298>
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	08005c70 	.word	0x08005c70
 8002cd8:	2000000c 	.word	0x2000000c
 8002cdc:	20000010 	.word	0x20000010
 8002ce0:	4ba0      	ldr	r3, [pc, #640]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a9f      	ldr	r2, [pc, #636]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b9d      	ldr	r3, [pc, #628]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a9c      	ldr	r2, [pc, #624]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fda4 	bl	800184c <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fe fda0 	bl	800184c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	@ 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e2b4      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d1a:	4b92      	ldr	r3, [pc, #584]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x2a8>
 8002d26:	e014      	b.n	8002d52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe fd90 	bl	800184c <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d30:	f7fe fd8c 	bl	800184c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	@ 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e2a0      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d42:	4b88      	ldr	r3, [pc, #544]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x2d0>
 8002d4e:	e000      	b.n	8002d52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d060      	beq.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_OscConfig+0x310>
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b0c      	cmp	r3, #12
 8002d68:	d119      	bne.n	8002d9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d116      	bne.n	8002d9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d70:	4b7c      	ldr	r3, [pc, #496]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_OscConfig+0x328>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e27d      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b76      	ldr	r3, [pc, #472]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	4973      	ldr	r1, [pc, #460]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d9c:	e040      	b.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d023      	beq.n	8002dee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da6:	4b6f      	ldr	r3, [pc, #444]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a6e      	ldr	r2, [pc, #440]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe fd4b 	bl	800184c <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dba:	f7fe fd47 	bl	800184c <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e25b      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dcc:	4b65      	ldr	r3, [pc, #404]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd8:	4b62      	ldr	r3, [pc, #392]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	061b      	lsls	r3, r3, #24
 8002de6:	495f      	ldr	r1, [pc, #380]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
 8002dec:	e018      	b.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dee:	4b5d      	ldr	r3, [pc, #372]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a5c      	ldr	r2, [pc, #368]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fd27 	bl	800184c <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e02:	f7fe fd23 	bl	800184c <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e237      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e14:	4b53      	ldr	r3, [pc, #332]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d03c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01c      	beq.n	8002e6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e34:	4b4b      	ldr	r3, [pc, #300]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e3a:	4a4a      	ldr	r2, [pc, #296]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e44:	f7fe fd02 	bl	800184c <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4c:	f7fe fcfe 	bl	800184c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e212      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e5e:	4b41      	ldr	r3, [pc, #260]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0ef      	beq.n	8002e4c <HAL_RCC_OscConfig+0x3ec>
 8002e6c:	e01b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e74:	4a3b      	ldr	r2, [pc, #236]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7e:	f7fe fce5 	bl	800184c <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e86:	f7fe fce1 	bl	800184c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e1f5      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e98:	4b32      	ldr	r3, [pc, #200]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1ef      	bne.n	8002e86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 80a6 	beq.w	8003000 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec4:	4b27      	ldr	r3, [pc, #156]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec8:	4a26      	ldr	r2, [pc, #152]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed0:	4b24      	ldr	r3, [pc, #144]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002edc:	2301      	movs	r3, #1
 8002ede:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee0:	4b21      	ldr	r3, [pc, #132]	@ (8002f68 <HAL_RCC_OscConfig+0x508>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d118      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eec:	4b1e      	ldr	r3, [pc, #120]	@ (8002f68 <HAL_RCC_OscConfig+0x508>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f68 <HAL_RCC_OscConfig+0x508>)
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef8:	f7fe fca8 	bl	800184c <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f00:	f7fe fca4 	bl	800184c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e1b8      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f12:	4b15      	ldr	r3, [pc, #84]	@ (8002f68 <HAL_RCC_OscConfig+0x508>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d108      	bne.n	8002f38 <HAL_RCC_OscConfig+0x4d8>
 8002f26:	4b0f      	ldr	r3, [pc, #60]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f36:	e029      	b.n	8002f8c <HAL_RCC_OscConfig+0x52c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b05      	cmp	r3, #5
 8002f3e:	d115      	bne.n	8002f6c <HAL_RCC_OscConfig+0x50c>
 8002f40:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f46:	4a07      	ldr	r2, [pc, #28]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002f48:	f043 0304 	orr.w	r3, r3, #4
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f50:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f56:	4a03      	ldr	r2, [pc, #12]	@ (8002f64 <HAL_RCC_OscConfig+0x504>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f60:	e014      	b.n	8002f8c <HAL_RCC_OscConfig+0x52c>
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	4b9d      	ldr	r3, [pc, #628]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f72:	4a9c      	ldr	r2, [pc, #624]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f7c:	4b99      	ldr	r3, [pc, #612]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f82:	4a98      	ldr	r2, [pc, #608]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d016      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7fe fc5a 	bl	800184c <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9a:	e00a      	b.n	8002fb2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f7fe fc56 	bl	800184c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e168      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb2:	4b8c      	ldr	r3, [pc, #560]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ed      	beq.n	8002f9c <HAL_RCC_OscConfig+0x53c>
 8002fc0:	e015      	b.n	8002fee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc2:	f7fe fc43 	bl	800184c <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fe fc3f 	bl	800184c <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e151      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fe0:	4b80      	ldr	r3, [pc, #512]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1ed      	bne.n	8002fca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fee:	7ffb      	ldrb	r3, [r7, #31]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d105      	bne.n	8003000 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff4:	4b7b      	ldr	r3, [pc, #492]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	4a7a      	ldr	r2, [pc, #488]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 8002ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ffe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d03c      	beq.n	8003086 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01c      	beq.n	800304e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003014:	4b73      	ldr	r3, [pc, #460]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 8003016:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800301a:	4a72      	ldr	r2, [pc, #456]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003024:	f7fe fc12 	bl	800184c <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800302c:	f7fe fc0e 	bl	800184c <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e122      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800303e:	4b69      	ldr	r3, [pc, #420]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 8003040:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ef      	beq.n	800302c <HAL_RCC_OscConfig+0x5cc>
 800304c:	e01b      	b.n	8003086 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800304e:	4b65      	ldr	r3, [pc, #404]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 8003050:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003054:	4a63      	ldr	r2, [pc, #396]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305e:	f7fe fbf5 	bl	800184c <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003066:	f7fe fbf1 	bl	800184c <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e105      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003078:	4b5a      	ldr	r3, [pc, #360]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 800307a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1ef      	bne.n	8003066 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80f9 	beq.w	8003282 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003094:	2b02      	cmp	r3, #2
 8003096:	f040 80cf 	bne.w	8003238 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800309a:	4b52      	ldr	r3, [pc, #328]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f003 0203 	and.w	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d12c      	bne.n	8003108 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b8:	3b01      	subs	r3, #1
 80030ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d123      	bne.n	8003108 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d11b      	bne.n	8003108 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d113      	bne.n	8003108 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	3b01      	subs	r3, #1
 80030ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d109      	bne.n	8003108 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	085b      	lsrs	r3, r3, #1
 8003100:	3b01      	subs	r3, #1
 8003102:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d071      	beq.n	80031ec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d068      	beq.n	80031e0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800310e:	4b35      	ldr	r3, [pc, #212]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800311a:	4b32      	ldr	r3, [pc, #200]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0ac      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800312a:	4b2e      	ldr	r3, [pc, #184]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a2d      	ldr	r2, [pc, #180]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 8003130:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003134:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003136:	f7fe fb89 	bl	800184c <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313e:	f7fe fb85 	bl	800184c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e099      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003150:	4b24      	ldr	r3, [pc, #144]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f0      	bne.n	800313e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800315c:	4b21      	ldr	r3, [pc, #132]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	4b21      	ldr	r3, [pc, #132]	@ (80031e8 <HAL_RCC_OscConfig+0x788>)
 8003162:	4013      	ands	r3, r2
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800316c:	3a01      	subs	r2, #1
 800316e:	0112      	lsls	r2, r2, #4
 8003170:	4311      	orrs	r1, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003176:	0212      	lsls	r2, r2, #8
 8003178:	4311      	orrs	r1, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800317e:	0852      	lsrs	r2, r2, #1
 8003180:	3a01      	subs	r2, #1
 8003182:	0552      	lsls	r2, r2, #21
 8003184:	4311      	orrs	r1, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800318a:	0852      	lsrs	r2, r2, #1
 800318c:	3a01      	subs	r2, #1
 800318e:	0652      	lsls	r2, r2, #25
 8003190:	4311      	orrs	r1, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003196:	06d2      	lsls	r2, r2, #27
 8003198:	430a      	orrs	r2, r1
 800319a:	4912      	ldr	r1, [pc, #72]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 800319c:	4313      	orrs	r3, r2
 800319e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031a0:	4b10      	ldr	r3, [pc, #64]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0f      	ldr	r2, [pc, #60]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 80031a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031ac:	4b0d      	ldr	r3, [pc, #52]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4a0c      	ldr	r2, [pc, #48]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 80031b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031b8:	f7fe fb48 	bl	800184c <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c0:	f7fe fb44 	bl	800184c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e058      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d2:	4b04      	ldr	r3, [pc, #16]	@ (80031e4 <HAL_RCC_OscConfig+0x784>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031de:	e050      	b.n	8003282 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e04f      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
 80031e4:	40021000 	.word	0x40021000
 80031e8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ec:	4b27      	ldr	r3, [pc, #156]	@ (800328c <HAL_RCC_OscConfig+0x82c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d144      	bne.n	8003282 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031f8:	4b24      	ldr	r3, [pc, #144]	@ (800328c <HAL_RCC_OscConfig+0x82c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a23      	ldr	r2, [pc, #140]	@ (800328c <HAL_RCC_OscConfig+0x82c>)
 80031fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003202:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003204:	4b21      	ldr	r3, [pc, #132]	@ (800328c <HAL_RCC_OscConfig+0x82c>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a20      	ldr	r2, [pc, #128]	@ (800328c <HAL_RCC_OscConfig+0x82c>)
 800320a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800320e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003210:	f7fe fb1c 	bl	800184c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003218:	f7fe fb18 	bl	800184c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e02c      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800322a:	4b18      	ldr	r3, [pc, #96]	@ (800328c <HAL_RCC_OscConfig+0x82c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x7b8>
 8003236:	e024      	b.n	8003282 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b0c      	cmp	r3, #12
 800323c:	d01f      	beq.n	800327e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323e:	4b13      	ldr	r3, [pc, #76]	@ (800328c <HAL_RCC_OscConfig+0x82c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a12      	ldr	r2, [pc, #72]	@ (800328c <HAL_RCC_OscConfig+0x82c>)
 8003244:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7fe faff 	bl	800184c <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003252:	f7fe fafb 	bl	800184c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e00f      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003264:	4b09      	ldr	r3, [pc, #36]	@ (800328c <HAL_RCC_OscConfig+0x82c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f0      	bne.n	8003252 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003270:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_RCC_OscConfig+0x82c>)
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	4905      	ldr	r1, [pc, #20]	@ (800328c <HAL_RCC_OscConfig+0x82c>)
 8003276:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <HAL_RCC_OscConfig+0x830>)
 8003278:	4013      	ands	r3, r2
 800327a:	60cb      	str	r3, [r1, #12]
 800327c:	e001      	b.n	8003282 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3720      	adds	r7, #32
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40021000 	.word	0x40021000
 8003290:	feeefffc 	.word	0xfeeefffc

08003294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0e7      	b.n	8003478 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032a8:	4b75      	ldr	r3, [pc, #468]	@ (8003480 <HAL_RCC_ClockConfig+0x1ec>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d910      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b72      	ldr	r3, [pc, #456]	@ (8003480 <HAL_RCC_ClockConfig+0x1ec>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 0207 	bic.w	r2, r3, #7
 80032be:	4970      	ldr	r1, [pc, #448]	@ (8003480 <HAL_RCC_ClockConfig+0x1ec>)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b6e      	ldr	r3, [pc, #440]	@ (8003480 <HAL_RCC_ClockConfig+0x1ec>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0cf      	b.n	8003478 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d010      	beq.n	8003306 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	4b66      	ldr	r3, [pc, #408]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d908      	bls.n	8003306 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f4:	4b63      	ldr	r3, [pc, #396]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4960      	ldr	r1, [pc, #384]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d04c      	beq.n	80033ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b03      	cmp	r3, #3
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800331a:	4b5a      	ldr	r3, [pc, #360]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d121      	bne.n	800336a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e0a6      	b.n	8003478 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003332:	4b54      	ldr	r3, [pc, #336]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d115      	bne.n	800336a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e09a      	b.n	8003478 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d107      	bne.n	800335a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800334a:	4b4e      	ldr	r3, [pc, #312]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e08e      	b.n	8003478 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800335a:	4b4a      	ldr	r3, [pc, #296]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e086      	b.n	8003478 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800336a:	4b46      	ldr	r3, [pc, #280]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f023 0203 	bic.w	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4943      	ldr	r1, [pc, #268]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 8003378:	4313      	orrs	r3, r2
 800337a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337c:	f7fe fa66 	bl	800184c <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	e00a      	b.n	800339a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003384:	f7fe fa62 	bl	800184c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e06e      	b.n	8003478 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339a:	4b3a      	ldr	r3, [pc, #232]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 020c 	and.w	r2, r3, #12
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d1eb      	bne.n	8003384 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d010      	beq.n	80033da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	4b31      	ldr	r3, [pc, #196]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d208      	bcs.n	80033da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	492b      	ldr	r1, [pc, #172]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033da:	4b29      	ldr	r3, [pc, #164]	@ (8003480 <HAL_RCC_ClockConfig+0x1ec>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d210      	bcs.n	800340a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e8:	4b25      	ldr	r3, [pc, #148]	@ (8003480 <HAL_RCC_ClockConfig+0x1ec>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f023 0207 	bic.w	r2, r3, #7
 80033f0:	4923      	ldr	r1, [pc, #140]	@ (8003480 <HAL_RCC_ClockConfig+0x1ec>)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f8:	4b21      	ldr	r3, [pc, #132]	@ (8003480 <HAL_RCC_ClockConfig+0x1ec>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d001      	beq.n	800340a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e036      	b.n	8003478 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003416:	4b1b      	ldr	r3, [pc, #108]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	4918      	ldr	r1, [pc, #96]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 8003424:	4313      	orrs	r3, r2
 8003426:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003434:	4b13      	ldr	r3, [pc, #76]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4910      	ldr	r1, [pc, #64]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 8003444:	4313      	orrs	r3, r2
 8003446:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003448:	f000 f824 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b0d      	ldr	r3, [pc, #52]	@ (8003484 <HAL_RCC_ClockConfig+0x1f0>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	490b      	ldr	r1, [pc, #44]	@ (8003488 <HAL_RCC_ClockConfig+0x1f4>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
 8003464:	4a09      	ldr	r2, [pc, #36]	@ (800348c <HAL_RCC_ClockConfig+0x1f8>)
 8003466:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003468:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <HAL_RCC_ClockConfig+0x1fc>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe f99d 	bl	80017ac <HAL_InitTick>
 8003472:	4603      	mov	r3, r0
 8003474:	72fb      	strb	r3, [r7, #11]

  return status;
 8003476:	7afb      	ldrb	r3, [r7, #11]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40022000 	.word	0x40022000
 8003484:	40021000 	.word	0x40021000
 8003488:	08005c70 	.word	0x08005c70
 800348c:	2000000c 	.word	0x2000000c
 8003490:	20000010 	.word	0x20000010

08003494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	b089      	sub	sp, #36	@ 0x24
 8003498:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034a2:	4b3e      	ldr	r3, [pc, #248]	@ (800359c <HAL_RCC_GetSysClockFreq+0x108>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034ac:	4b3b      	ldr	r3, [pc, #236]	@ (800359c <HAL_RCC_GetSysClockFreq+0x108>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x34>
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	2b0c      	cmp	r3, #12
 80034c0:	d121      	bne.n	8003506 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d11e      	bne.n	8003506 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034c8:	4b34      	ldr	r3, [pc, #208]	@ (800359c <HAL_RCC_GetSysClockFreq+0x108>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034d4:	4b31      	ldr	r3, [pc, #196]	@ (800359c <HAL_RCC_GetSysClockFreq+0x108>)
 80034d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	e005      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034e4:	4b2d      	ldr	r3, [pc, #180]	@ (800359c <HAL_RCC_GetSysClockFreq+0x108>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	091b      	lsrs	r3, r3, #4
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034f0:	4a2b      	ldr	r2, [pc, #172]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10d      	bne.n	800351c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003504:	e00a      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2b04      	cmp	r3, #4
 800350a:	d102      	bne.n	8003512 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800350c:	4b25      	ldr	r3, [pc, #148]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	e004      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b08      	cmp	r3, #8
 8003516:	d101      	bne.n	800351c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003518:	4b23      	ldr	r3, [pc, #140]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800351a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2b0c      	cmp	r3, #12
 8003520:	d134      	bne.n	800358c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003522:	4b1e      	ldr	r3, [pc, #120]	@ (800359c <HAL_RCC_GetSysClockFreq+0x108>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d003      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0xa6>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b03      	cmp	r3, #3
 8003536:	d003      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0xac>
 8003538:	e005      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800353a:	4b1a      	ldr	r3, [pc, #104]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800353c:	617b      	str	r3, [r7, #20]
      break;
 800353e:	e005      	b.n	800354c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003540:	4b19      	ldr	r3, [pc, #100]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003542:	617b      	str	r3, [r7, #20]
      break;
 8003544:	e002      	b.n	800354c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	617b      	str	r3, [r7, #20]
      break;
 800354a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800354c:	4b13      	ldr	r3, [pc, #76]	@ (800359c <HAL_RCC_GetSysClockFreq+0x108>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	3301      	adds	r3, #1
 8003558:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800355a:	4b10      	ldr	r3, [pc, #64]	@ (800359c <HAL_RCC_GetSysClockFreq+0x108>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	0a1b      	lsrs	r3, r3, #8
 8003560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	fb03 f202 	mul.w	r2, r3, r2
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003570:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003572:	4b0a      	ldr	r3, [pc, #40]	@ (800359c <HAL_RCC_GetSysClockFreq+0x108>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	0e5b      	lsrs	r3, r3, #25
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	3301      	adds	r3, #1
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800358c:	69bb      	ldr	r3, [r7, #24]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3724      	adds	r7, #36	@ 0x24
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	08005c88 	.word	0x08005c88
 80035a4:	00f42400 	.word	0x00f42400
 80035a8:	007a1200 	.word	0x007a1200

080035ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b0:	4b03      	ldr	r3, [pc, #12]	@ (80035c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035b2:	681b      	ldr	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	2000000c 	.word	0x2000000c

080035c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035c8:	f7ff fff0 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b06      	ldr	r3, [pc, #24]	@ (80035e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4904      	ldr	r1, [pc, #16]	@ (80035ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40021000 	.word	0x40021000
 80035ec:	08005c80 	.word	0x08005c80

080035f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035f4:	f7ff ffda 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	0adb      	lsrs	r3, r3, #11
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4904      	ldr	r1, [pc, #16]	@ (8003618 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	08005c80 	.word	0x08005c80

0800361c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003624:	2300      	movs	r3, #0
 8003626:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003628:	4b2a      	ldr	r3, [pc, #168]	@ (80036d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800362a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003634:	f7ff f9a0 	bl	8002978 <HAL_PWREx_GetVoltageRange>
 8003638:	6178      	str	r0, [r7, #20]
 800363a:	e014      	b.n	8003666 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800363c:	4b25      	ldr	r3, [pc, #148]	@ (80036d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003640:	4a24      	ldr	r2, [pc, #144]	@ (80036d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003646:	6593      	str	r3, [r2, #88]	@ 0x58
 8003648:	4b22      	ldr	r3, [pc, #136]	@ (80036d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800364a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003654:	f7ff f990 	bl	8002978 <HAL_PWREx_GetVoltageRange>
 8003658:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800365a:	4b1e      	ldr	r3, [pc, #120]	@ (80036d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800365c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365e:	4a1d      	ldr	r2, [pc, #116]	@ (80036d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003660:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003664:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800366c:	d10b      	bne.n	8003686 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b80      	cmp	r3, #128	@ 0x80
 8003672:	d919      	bls.n	80036a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2ba0      	cmp	r3, #160	@ 0xa0
 8003678:	d902      	bls.n	8003680 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800367a:	2302      	movs	r3, #2
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	e013      	b.n	80036a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003680:	2301      	movs	r3, #1
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	e010      	b.n	80036a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b80      	cmp	r3, #128	@ 0x80
 800368a:	d902      	bls.n	8003692 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800368c:	2303      	movs	r3, #3
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	e00a      	b.n	80036a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b80      	cmp	r3, #128	@ 0x80
 8003696:	d102      	bne.n	800369e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003698:	2302      	movs	r3, #2
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	e004      	b.n	80036a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b70      	cmp	r3, #112	@ 0x70
 80036a2:	d101      	bne.n	80036a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036a4:	2301      	movs	r3, #1
 80036a6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036a8:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 0207 	bic.w	r2, r3, #7
 80036b0:	4909      	ldr	r1, [pc, #36]	@ (80036d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036b8:	4b07      	ldr	r3, [pc, #28]	@ (80036d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d001      	beq.n	80036ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40022000 	.word	0x40022000

080036dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036e4:	2300      	movs	r3, #0
 80036e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036e8:	2300      	movs	r3, #0
 80036ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d041      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003700:	d02a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003702:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003706:	d824      	bhi.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003708:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800370c:	d008      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800370e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003712:	d81e      	bhi.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003718:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800371c:	d010      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800371e:	e018      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003720:	4b86      	ldr	r3, [pc, #536]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4a85      	ldr	r2, [pc, #532]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800372a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800372c:	e015      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3304      	adds	r3, #4
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f000 facd 	bl	8003cd4 <RCCEx_PLLSAI1_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800373e:	e00c      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3320      	adds	r3, #32
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fbb6 	bl	8003eb8 <RCCEx_PLLSAI2_Config>
 800374c:	4603      	mov	r3, r0
 800374e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003750:	e003      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	74fb      	strb	r3, [r7, #19]
      break;
 8003756:	e000      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10b      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003760:	4b76      	ldr	r3, [pc, #472]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003766:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800376e:	4973      	ldr	r1, [pc, #460]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003776:	e001      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d041      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800378c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003790:	d02a      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003792:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003796:	d824      	bhi.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003798:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800379c:	d008      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800379e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037a2:	d81e      	bhi.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80037a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037ac:	d010      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037ae:	e018      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037b0:	4b62      	ldr	r3, [pc, #392]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4a61      	ldr	r2, [pc, #388]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037bc:	e015      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3304      	adds	r3, #4
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fa85 	bl	8003cd4 <RCCEx_PLLSAI1_Config>
 80037ca:	4603      	mov	r3, r0
 80037cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037ce:	e00c      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3320      	adds	r3, #32
 80037d4:	2100      	movs	r1, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fb6e 	bl	8003eb8 <RCCEx_PLLSAI2_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037e0:	e003      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	74fb      	strb	r3, [r7, #19]
      break;
 80037e6:	e000      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ea:	7cfb      	ldrb	r3, [r7, #19]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10b      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037f0:	4b52      	ldr	r3, [pc, #328]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037fe:	494f      	ldr	r1, [pc, #316]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003806:	e001      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80a0 	beq.w	800395a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800381e:	4b47      	ldr	r3, [pc, #284]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00d      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003834:	4b41      	ldr	r3, [pc, #260]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003838:	4a40      	ldr	r2, [pc, #256]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800383e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003840:	4b3e      	ldr	r3, [pc, #248]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384c:	2301      	movs	r3, #1
 800384e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003850:	4b3b      	ldr	r3, [pc, #236]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a3a      	ldr	r2, [pc, #232]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800385a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800385c:	f7fd fff6 	bl	800184c <HAL_GetTick>
 8003860:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003862:	e009      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003864:	f7fd fff2 	bl	800184c <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d902      	bls.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	74fb      	strb	r3, [r7, #19]
        break;
 8003876:	e005      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003878:	4b31      	ldr	r3, [pc, #196]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ef      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d15c      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800388a:	4b2c      	ldr	r3, [pc, #176]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003890:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003894:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d01f      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d019      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038a8:	4b24      	ldr	r3, [pc, #144]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038b4:	4b21      	ldr	r3, [pc, #132]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ba:	4a20      	ldr	r2, [pc, #128]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038c4:	4b1d      	ldr	r3, [pc, #116]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ca:	4a1c      	ldr	r2, [pc, #112]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038d4:	4a19      	ldr	r2, [pc, #100]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d016      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7fd ffb1 	bl	800184c <HAL_GetTick>
 80038ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ec:	e00b      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ee:	f7fd ffad 	bl	800184c <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d902      	bls.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	74fb      	strb	r3, [r7, #19]
            break;
 8003904:	e006      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003906:	4b0d      	ldr	r3, [pc, #52]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ec      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10c      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800391a:	4b08      	ldr	r3, [pc, #32]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003920:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392a:	4904      	ldr	r1, [pc, #16]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003932:	e009      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003934:	7cfb      	ldrb	r3, [r7, #19]
 8003936:	74bb      	strb	r3, [r7, #18]
 8003938:	e006      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000
 8003940:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003948:	7c7b      	ldrb	r3, [r7, #17]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d105      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800394e:	4ba6      	ldr	r3, [pc, #664]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003952:	4aa5      	ldr	r2, [pc, #660]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003954:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003958:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003966:	4ba0      	ldr	r3, [pc, #640]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396c:	f023 0203 	bic.w	r2, r3, #3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003974:	499c      	ldr	r1, [pc, #624]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003988:	4b97      	ldr	r3, [pc, #604]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398e:	f023 020c 	bic.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003996:	4994      	ldr	r1, [pc, #592]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039aa:	4b8f      	ldr	r3, [pc, #572]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	498b      	ldr	r1, [pc, #556]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039cc:	4b86      	ldr	r3, [pc, #536]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	4983      	ldr	r1, [pc, #524]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ee:	4b7e      	ldr	r3, [pc, #504]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fc:	497a      	ldr	r1, [pc, #488]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a10:	4b75      	ldr	r3, [pc, #468]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a16:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1e:	4972      	ldr	r1, [pc, #456]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a32:	4b6d      	ldr	r3, [pc, #436]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a38:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a40:	4969      	ldr	r1, [pc, #420]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a54:	4b64      	ldr	r3, [pc, #400]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a62:	4961      	ldr	r1, [pc, #388]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a76:	4b5c      	ldr	r3, [pc, #368]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a84:	4958      	ldr	r1, [pc, #352]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a98:	4b53      	ldr	r3, [pc, #332]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa6:	4950      	ldr	r1, [pc, #320]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aba:	4b4b      	ldr	r3, [pc, #300]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac8:	4947      	ldr	r1, [pc, #284]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003adc:	4b42      	ldr	r3, [pc, #264]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ae2:	f023 0203 	bic.w	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aea:	493f      	ldr	r1, [pc, #252]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d028      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003afe:	4b3a      	ldr	r3, [pc, #232]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b04:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0c:	4936      	ldr	r1, [pc, #216]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b1c:	d106      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b1e:	4b32      	ldr	r3, [pc, #200]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	4a31      	ldr	r2, [pc, #196]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b28:	60d3      	str	r3, [r2, #12]
 8003b2a:	e011      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 f8c9 	bl	8003cd4 <RCCEx_PLLSAI1_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b46:	7cfb      	ldrb	r3, [r7, #19]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003b4c:	7cfb      	ldrb	r3, [r7, #19]
 8003b4e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d028      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b5c:	4b22      	ldr	r3, [pc, #136]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b6a:	491f      	ldr	r1, [pc, #124]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b7a:	d106      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4a19      	ldr	r2, [pc, #100]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b86:	60d3      	str	r3, [r2, #12]
 8003b88:	e011      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b92:	d10c      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f89a 	bl	8003cd4 <RCCEx_PLLSAI1_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ba4:	7cfb      	ldrb	r3, [r7, #19]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003baa:	7cfb      	ldrb	r3, [r7, #19]
 8003bac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d02a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bba:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bc8:	4907      	ldr	r1, [pc, #28]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bd8:	d108      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bda:	4b03      	ldr	r3, [pc, #12]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4a02      	ldr	r2, [pc, #8]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003be0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003be4:	60d3      	str	r3, [r2, #12]
 8003be6:	e013      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003be8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 f869 	bl	8003cd4 <RCCEx_PLLSAI1_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c06:	7cfb      	ldrb	r3, [r7, #19]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d02f      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c22:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c2a:	4929      	ldr	r1, [pc, #164]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c3a:	d10d      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	2102      	movs	r1, #2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 f846 	bl	8003cd4 <RCCEx_PLLSAI1_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c4c:	7cfb      	ldrb	r3, [r7, #19]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d014      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003c52:	7cfb      	ldrb	r3, [r7, #19]
 8003c54:	74bb      	strb	r3, [r7, #18]
 8003c56:	e011      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c60:	d10c      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3320      	adds	r3, #32
 8003c66:	2102      	movs	r1, #2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 f925 	bl	8003eb8 <RCCEx_PLLSAI2_Config>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c72:	7cfb      	ldrb	r3, [r7, #19]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003c78:	7cfb      	ldrb	r3, [r7, #19]
 8003c7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00b      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c88:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c98:	490d      	ldr	r1, [pc, #52]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00b      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cac:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cbc:	4904      	ldr	r1, [pc, #16]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40021000 	.word	0x40021000

08003cd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ce2:	4b74      	ldr	r3, [pc, #464]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d018      	beq.n	8003d20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cee:	4b71      	ldr	r3, [pc, #452]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f003 0203 	and.w	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d10d      	bne.n	8003d1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
       ||
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d06:	4b6b      	ldr	r3, [pc, #428]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
       ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d047      	beq.n	8003daa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	73fb      	strb	r3, [r7, #15]
 8003d1e:	e044      	b.n	8003daa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d018      	beq.n	8003d5a <RCCEx_PLLSAI1_Config+0x86>
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d825      	bhi.n	8003d78 <RCCEx_PLLSAI1_Config+0xa4>
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d002      	beq.n	8003d36 <RCCEx_PLLSAI1_Config+0x62>
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d009      	beq.n	8003d48 <RCCEx_PLLSAI1_Config+0x74>
 8003d34:	e020      	b.n	8003d78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d36:	4b5f      	ldr	r3, [pc, #380]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d11d      	bne.n	8003d7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d46:	e01a      	b.n	8003d7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d48:	4b5a      	ldr	r3, [pc, #360]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d116      	bne.n	8003d82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d58:	e013      	b.n	8003d82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d5a:	4b56      	ldr	r3, [pc, #344]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10f      	bne.n	8003d86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d66:	4b53      	ldr	r3, [pc, #332]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d76:	e006      	b.n	8003d86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d7c:	e004      	b.n	8003d88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d7e:	bf00      	nop
 8003d80:	e002      	b.n	8003d88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d82:	bf00      	nop
 8003d84:	e000      	b.n	8003d88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10d      	bne.n	8003daa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d8e:	4b49      	ldr	r3, [pc, #292]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6819      	ldr	r1, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	430b      	orrs	r3, r1
 8003da4:	4943      	ldr	r1, [pc, #268]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d17c      	bne.n	8003eaa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003db0:	4b40      	ldr	r3, [pc, #256]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a3f      	ldr	r2, [pc, #252]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003dba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dbc:	f7fd fd46 	bl	800184c <HAL_GetTick>
 8003dc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dc2:	e009      	b.n	8003dd8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dc4:	f7fd fd42 	bl	800184c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d902      	bls.n	8003dd8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	73fb      	strb	r3, [r7, #15]
        break;
 8003dd6:	e005      	b.n	8003de4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dd8:	4b36      	ldr	r3, [pc, #216]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1ef      	bne.n	8003dc4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d15f      	bne.n	8003eaa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d110      	bne.n	8003e12 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003df0:	4b30      	ldr	r3, [pc, #192]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003df8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6892      	ldr	r2, [r2, #8]
 8003e00:	0211      	lsls	r1, r2, #8
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68d2      	ldr	r2, [r2, #12]
 8003e06:	06d2      	lsls	r2, r2, #27
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	492a      	ldr	r1, [pc, #168]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	610b      	str	r3, [r1, #16]
 8003e10:	e027      	b.n	8003e62 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d112      	bne.n	8003e3e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e18:	4b26      	ldr	r3, [pc, #152]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003e20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6892      	ldr	r2, [r2, #8]
 8003e28:	0211      	lsls	r1, r2, #8
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6912      	ldr	r2, [r2, #16]
 8003e2e:	0852      	lsrs	r2, r2, #1
 8003e30:	3a01      	subs	r2, #1
 8003e32:	0552      	lsls	r2, r2, #21
 8003e34:	430a      	orrs	r2, r1
 8003e36:	491f      	ldr	r1, [pc, #124]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	610b      	str	r3, [r1, #16]
 8003e3c:	e011      	b.n	8003e62 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003e46:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6892      	ldr	r2, [r2, #8]
 8003e4e:	0211      	lsls	r1, r2, #8
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6952      	ldr	r2, [r2, #20]
 8003e54:	0852      	lsrs	r2, r2, #1
 8003e56:	3a01      	subs	r2, #1
 8003e58:	0652      	lsls	r2, r2, #25
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	4915      	ldr	r1, [pc, #84]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e62:	4b14      	ldr	r3, [pc, #80]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a13      	ldr	r2, [pc, #76]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7fd fced 	bl	800184c <HAL_GetTick>
 8003e72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e74:	e009      	b.n	8003e8a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e76:	f7fd fce9 	bl	800184c <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d902      	bls.n	8003e8a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	73fb      	strb	r3, [r7, #15]
          break;
 8003e88:	e005      	b.n	8003e96 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0ef      	beq.n	8003e76 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e9c:	4b05      	ldr	r3, [pc, #20]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	4903      	ldr	r1, [pc, #12]	@ (8003eb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40021000 	.word	0x40021000

08003eb8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ec6:	4b69      	ldr	r3, [pc, #420]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d018      	beq.n	8003f04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ed2:	4b66      	ldr	r3, [pc, #408]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0203 	and.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d10d      	bne.n	8003efe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003eea:	4b60      	ldr	r3, [pc, #384]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	091b      	lsrs	r3, r3, #4
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
       ||
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d047      	beq.n	8003f8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
 8003f02:	e044      	b.n	8003f8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d018      	beq.n	8003f3e <RCCEx_PLLSAI2_Config+0x86>
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d825      	bhi.n	8003f5c <RCCEx_PLLSAI2_Config+0xa4>
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d002      	beq.n	8003f1a <RCCEx_PLLSAI2_Config+0x62>
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d009      	beq.n	8003f2c <RCCEx_PLLSAI2_Config+0x74>
 8003f18:	e020      	b.n	8003f5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f1a:	4b54      	ldr	r3, [pc, #336]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d11d      	bne.n	8003f62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f2a:	e01a      	b.n	8003f62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f2c:	4b4f      	ldr	r3, [pc, #316]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d116      	bne.n	8003f66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f3c:	e013      	b.n	8003f66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f3e:	4b4b      	ldr	r3, [pc, #300]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10f      	bne.n	8003f6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f4a:	4b48      	ldr	r3, [pc, #288]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f5a:	e006      	b.n	8003f6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f60:	e004      	b.n	8003f6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f62:	bf00      	nop
 8003f64:	e002      	b.n	8003f6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f66:	bf00      	nop
 8003f68:	e000      	b.n	8003f6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10d      	bne.n	8003f8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f72:	4b3e      	ldr	r3, [pc, #248]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	430b      	orrs	r3, r1
 8003f88:	4938      	ldr	r1, [pc, #224]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d166      	bne.n	8004062 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f94:	4b35      	ldr	r3, [pc, #212]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a34      	ldr	r2, [pc, #208]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa0:	f7fd fc54 	bl	800184c <HAL_GetTick>
 8003fa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fa6:	e009      	b.n	8003fbc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fa8:	f7fd fc50 	bl	800184c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d902      	bls.n	8003fbc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	73fb      	strb	r3, [r7, #15]
        break;
 8003fba:	e005      	b.n	8003fc8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1ef      	bne.n	8003fa8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d149      	bne.n	8004062 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d110      	bne.n	8003ff6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fd4:	4b25      	ldr	r3, [pc, #148]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003fdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6892      	ldr	r2, [r2, #8]
 8003fe4:	0211      	lsls	r1, r2, #8
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68d2      	ldr	r2, [r2, #12]
 8003fea:	06d2      	lsls	r2, r2, #27
 8003fec:	430a      	orrs	r2, r1
 8003fee:	491f      	ldr	r1, [pc, #124]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	614b      	str	r3, [r1, #20]
 8003ff4:	e011      	b.n	800401a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ffe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6892      	ldr	r2, [r2, #8]
 8004006:	0211      	lsls	r1, r2, #8
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6912      	ldr	r2, [r2, #16]
 800400c:	0852      	lsrs	r2, r2, #1
 800400e:	3a01      	subs	r2, #1
 8004010:	0652      	lsls	r2, r2, #25
 8004012:	430a      	orrs	r2, r1
 8004014:	4915      	ldr	r1, [pc, #84]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800401a:	4b14      	ldr	r3, [pc, #80]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a13      	ldr	r2, [pc, #76]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004024:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004026:	f7fd fc11 	bl	800184c <HAL_GetTick>
 800402a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800402c:	e009      	b.n	8004042 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800402e:	f7fd fc0d 	bl	800184c <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d902      	bls.n	8004042 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	73fb      	strb	r3, [r7, #15]
          break;
 8004040:	e005      	b.n	800404e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004042:	4b0a      	ldr	r3, [pc, #40]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0ef      	beq.n	800402e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d106      	bne.n	8004062 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004054:	4b05      	ldr	r3, [pc, #20]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	4903      	ldr	r1, [pc, #12]	@ (800406c <RCCEx_PLLSAI2_Config+0x1b4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004062:	7bfb      	ldrb	r3, [r7, #15]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40021000 	.word	0x40021000

08004070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e040      	b.n	8004104 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fd fa2a 	bl	80014ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2224      	movs	r2, #36	@ 0x24
 800409c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0201 	bic.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fc32 	bl	8004920 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f977 	bl	80043b0 <UART_SetConfig>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e01b      	b.n	8004104 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fcb1 	bl	8004a64 <UART_CheckIdleState>
 8004102:	4603      	mov	r3, r0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	@ 0x28
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004120:	2b20      	cmp	r3, #32
 8004122:	d177      	bne.n	8004214 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_UART_Transmit+0x24>
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e070      	b.n	8004216 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2221      	movs	r2, #33	@ 0x21
 8004140:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004142:	f7fd fb83 	bl	800184c <HAL_GetTick>
 8004146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	88fa      	ldrh	r2, [r7, #6]
 800414c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	88fa      	ldrh	r2, [r7, #6]
 8004154:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004160:	d108      	bne.n	8004174 <HAL_UART_Transmit+0x68>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d104      	bne.n	8004174 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	e003      	b.n	800417c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004178:	2300      	movs	r3, #0
 800417a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800417c:	e02f      	b.n	80041de <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2200      	movs	r2, #0
 8004186:	2180      	movs	r1, #128	@ 0x80
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fd13 	bl	8004bb4 <UART_WaitOnFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d004      	beq.n	800419e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e03b      	b.n	8004216 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10b      	bne.n	80041bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	881a      	ldrh	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b0:	b292      	uxth	r2, r2
 80041b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	3302      	adds	r3, #2
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	e007      	b.n	80041cc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3301      	adds	r3, #1
 80041ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1c9      	bne.n	800417e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2200      	movs	r2, #0
 80041f2:	2140      	movs	r1, #64	@ 0x40
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fcdd 	bl	8004bb4 <UART_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d004      	beq.n	800420a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e005      	b.n	8004216 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	e000      	b.n	8004216 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004214:	2302      	movs	r3, #2
  }
}
 8004216:	4618      	mov	r0, r3
 8004218:	3720      	adds	r7, #32
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b08a      	sub	sp, #40	@ 0x28
 8004222:	af02      	add	r7, sp, #8
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	603b      	str	r3, [r7, #0]
 800422a:	4613      	mov	r3, r2
 800422c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004234:	2b20      	cmp	r3, #32
 8004236:	f040 80b6 	bne.w	80043a6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_UART_Receive+0x28>
 8004240:	88fb      	ldrh	r3, [r7, #6]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e0ae      	b.n	80043a8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2222      	movs	r2, #34	@ 0x22
 8004256:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004260:	f7fd faf4 	bl	800184c <HAL_GetTick>
 8004264:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	88fa      	ldrh	r2, [r7, #6]
 800426a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	88fa      	ldrh	r2, [r7, #6]
 8004272:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800427e:	d10e      	bne.n	800429e <HAL_UART_Receive+0x80>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d105      	bne.n	8004294 <HAL_UART_Receive+0x76>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800428e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004292:	e02d      	b.n	80042f0 <HAL_UART_Receive+0xd2>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	22ff      	movs	r2, #255	@ 0xff
 8004298:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800429c:	e028      	b.n	80042f0 <HAL_UART_Receive+0xd2>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10d      	bne.n	80042c2 <HAL_UART_Receive+0xa4>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d104      	bne.n	80042b8 <HAL_UART_Receive+0x9a>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	22ff      	movs	r2, #255	@ 0xff
 80042b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042b6:	e01b      	b.n	80042f0 <HAL_UART_Receive+0xd2>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	227f      	movs	r2, #127	@ 0x7f
 80042bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042c0:	e016      	b.n	80042f0 <HAL_UART_Receive+0xd2>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042ca:	d10d      	bne.n	80042e8 <HAL_UART_Receive+0xca>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d104      	bne.n	80042de <HAL_UART_Receive+0xc0>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	227f      	movs	r2, #127	@ 0x7f
 80042d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042dc:	e008      	b.n	80042f0 <HAL_UART_Receive+0xd2>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	223f      	movs	r2, #63	@ 0x3f
 80042e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042e6:	e003      	b.n	80042f0 <HAL_UART_Receive+0xd2>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042f6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004300:	d108      	bne.n	8004314 <HAL_UART_Receive+0xf6>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d104      	bne.n	8004314 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	e003      	b.n	800431c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004318:	2300      	movs	r3, #0
 800431a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800431c:	e037      	b.n	800438e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2200      	movs	r2, #0
 8004326:	2120      	movs	r1, #32
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fc43 	bl	8004bb4 <UART_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e033      	b.n	80043a8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10c      	bne.n	8004360 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800434c:	b29a      	uxth	r2, r3
 800434e:	8a7b      	ldrh	r3, [r7, #18]
 8004350:	4013      	ands	r3, r2
 8004352:	b29a      	uxth	r2, r3
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	3302      	adds	r3, #2
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	e00d      	b.n	800437c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004366:	b29b      	uxth	r3, r3
 8004368:	b2da      	uxtb	r2, r3
 800436a:	8a7b      	ldrh	r3, [r7, #18]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	4013      	ands	r3, r2
 8004370:	b2da      	uxtb	r2, r3
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	3301      	adds	r3, #1
 800437a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1c1      	bne.n	800431e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e000      	b.n	80043a8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80043a6:	2302      	movs	r3, #2
  }
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b4:	b08a      	sub	sp, #40	@ 0x28
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	431a      	orrs	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	4ba4      	ldr	r3, [pc, #656]	@ (8004670 <UART_SetConfig+0x2c0>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	6812      	ldr	r2, [r2, #0]
 80043e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043e8:	430b      	orrs	r3, r1
 80043ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a99      	ldr	r2, [pc, #612]	@ (8004674 <UART_SetConfig+0x2c4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d004      	beq.n	800441c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004418:	4313      	orrs	r3, r2
 800441a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a90      	ldr	r2, [pc, #576]	@ (8004678 <UART_SetConfig+0x2c8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d126      	bne.n	8004488 <UART_SetConfig+0xd8>
 800443a:	4b90      	ldr	r3, [pc, #576]	@ (800467c <UART_SetConfig+0x2cc>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	2b03      	cmp	r3, #3
 8004446:	d81b      	bhi.n	8004480 <UART_SetConfig+0xd0>
 8004448:	a201      	add	r2, pc, #4	@ (adr r2, 8004450 <UART_SetConfig+0xa0>)
 800444a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444e:	bf00      	nop
 8004450:	08004461 	.word	0x08004461
 8004454:	08004471 	.word	0x08004471
 8004458:	08004469 	.word	0x08004469
 800445c:	08004479 	.word	0x08004479
 8004460:	2301      	movs	r3, #1
 8004462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004466:	e116      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004468:	2302      	movs	r3, #2
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800446e:	e112      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004470:	2304      	movs	r3, #4
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004476:	e10e      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004478:	2308      	movs	r3, #8
 800447a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800447e:	e10a      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004480:	2310      	movs	r3, #16
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004486:	e106      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a7c      	ldr	r2, [pc, #496]	@ (8004680 <UART_SetConfig+0x2d0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d138      	bne.n	8004504 <UART_SetConfig+0x154>
 8004492:	4b7a      	ldr	r3, [pc, #488]	@ (800467c <UART_SetConfig+0x2cc>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b0c      	cmp	r3, #12
 800449e:	d82d      	bhi.n	80044fc <UART_SetConfig+0x14c>
 80044a0:	a201      	add	r2, pc, #4	@ (adr r2, 80044a8 <UART_SetConfig+0xf8>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044dd 	.word	0x080044dd
 80044ac:	080044fd 	.word	0x080044fd
 80044b0:	080044fd 	.word	0x080044fd
 80044b4:	080044fd 	.word	0x080044fd
 80044b8:	080044ed 	.word	0x080044ed
 80044bc:	080044fd 	.word	0x080044fd
 80044c0:	080044fd 	.word	0x080044fd
 80044c4:	080044fd 	.word	0x080044fd
 80044c8:	080044e5 	.word	0x080044e5
 80044cc:	080044fd 	.word	0x080044fd
 80044d0:	080044fd 	.word	0x080044fd
 80044d4:	080044fd 	.word	0x080044fd
 80044d8:	080044f5 	.word	0x080044f5
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e2:	e0d8      	b.n	8004696 <UART_SetConfig+0x2e6>
 80044e4:	2302      	movs	r3, #2
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ea:	e0d4      	b.n	8004696 <UART_SetConfig+0x2e6>
 80044ec:	2304      	movs	r3, #4
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f2:	e0d0      	b.n	8004696 <UART_SetConfig+0x2e6>
 80044f4:	2308      	movs	r3, #8
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044fa:	e0cc      	b.n	8004696 <UART_SetConfig+0x2e6>
 80044fc:	2310      	movs	r3, #16
 80044fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004502:	e0c8      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a5e      	ldr	r2, [pc, #376]	@ (8004684 <UART_SetConfig+0x2d4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d125      	bne.n	800455a <UART_SetConfig+0x1aa>
 800450e:	4b5b      	ldr	r3, [pc, #364]	@ (800467c <UART_SetConfig+0x2cc>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004514:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004518:	2b30      	cmp	r3, #48	@ 0x30
 800451a:	d016      	beq.n	800454a <UART_SetConfig+0x19a>
 800451c:	2b30      	cmp	r3, #48	@ 0x30
 800451e:	d818      	bhi.n	8004552 <UART_SetConfig+0x1a2>
 8004520:	2b20      	cmp	r3, #32
 8004522:	d00a      	beq.n	800453a <UART_SetConfig+0x18a>
 8004524:	2b20      	cmp	r3, #32
 8004526:	d814      	bhi.n	8004552 <UART_SetConfig+0x1a2>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <UART_SetConfig+0x182>
 800452c:	2b10      	cmp	r3, #16
 800452e:	d008      	beq.n	8004542 <UART_SetConfig+0x192>
 8004530:	e00f      	b.n	8004552 <UART_SetConfig+0x1a2>
 8004532:	2300      	movs	r3, #0
 8004534:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004538:	e0ad      	b.n	8004696 <UART_SetConfig+0x2e6>
 800453a:	2302      	movs	r3, #2
 800453c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004540:	e0a9      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004542:	2304      	movs	r3, #4
 8004544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004548:	e0a5      	b.n	8004696 <UART_SetConfig+0x2e6>
 800454a:	2308      	movs	r3, #8
 800454c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004550:	e0a1      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004552:	2310      	movs	r3, #16
 8004554:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004558:	e09d      	b.n	8004696 <UART_SetConfig+0x2e6>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a4a      	ldr	r2, [pc, #296]	@ (8004688 <UART_SetConfig+0x2d8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d125      	bne.n	80045b0 <UART_SetConfig+0x200>
 8004564:	4b45      	ldr	r3, [pc, #276]	@ (800467c <UART_SetConfig+0x2cc>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800456e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004570:	d016      	beq.n	80045a0 <UART_SetConfig+0x1f0>
 8004572:	2bc0      	cmp	r3, #192	@ 0xc0
 8004574:	d818      	bhi.n	80045a8 <UART_SetConfig+0x1f8>
 8004576:	2b80      	cmp	r3, #128	@ 0x80
 8004578:	d00a      	beq.n	8004590 <UART_SetConfig+0x1e0>
 800457a:	2b80      	cmp	r3, #128	@ 0x80
 800457c:	d814      	bhi.n	80045a8 <UART_SetConfig+0x1f8>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <UART_SetConfig+0x1d8>
 8004582:	2b40      	cmp	r3, #64	@ 0x40
 8004584:	d008      	beq.n	8004598 <UART_SetConfig+0x1e8>
 8004586:	e00f      	b.n	80045a8 <UART_SetConfig+0x1f8>
 8004588:	2300      	movs	r3, #0
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800458e:	e082      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004590:	2302      	movs	r3, #2
 8004592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004596:	e07e      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004598:	2304      	movs	r3, #4
 800459a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800459e:	e07a      	b.n	8004696 <UART_SetConfig+0x2e6>
 80045a0:	2308      	movs	r3, #8
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a6:	e076      	b.n	8004696 <UART_SetConfig+0x2e6>
 80045a8:	2310      	movs	r3, #16
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ae:	e072      	b.n	8004696 <UART_SetConfig+0x2e6>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a35      	ldr	r2, [pc, #212]	@ (800468c <UART_SetConfig+0x2dc>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d12a      	bne.n	8004610 <UART_SetConfig+0x260>
 80045ba:	4b30      	ldr	r3, [pc, #192]	@ (800467c <UART_SetConfig+0x2cc>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045c8:	d01a      	beq.n	8004600 <UART_SetConfig+0x250>
 80045ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045ce:	d81b      	bhi.n	8004608 <UART_SetConfig+0x258>
 80045d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045d4:	d00c      	beq.n	80045f0 <UART_SetConfig+0x240>
 80045d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045da:	d815      	bhi.n	8004608 <UART_SetConfig+0x258>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <UART_SetConfig+0x238>
 80045e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045e4:	d008      	beq.n	80045f8 <UART_SetConfig+0x248>
 80045e6:	e00f      	b.n	8004608 <UART_SetConfig+0x258>
 80045e8:	2300      	movs	r3, #0
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ee:	e052      	b.n	8004696 <UART_SetConfig+0x2e6>
 80045f0:	2302      	movs	r3, #2
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f6:	e04e      	b.n	8004696 <UART_SetConfig+0x2e6>
 80045f8:	2304      	movs	r3, #4
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fe:	e04a      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004600:	2308      	movs	r3, #8
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004606:	e046      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004608:	2310      	movs	r3, #16
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460e:	e042      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a17      	ldr	r2, [pc, #92]	@ (8004674 <UART_SetConfig+0x2c4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d13a      	bne.n	8004690 <UART_SetConfig+0x2e0>
 800461a:	4b18      	ldr	r3, [pc, #96]	@ (800467c <UART_SetConfig+0x2cc>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004620:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004624:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004628:	d01a      	beq.n	8004660 <UART_SetConfig+0x2b0>
 800462a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800462e:	d81b      	bhi.n	8004668 <UART_SetConfig+0x2b8>
 8004630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004634:	d00c      	beq.n	8004650 <UART_SetConfig+0x2a0>
 8004636:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800463a:	d815      	bhi.n	8004668 <UART_SetConfig+0x2b8>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <UART_SetConfig+0x298>
 8004640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004644:	d008      	beq.n	8004658 <UART_SetConfig+0x2a8>
 8004646:	e00f      	b.n	8004668 <UART_SetConfig+0x2b8>
 8004648:	2300      	movs	r3, #0
 800464a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800464e:	e022      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004650:	2302      	movs	r3, #2
 8004652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004656:	e01e      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004658:	2304      	movs	r3, #4
 800465a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800465e:	e01a      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004660:	2308      	movs	r3, #8
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004666:	e016      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004668:	2310      	movs	r3, #16
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466e:	e012      	b.n	8004696 <UART_SetConfig+0x2e6>
 8004670:	efff69f3 	.word	0xefff69f3
 8004674:	40008000 	.word	0x40008000
 8004678:	40013800 	.word	0x40013800
 800467c:	40021000 	.word	0x40021000
 8004680:	40004400 	.word	0x40004400
 8004684:	40004800 	.word	0x40004800
 8004688:	40004c00 	.word	0x40004c00
 800468c:	40005000 	.word	0x40005000
 8004690:	2310      	movs	r3, #16
 8004692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a9f      	ldr	r2, [pc, #636]	@ (8004918 <UART_SetConfig+0x568>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d17a      	bne.n	8004796 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d824      	bhi.n	80046f2 <UART_SetConfig+0x342>
 80046a8:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <UART_SetConfig+0x300>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046d5 	.word	0x080046d5
 80046b4:	080046f3 	.word	0x080046f3
 80046b8:	080046dd 	.word	0x080046dd
 80046bc:	080046f3 	.word	0x080046f3
 80046c0:	080046e3 	.word	0x080046e3
 80046c4:	080046f3 	.word	0x080046f3
 80046c8:	080046f3 	.word	0x080046f3
 80046cc:	080046f3 	.word	0x080046f3
 80046d0:	080046eb 	.word	0x080046eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d4:	f7fe ff76 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 80046d8:	61f8      	str	r0, [r7, #28]
        break;
 80046da:	e010      	b.n	80046fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046dc:	4b8f      	ldr	r3, [pc, #572]	@ (800491c <UART_SetConfig+0x56c>)
 80046de:	61fb      	str	r3, [r7, #28]
        break;
 80046e0:	e00d      	b.n	80046fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046e2:	f7fe fed7 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 80046e6:	61f8      	str	r0, [r7, #28]
        break;
 80046e8:	e009      	b.n	80046fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ee:	61fb      	str	r3, [r7, #28]
        break;
 80046f0:	e005      	b.n	80046fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80fb 	beq.w	80048fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	4413      	add	r3, r2
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	429a      	cmp	r2, r3
 8004714:	d305      	bcc.n	8004722 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800471c:	69fa      	ldr	r2, [r7, #28]
 800471e:	429a      	cmp	r2, r3
 8004720:	d903      	bls.n	800472a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004728:	e0e8      	b.n	80048fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	2200      	movs	r2, #0
 800472e:	461c      	mov	r4, r3
 8004730:	4615      	mov	r5, r2
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	022b      	lsls	r3, r5, #8
 800473c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004740:	0222      	lsls	r2, r4, #8
 8004742:	68f9      	ldr	r1, [r7, #12]
 8004744:	6849      	ldr	r1, [r1, #4]
 8004746:	0849      	lsrs	r1, r1, #1
 8004748:	2000      	movs	r0, #0
 800474a:	4688      	mov	r8, r1
 800474c:	4681      	mov	r9, r0
 800474e:	eb12 0a08 	adds.w	sl, r2, r8
 8004752:	eb43 0b09 	adc.w	fp, r3, r9
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	603b      	str	r3, [r7, #0]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004764:	4650      	mov	r0, sl
 8004766:	4659      	mov	r1, fp
 8004768:	f7fb fd9a 	bl	80002a0 <__aeabi_uldivmod>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4613      	mov	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800477a:	d308      	bcc.n	800478e <UART_SetConfig+0x3de>
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004782:	d204      	bcs.n	800478e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	60da      	str	r2, [r3, #12]
 800478c:	e0b6      	b.n	80048fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004794:	e0b2      	b.n	80048fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800479e:	d15e      	bne.n	800485e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80047a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d828      	bhi.n	80047fa <UART_SetConfig+0x44a>
 80047a8:	a201      	add	r2, pc, #4	@ (adr r2, 80047b0 <UART_SetConfig+0x400>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	080047dd 	.word	0x080047dd
 80047b8:	080047e5 	.word	0x080047e5
 80047bc:	080047fb 	.word	0x080047fb
 80047c0:	080047eb 	.word	0x080047eb
 80047c4:	080047fb 	.word	0x080047fb
 80047c8:	080047fb 	.word	0x080047fb
 80047cc:	080047fb 	.word	0x080047fb
 80047d0:	080047f3 	.word	0x080047f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d4:	f7fe fef6 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 80047d8:	61f8      	str	r0, [r7, #28]
        break;
 80047da:	e014      	b.n	8004806 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047dc:	f7fe ff08 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 80047e0:	61f8      	str	r0, [r7, #28]
        break;
 80047e2:	e010      	b.n	8004806 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e4:	4b4d      	ldr	r3, [pc, #308]	@ (800491c <UART_SetConfig+0x56c>)
 80047e6:	61fb      	str	r3, [r7, #28]
        break;
 80047e8:	e00d      	b.n	8004806 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ea:	f7fe fe53 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 80047ee:	61f8      	str	r0, [r7, #28]
        break;
 80047f0:	e009      	b.n	8004806 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047f6:	61fb      	str	r3, [r7, #28]
        break;
 80047f8:	e005      	b.n	8004806 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004804:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d077      	beq.n	80048fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	005a      	lsls	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	085b      	lsrs	r3, r3, #1
 8004816:	441a      	add	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004820:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b0f      	cmp	r3, #15
 8004826:	d916      	bls.n	8004856 <UART_SetConfig+0x4a6>
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800482e:	d212      	bcs.n	8004856 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f023 030f 	bic.w	r3, r3, #15
 8004838:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	085b      	lsrs	r3, r3, #1
 800483e:	b29b      	uxth	r3, r3
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	b29a      	uxth	r2, r3
 8004846:	8afb      	ldrh	r3, [r7, #22]
 8004848:	4313      	orrs	r3, r2
 800484a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	8afa      	ldrh	r2, [r7, #22]
 8004852:	60da      	str	r2, [r3, #12]
 8004854:	e052      	b.n	80048fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800485c:	e04e      	b.n	80048fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800485e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004862:	2b08      	cmp	r3, #8
 8004864:	d827      	bhi.n	80048b6 <UART_SetConfig+0x506>
 8004866:	a201      	add	r2, pc, #4	@ (adr r2, 800486c <UART_SetConfig+0x4bc>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	08004891 	.word	0x08004891
 8004870:	08004899 	.word	0x08004899
 8004874:	080048a1 	.word	0x080048a1
 8004878:	080048b7 	.word	0x080048b7
 800487c:	080048a7 	.word	0x080048a7
 8004880:	080048b7 	.word	0x080048b7
 8004884:	080048b7 	.word	0x080048b7
 8004888:	080048b7 	.word	0x080048b7
 800488c:	080048af 	.word	0x080048af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004890:	f7fe fe98 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8004894:	61f8      	str	r0, [r7, #28]
        break;
 8004896:	e014      	b.n	80048c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004898:	f7fe feaa 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 800489c:	61f8      	str	r0, [r7, #28]
        break;
 800489e:	e010      	b.n	80048c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a0:	4b1e      	ldr	r3, [pc, #120]	@ (800491c <UART_SetConfig+0x56c>)
 80048a2:	61fb      	str	r3, [r7, #28]
        break;
 80048a4:	e00d      	b.n	80048c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a6:	f7fe fdf5 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 80048aa:	61f8      	str	r0, [r7, #28]
        break;
 80048ac:	e009      	b.n	80048c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048b2:	61fb      	str	r3, [r7, #28]
        break;
 80048b4:	e005      	b.n	80048c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048c0:	bf00      	nop
    }

    if (pclk != 0U)
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d019      	beq.n	80048fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	085a      	lsrs	r2, r3, #1
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	441a      	add	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b0f      	cmp	r3, #15
 80048e0:	d909      	bls.n	80048f6 <UART_SetConfig+0x546>
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048e8:	d205      	bcs.n	80048f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60da      	str	r2, [r3, #12]
 80048f4:	e002      	b.n	80048fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004908:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800490c:	4618      	mov	r0, r3
 800490e:	3728      	adds	r7, #40	@ 0x28
 8004910:	46bd      	mov	sp, r7
 8004912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004916:	bf00      	nop
 8004918:	40008000 	.word	0x40008000
 800491c:	00f42400 	.word	0x00f42400

08004920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01a      	beq.n	8004a36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a1e:	d10a      	bne.n	8004a36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  }
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b098      	sub	sp, #96	@ 0x60
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a74:	f7fc feea 	bl	800184c <HAL_GetTick>
 8004a78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d12e      	bne.n	8004ae6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a90:	2200      	movs	r2, #0
 8004a92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f88c 	bl	8004bb4 <UART_WaitOnFlagUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d021      	beq.n	8004ae6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ab6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ac2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ac6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e6      	bne.n	8004aa2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e062      	b.n	8004bac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d149      	bne.n	8004b88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004afc:	2200      	movs	r2, #0
 8004afe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f856 	bl	8004bb4 <UART_WaitOnFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d03c      	beq.n	8004b88 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e6      	bne.n	8004b0e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3308      	adds	r3, #8
 8004b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0301 	bic.w	r3, r3, #1
 8004b56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b60:	61fa      	str	r2, [r7, #28]
 8004b62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	69b9      	ldr	r1, [r7, #24]
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e5      	bne.n	8004b40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e011      	b.n	8004bac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3758      	adds	r7, #88	@ 0x58
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc4:	e04f      	b.n	8004c66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bcc:	d04b      	beq.n	8004c66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bce:	f7fc fe3d 	bl	800184c <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d302      	bcc.n	8004be4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e04e      	b.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d037      	beq.n	8004c66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b80      	cmp	r3, #128	@ 0x80
 8004bfa:	d034      	beq.n	8004c66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b40      	cmp	r3, #64	@ 0x40
 8004c00:	d031      	beq.n	8004c66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d110      	bne.n	8004c32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2208      	movs	r2, #8
 8004c16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f838 	bl	8004c8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2208      	movs	r2, #8
 8004c22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e029      	b.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c40:	d111      	bne.n	8004c66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f81e 	bl	8004c8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e00f      	b.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	bf0c      	ite	eq
 8004c76:	2301      	moveq	r3, #1
 8004c78:	2300      	movne	r3, #0
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d0a0      	beq.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b095      	sub	sp, #84	@ 0x54
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c9e:	e853 3f00 	ldrex	r3, [r3]
 8004ca2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cb6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e6      	bne.n	8004c96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3308      	adds	r3, #8
 8004cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f023 0301 	bic.w	r3, r3, #1
 8004cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ce8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e5      	bne.n	8004cc8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d118      	bne.n	8004d36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f023 0310 	bic.w	r3, r3, #16
 8004d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d22:	61bb      	str	r3, [r7, #24]
 8004d24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6979      	ldr	r1, [r7, #20]
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e6      	bne.n	8004d04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d4a:	bf00      	nop
 8004d4c:	3754      	adds	r7, #84	@ 0x54
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <_vsiprintf_r>:
 8004d58:	b510      	push	{r4, lr}
 8004d5a:	b09a      	sub	sp, #104	@ 0x68
 8004d5c:	2400      	movs	r4, #0
 8004d5e:	9100      	str	r1, [sp, #0]
 8004d60:	9104      	str	r1, [sp, #16]
 8004d62:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d66:	9105      	str	r1, [sp, #20]
 8004d68:	9102      	str	r1, [sp, #8]
 8004d6a:	4905      	ldr	r1, [pc, #20]	@ (8004d80 <_vsiprintf_r+0x28>)
 8004d6c:	9103      	str	r1, [sp, #12]
 8004d6e:	4669      	mov	r1, sp
 8004d70:	9419      	str	r4, [sp, #100]	@ 0x64
 8004d72:	f000 f999 	bl	80050a8 <_svfiprintf_r>
 8004d76:	9b00      	ldr	r3, [sp, #0]
 8004d78:	701c      	strb	r4, [r3, #0]
 8004d7a:	b01a      	add	sp, #104	@ 0x68
 8004d7c:	bd10      	pop	{r4, pc}
 8004d7e:	bf00      	nop
 8004d80:	ffff0208 	.word	0xffff0208

08004d84 <vsiprintf>:
 8004d84:	4613      	mov	r3, r2
 8004d86:	460a      	mov	r2, r1
 8004d88:	4601      	mov	r1, r0
 8004d8a:	4802      	ldr	r0, [pc, #8]	@ (8004d94 <vsiprintf+0x10>)
 8004d8c:	6800      	ldr	r0, [r0, #0]
 8004d8e:	f7ff bfe3 	b.w	8004d58 <_vsiprintf_r>
 8004d92:	bf00      	nop
 8004d94:	20000038 	.word	0x20000038

08004d98 <memset>:
 8004d98:	4402      	add	r2, r0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d100      	bne.n	8004da2 <memset+0xa>
 8004da0:	4770      	bx	lr
 8004da2:	f803 1b01 	strb.w	r1, [r3], #1
 8004da6:	e7f9      	b.n	8004d9c <memset+0x4>

08004da8 <__errno>:
 8004da8:	4b01      	ldr	r3, [pc, #4]	@ (8004db0 <__errno+0x8>)
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20000038 	.word	0x20000038

08004db4 <__libc_init_array>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	4d0d      	ldr	r5, [pc, #52]	@ (8004dec <__libc_init_array+0x38>)
 8004db8:	4c0d      	ldr	r4, [pc, #52]	@ (8004df0 <__libc_init_array+0x3c>)
 8004dba:	1b64      	subs	r4, r4, r5
 8004dbc:	10a4      	asrs	r4, r4, #2
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	42a6      	cmp	r6, r4
 8004dc2:	d109      	bne.n	8004dd8 <__libc_init_array+0x24>
 8004dc4:	4d0b      	ldr	r5, [pc, #44]	@ (8004df4 <__libc_init_array+0x40>)
 8004dc6:	4c0c      	ldr	r4, [pc, #48]	@ (8004df8 <__libc_init_array+0x44>)
 8004dc8:	f000 fc64 	bl	8005694 <_init>
 8004dcc:	1b64      	subs	r4, r4, r5
 8004dce:	10a4      	asrs	r4, r4, #2
 8004dd0:	2600      	movs	r6, #0
 8004dd2:	42a6      	cmp	r6, r4
 8004dd4:	d105      	bne.n	8004de2 <__libc_init_array+0x2e>
 8004dd6:	bd70      	pop	{r4, r5, r6, pc}
 8004dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ddc:	4798      	blx	r3
 8004dde:	3601      	adds	r6, #1
 8004de0:	e7ee      	b.n	8004dc0 <__libc_init_array+0xc>
 8004de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de6:	4798      	blx	r3
 8004de8:	3601      	adds	r6, #1
 8004dea:	e7f2      	b.n	8004dd2 <__libc_init_array+0x1e>
 8004dec:	08005cf4 	.word	0x08005cf4
 8004df0:	08005cf4 	.word	0x08005cf4
 8004df4:	08005cf4 	.word	0x08005cf4
 8004df8:	08005cf8 	.word	0x08005cf8

08004dfc <__retarget_lock_acquire_recursive>:
 8004dfc:	4770      	bx	lr

08004dfe <__retarget_lock_release_recursive>:
 8004dfe:	4770      	bx	lr

08004e00 <_free_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4605      	mov	r5, r0
 8004e04:	2900      	cmp	r1, #0
 8004e06:	d041      	beq.n	8004e8c <_free_r+0x8c>
 8004e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e0c:	1f0c      	subs	r4, r1, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	bfb8      	it	lt
 8004e12:	18e4      	addlt	r4, r4, r3
 8004e14:	f000 f8e0 	bl	8004fd8 <__malloc_lock>
 8004e18:	4a1d      	ldr	r2, [pc, #116]	@ (8004e90 <_free_r+0x90>)
 8004e1a:	6813      	ldr	r3, [r2, #0]
 8004e1c:	b933      	cbnz	r3, 8004e2c <_free_r+0x2c>
 8004e1e:	6063      	str	r3, [r4, #4]
 8004e20:	6014      	str	r4, [r2, #0]
 8004e22:	4628      	mov	r0, r5
 8004e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e28:	f000 b8dc 	b.w	8004fe4 <__malloc_unlock>
 8004e2c:	42a3      	cmp	r3, r4
 8004e2e:	d908      	bls.n	8004e42 <_free_r+0x42>
 8004e30:	6820      	ldr	r0, [r4, #0]
 8004e32:	1821      	adds	r1, r4, r0
 8004e34:	428b      	cmp	r3, r1
 8004e36:	bf01      	itttt	eq
 8004e38:	6819      	ldreq	r1, [r3, #0]
 8004e3a:	685b      	ldreq	r3, [r3, #4]
 8004e3c:	1809      	addeq	r1, r1, r0
 8004e3e:	6021      	streq	r1, [r4, #0]
 8004e40:	e7ed      	b.n	8004e1e <_free_r+0x1e>
 8004e42:	461a      	mov	r2, r3
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	b10b      	cbz	r3, 8004e4c <_free_r+0x4c>
 8004e48:	42a3      	cmp	r3, r4
 8004e4a:	d9fa      	bls.n	8004e42 <_free_r+0x42>
 8004e4c:	6811      	ldr	r1, [r2, #0]
 8004e4e:	1850      	adds	r0, r2, r1
 8004e50:	42a0      	cmp	r0, r4
 8004e52:	d10b      	bne.n	8004e6c <_free_r+0x6c>
 8004e54:	6820      	ldr	r0, [r4, #0]
 8004e56:	4401      	add	r1, r0
 8004e58:	1850      	adds	r0, r2, r1
 8004e5a:	4283      	cmp	r3, r0
 8004e5c:	6011      	str	r1, [r2, #0]
 8004e5e:	d1e0      	bne.n	8004e22 <_free_r+0x22>
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	6053      	str	r3, [r2, #4]
 8004e66:	4408      	add	r0, r1
 8004e68:	6010      	str	r0, [r2, #0]
 8004e6a:	e7da      	b.n	8004e22 <_free_r+0x22>
 8004e6c:	d902      	bls.n	8004e74 <_free_r+0x74>
 8004e6e:	230c      	movs	r3, #12
 8004e70:	602b      	str	r3, [r5, #0]
 8004e72:	e7d6      	b.n	8004e22 <_free_r+0x22>
 8004e74:	6820      	ldr	r0, [r4, #0]
 8004e76:	1821      	adds	r1, r4, r0
 8004e78:	428b      	cmp	r3, r1
 8004e7a:	bf04      	itt	eq
 8004e7c:	6819      	ldreq	r1, [r3, #0]
 8004e7e:	685b      	ldreq	r3, [r3, #4]
 8004e80:	6063      	str	r3, [r4, #4]
 8004e82:	bf04      	itt	eq
 8004e84:	1809      	addeq	r1, r1, r0
 8004e86:	6021      	streq	r1, [r4, #0]
 8004e88:	6054      	str	r4, [r2, #4]
 8004e8a:	e7ca      	b.n	8004e22 <_free_r+0x22>
 8004e8c:	bd38      	pop	{r3, r4, r5, pc}
 8004e8e:	bf00      	nop
 8004e90:	200003f0 	.word	0x200003f0

08004e94 <sbrk_aligned>:
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	4e0f      	ldr	r6, [pc, #60]	@ (8004ed4 <sbrk_aligned+0x40>)
 8004e98:	460c      	mov	r4, r1
 8004e9a:	6831      	ldr	r1, [r6, #0]
 8004e9c:	4605      	mov	r5, r0
 8004e9e:	b911      	cbnz	r1, 8004ea6 <sbrk_aligned+0x12>
 8004ea0:	f000 fba4 	bl	80055ec <_sbrk_r>
 8004ea4:	6030      	str	r0, [r6, #0]
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	f000 fb9f 	bl	80055ec <_sbrk_r>
 8004eae:	1c43      	adds	r3, r0, #1
 8004eb0:	d103      	bne.n	8004eba <sbrk_aligned+0x26>
 8004eb2:	f04f 34ff 	mov.w	r4, #4294967295
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	bd70      	pop	{r4, r5, r6, pc}
 8004eba:	1cc4      	adds	r4, r0, #3
 8004ebc:	f024 0403 	bic.w	r4, r4, #3
 8004ec0:	42a0      	cmp	r0, r4
 8004ec2:	d0f8      	beq.n	8004eb6 <sbrk_aligned+0x22>
 8004ec4:	1a21      	subs	r1, r4, r0
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f000 fb90 	bl	80055ec <_sbrk_r>
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d1f2      	bne.n	8004eb6 <sbrk_aligned+0x22>
 8004ed0:	e7ef      	b.n	8004eb2 <sbrk_aligned+0x1e>
 8004ed2:	bf00      	nop
 8004ed4:	200003ec 	.word	0x200003ec

08004ed8 <_malloc_r>:
 8004ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004edc:	1ccd      	adds	r5, r1, #3
 8004ede:	f025 0503 	bic.w	r5, r5, #3
 8004ee2:	3508      	adds	r5, #8
 8004ee4:	2d0c      	cmp	r5, #12
 8004ee6:	bf38      	it	cc
 8004ee8:	250c      	movcc	r5, #12
 8004eea:	2d00      	cmp	r5, #0
 8004eec:	4606      	mov	r6, r0
 8004eee:	db01      	blt.n	8004ef4 <_malloc_r+0x1c>
 8004ef0:	42a9      	cmp	r1, r5
 8004ef2:	d904      	bls.n	8004efe <_malloc_r+0x26>
 8004ef4:	230c      	movs	r3, #12
 8004ef6:	6033      	str	r3, [r6, #0]
 8004ef8:	2000      	movs	r0, #0
 8004efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004efe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fd4 <_malloc_r+0xfc>
 8004f02:	f000 f869 	bl	8004fd8 <__malloc_lock>
 8004f06:	f8d8 3000 	ldr.w	r3, [r8]
 8004f0a:	461c      	mov	r4, r3
 8004f0c:	bb44      	cbnz	r4, 8004f60 <_malloc_r+0x88>
 8004f0e:	4629      	mov	r1, r5
 8004f10:	4630      	mov	r0, r6
 8004f12:	f7ff ffbf 	bl	8004e94 <sbrk_aligned>
 8004f16:	1c43      	adds	r3, r0, #1
 8004f18:	4604      	mov	r4, r0
 8004f1a:	d158      	bne.n	8004fce <_malloc_r+0xf6>
 8004f1c:	f8d8 4000 	ldr.w	r4, [r8]
 8004f20:	4627      	mov	r7, r4
 8004f22:	2f00      	cmp	r7, #0
 8004f24:	d143      	bne.n	8004fae <_malloc_r+0xd6>
 8004f26:	2c00      	cmp	r4, #0
 8004f28:	d04b      	beq.n	8004fc2 <_malloc_r+0xea>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	4639      	mov	r1, r7
 8004f2e:	4630      	mov	r0, r6
 8004f30:	eb04 0903 	add.w	r9, r4, r3
 8004f34:	f000 fb5a 	bl	80055ec <_sbrk_r>
 8004f38:	4581      	cmp	r9, r0
 8004f3a:	d142      	bne.n	8004fc2 <_malloc_r+0xea>
 8004f3c:	6821      	ldr	r1, [r4, #0]
 8004f3e:	1a6d      	subs	r5, r5, r1
 8004f40:	4629      	mov	r1, r5
 8004f42:	4630      	mov	r0, r6
 8004f44:	f7ff ffa6 	bl	8004e94 <sbrk_aligned>
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d03a      	beq.n	8004fc2 <_malloc_r+0xea>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	442b      	add	r3, r5
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	f8d8 3000 	ldr.w	r3, [r8]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	bb62      	cbnz	r2, 8004fb4 <_malloc_r+0xdc>
 8004f5a:	f8c8 7000 	str.w	r7, [r8]
 8004f5e:	e00f      	b.n	8004f80 <_malloc_r+0xa8>
 8004f60:	6822      	ldr	r2, [r4, #0]
 8004f62:	1b52      	subs	r2, r2, r5
 8004f64:	d420      	bmi.n	8004fa8 <_malloc_r+0xd0>
 8004f66:	2a0b      	cmp	r2, #11
 8004f68:	d917      	bls.n	8004f9a <_malloc_r+0xc2>
 8004f6a:	1961      	adds	r1, r4, r5
 8004f6c:	42a3      	cmp	r3, r4
 8004f6e:	6025      	str	r5, [r4, #0]
 8004f70:	bf18      	it	ne
 8004f72:	6059      	strne	r1, [r3, #4]
 8004f74:	6863      	ldr	r3, [r4, #4]
 8004f76:	bf08      	it	eq
 8004f78:	f8c8 1000 	streq.w	r1, [r8]
 8004f7c:	5162      	str	r2, [r4, r5]
 8004f7e:	604b      	str	r3, [r1, #4]
 8004f80:	4630      	mov	r0, r6
 8004f82:	f000 f82f 	bl	8004fe4 <__malloc_unlock>
 8004f86:	f104 000b 	add.w	r0, r4, #11
 8004f8a:	1d23      	adds	r3, r4, #4
 8004f8c:	f020 0007 	bic.w	r0, r0, #7
 8004f90:	1ac2      	subs	r2, r0, r3
 8004f92:	bf1c      	itt	ne
 8004f94:	1a1b      	subne	r3, r3, r0
 8004f96:	50a3      	strne	r3, [r4, r2]
 8004f98:	e7af      	b.n	8004efa <_malloc_r+0x22>
 8004f9a:	6862      	ldr	r2, [r4, #4]
 8004f9c:	42a3      	cmp	r3, r4
 8004f9e:	bf0c      	ite	eq
 8004fa0:	f8c8 2000 	streq.w	r2, [r8]
 8004fa4:	605a      	strne	r2, [r3, #4]
 8004fa6:	e7eb      	b.n	8004f80 <_malloc_r+0xa8>
 8004fa8:	4623      	mov	r3, r4
 8004faa:	6864      	ldr	r4, [r4, #4]
 8004fac:	e7ae      	b.n	8004f0c <_malloc_r+0x34>
 8004fae:	463c      	mov	r4, r7
 8004fb0:	687f      	ldr	r7, [r7, #4]
 8004fb2:	e7b6      	b.n	8004f22 <_malloc_r+0x4a>
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	42a3      	cmp	r3, r4
 8004fba:	d1fb      	bne.n	8004fb4 <_malloc_r+0xdc>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	6053      	str	r3, [r2, #4]
 8004fc0:	e7de      	b.n	8004f80 <_malloc_r+0xa8>
 8004fc2:	230c      	movs	r3, #12
 8004fc4:	6033      	str	r3, [r6, #0]
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f000 f80c 	bl	8004fe4 <__malloc_unlock>
 8004fcc:	e794      	b.n	8004ef8 <_malloc_r+0x20>
 8004fce:	6005      	str	r5, [r0, #0]
 8004fd0:	e7d6      	b.n	8004f80 <_malloc_r+0xa8>
 8004fd2:	bf00      	nop
 8004fd4:	200003f0 	.word	0x200003f0

08004fd8 <__malloc_lock>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	@ (8004fe0 <__malloc_lock+0x8>)
 8004fda:	f7ff bf0f 	b.w	8004dfc <__retarget_lock_acquire_recursive>
 8004fde:	bf00      	nop
 8004fe0:	200003e8 	.word	0x200003e8

08004fe4 <__malloc_unlock>:
 8004fe4:	4801      	ldr	r0, [pc, #4]	@ (8004fec <__malloc_unlock+0x8>)
 8004fe6:	f7ff bf0a 	b.w	8004dfe <__retarget_lock_release_recursive>
 8004fea:	bf00      	nop
 8004fec:	200003e8 	.word	0x200003e8

08004ff0 <__ssputs_r>:
 8004ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff4:	688e      	ldr	r6, [r1, #8]
 8004ff6:	461f      	mov	r7, r3
 8004ff8:	42be      	cmp	r6, r7
 8004ffa:	680b      	ldr	r3, [r1, #0]
 8004ffc:	4682      	mov	sl, r0
 8004ffe:	460c      	mov	r4, r1
 8005000:	4690      	mov	r8, r2
 8005002:	d82d      	bhi.n	8005060 <__ssputs_r+0x70>
 8005004:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005008:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800500c:	d026      	beq.n	800505c <__ssputs_r+0x6c>
 800500e:	6965      	ldr	r5, [r4, #20]
 8005010:	6909      	ldr	r1, [r1, #16]
 8005012:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005016:	eba3 0901 	sub.w	r9, r3, r1
 800501a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800501e:	1c7b      	adds	r3, r7, #1
 8005020:	444b      	add	r3, r9
 8005022:	106d      	asrs	r5, r5, #1
 8005024:	429d      	cmp	r5, r3
 8005026:	bf38      	it	cc
 8005028:	461d      	movcc	r5, r3
 800502a:	0553      	lsls	r3, r2, #21
 800502c:	d527      	bpl.n	800507e <__ssputs_r+0x8e>
 800502e:	4629      	mov	r1, r5
 8005030:	f7ff ff52 	bl	8004ed8 <_malloc_r>
 8005034:	4606      	mov	r6, r0
 8005036:	b360      	cbz	r0, 8005092 <__ssputs_r+0xa2>
 8005038:	6921      	ldr	r1, [r4, #16]
 800503a:	464a      	mov	r2, r9
 800503c:	f000 fae6 	bl	800560c <memcpy>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800504a:	81a3      	strh	r3, [r4, #12]
 800504c:	6126      	str	r6, [r4, #16]
 800504e:	6165      	str	r5, [r4, #20]
 8005050:	444e      	add	r6, r9
 8005052:	eba5 0509 	sub.w	r5, r5, r9
 8005056:	6026      	str	r6, [r4, #0]
 8005058:	60a5      	str	r5, [r4, #8]
 800505a:	463e      	mov	r6, r7
 800505c:	42be      	cmp	r6, r7
 800505e:	d900      	bls.n	8005062 <__ssputs_r+0x72>
 8005060:	463e      	mov	r6, r7
 8005062:	6820      	ldr	r0, [r4, #0]
 8005064:	4632      	mov	r2, r6
 8005066:	4641      	mov	r1, r8
 8005068:	f000 faa6 	bl	80055b8 <memmove>
 800506c:	68a3      	ldr	r3, [r4, #8]
 800506e:	1b9b      	subs	r3, r3, r6
 8005070:	60a3      	str	r3, [r4, #8]
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	4433      	add	r3, r6
 8005076:	6023      	str	r3, [r4, #0]
 8005078:	2000      	movs	r0, #0
 800507a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507e:	462a      	mov	r2, r5
 8005080:	f000 fad2 	bl	8005628 <_realloc_r>
 8005084:	4606      	mov	r6, r0
 8005086:	2800      	cmp	r0, #0
 8005088:	d1e0      	bne.n	800504c <__ssputs_r+0x5c>
 800508a:	6921      	ldr	r1, [r4, #16]
 800508c:	4650      	mov	r0, sl
 800508e:	f7ff feb7 	bl	8004e00 <_free_r>
 8005092:	230c      	movs	r3, #12
 8005094:	f8ca 3000 	str.w	r3, [sl]
 8005098:	89a3      	ldrh	r3, [r4, #12]
 800509a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800509e:	81a3      	strh	r3, [r4, #12]
 80050a0:	f04f 30ff 	mov.w	r0, #4294967295
 80050a4:	e7e9      	b.n	800507a <__ssputs_r+0x8a>
	...

080050a8 <_svfiprintf_r>:
 80050a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ac:	4698      	mov	r8, r3
 80050ae:	898b      	ldrh	r3, [r1, #12]
 80050b0:	061b      	lsls	r3, r3, #24
 80050b2:	b09d      	sub	sp, #116	@ 0x74
 80050b4:	4607      	mov	r7, r0
 80050b6:	460d      	mov	r5, r1
 80050b8:	4614      	mov	r4, r2
 80050ba:	d510      	bpl.n	80050de <_svfiprintf_r+0x36>
 80050bc:	690b      	ldr	r3, [r1, #16]
 80050be:	b973      	cbnz	r3, 80050de <_svfiprintf_r+0x36>
 80050c0:	2140      	movs	r1, #64	@ 0x40
 80050c2:	f7ff ff09 	bl	8004ed8 <_malloc_r>
 80050c6:	6028      	str	r0, [r5, #0]
 80050c8:	6128      	str	r0, [r5, #16]
 80050ca:	b930      	cbnz	r0, 80050da <_svfiprintf_r+0x32>
 80050cc:	230c      	movs	r3, #12
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295
 80050d4:	b01d      	add	sp, #116	@ 0x74
 80050d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050da:	2340      	movs	r3, #64	@ 0x40
 80050dc:	616b      	str	r3, [r5, #20]
 80050de:	2300      	movs	r3, #0
 80050e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80050e2:	2320      	movs	r3, #32
 80050e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80050ec:	2330      	movs	r3, #48	@ 0x30
 80050ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800528c <_svfiprintf_r+0x1e4>
 80050f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050f6:	f04f 0901 	mov.w	r9, #1
 80050fa:	4623      	mov	r3, r4
 80050fc:	469a      	mov	sl, r3
 80050fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005102:	b10a      	cbz	r2, 8005108 <_svfiprintf_r+0x60>
 8005104:	2a25      	cmp	r2, #37	@ 0x25
 8005106:	d1f9      	bne.n	80050fc <_svfiprintf_r+0x54>
 8005108:	ebba 0b04 	subs.w	fp, sl, r4
 800510c:	d00b      	beq.n	8005126 <_svfiprintf_r+0x7e>
 800510e:	465b      	mov	r3, fp
 8005110:	4622      	mov	r2, r4
 8005112:	4629      	mov	r1, r5
 8005114:	4638      	mov	r0, r7
 8005116:	f7ff ff6b 	bl	8004ff0 <__ssputs_r>
 800511a:	3001      	adds	r0, #1
 800511c:	f000 80a7 	beq.w	800526e <_svfiprintf_r+0x1c6>
 8005120:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005122:	445a      	add	r2, fp
 8005124:	9209      	str	r2, [sp, #36]	@ 0x24
 8005126:	f89a 3000 	ldrb.w	r3, [sl]
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 809f 	beq.w	800526e <_svfiprintf_r+0x1c6>
 8005130:	2300      	movs	r3, #0
 8005132:	f04f 32ff 	mov.w	r2, #4294967295
 8005136:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800513a:	f10a 0a01 	add.w	sl, sl, #1
 800513e:	9304      	str	r3, [sp, #16]
 8005140:	9307      	str	r3, [sp, #28]
 8005142:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005146:	931a      	str	r3, [sp, #104]	@ 0x68
 8005148:	4654      	mov	r4, sl
 800514a:	2205      	movs	r2, #5
 800514c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005150:	484e      	ldr	r0, [pc, #312]	@ (800528c <_svfiprintf_r+0x1e4>)
 8005152:	f7fb f855 	bl	8000200 <memchr>
 8005156:	9a04      	ldr	r2, [sp, #16]
 8005158:	b9d8      	cbnz	r0, 8005192 <_svfiprintf_r+0xea>
 800515a:	06d0      	lsls	r0, r2, #27
 800515c:	bf44      	itt	mi
 800515e:	2320      	movmi	r3, #32
 8005160:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005164:	0711      	lsls	r1, r2, #28
 8005166:	bf44      	itt	mi
 8005168:	232b      	movmi	r3, #43	@ 0x2b
 800516a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800516e:	f89a 3000 	ldrb.w	r3, [sl]
 8005172:	2b2a      	cmp	r3, #42	@ 0x2a
 8005174:	d015      	beq.n	80051a2 <_svfiprintf_r+0xfa>
 8005176:	9a07      	ldr	r2, [sp, #28]
 8005178:	4654      	mov	r4, sl
 800517a:	2000      	movs	r0, #0
 800517c:	f04f 0c0a 	mov.w	ip, #10
 8005180:	4621      	mov	r1, r4
 8005182:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005186:	3b30      	subs	r3, #48	@ 0x30
 8005188:	2b09      	cmp	r3, #9
 800518a:	d94b      	bls.n	8005224 <_svfiprintf_r+0x17c>
 800518c:	b1b0      	cbz	r0, 80051bc <_svfiprintf_r+0x114>
 800518e:	9207      	str	r2, [sp, #28]
 8005190:	e014      	b.n	80051bc <_svfiprintf_r+0x114>
 8005192:	eba0 0308 	sub.w	r3, r0, r8
 8005196:	fa09 f303 	lsl.w	r3, r9, r3
 800519a:	4313      	orrs	r3, r2
 800519c:	9304      	str	r3, [sp, #16]
 800519e:	46a2      	mov	sl, r4
 80051a0:	e7d2      	b.n	8005148 <_svfiprintf_r+0xa0>
 80051a2:	9b03      	ldr	r3, [sp, #12]
 80051a4:	1d19      	adds	r1, r3, #4
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	9103      	str	r1, [sp, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bfbb      	ittet	lt
 80051ae:	425b      	neglt	r3, r3
 80051b0:	f042 0202 	orrlt.w	r2, r2, #2
 80051b4:	9307      	strge	r3, [sp, #28]
 80051b6:	9307      	strlt	r3, [sp, #28]
 80051b8:	bfb8      	it	lt
 80051ba:	9204      	strlt	r2, [sp, #16]
 80051bc:	7823      	ldrb	r3, [r4, #0]
 80051be:	2b2e      	cmp	r3, #46	@ 0x2e
 80051c0:	d10a      	bne.n	80051d8 <_svfiprintf_r+0x130>
 80051c2:	7863      	ldrb	r3, [r4, #1]
 80051c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80051c6:	d132      	bne.n	800522e <_svfiprintf_r+0x186>
 80051c8:	9b03      	ldr	r3, [sp, #12]
 80051ca:	1d1a      	adds	r2, r3, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	9203      	str	r2, [sp, #12]
 80051d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051d4:	3402      	adds	r4, #2
 80051d6:	9305      	str	r3, [sp, #20]
 80051d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800529c <_svfiprintf_r+0x1f4>
 80051dc:	7821      	ldrb	r1, [r4, #0]
 80051de:	2203      	movs	r2, #3
 80051e0:	4650      	mov	r0, sl
 80051e2:	f7fb f80d 	bl	8000200 <memchr>
 80051e6:	b138      	cbz	r0, 80051f8 <_svfiprintf_r+0x150>
 80051e8:	9b04      	ldr	r3, [sp, #16]
 80051ea:	eba0 000a 	sub.w	r0, r0, sl
 80051ee:	2240      	movs	r2, #64	@ 0x40
 80051f0:	4082      	lsls	r2, r0
 80051f2:	4313      	orrs	r3, r2
 80051f4:	3401      	adds	r4, #1
 80051f6:	9304      	str	r3, [sp, #16]
 80051f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051fc:	4824      	ldr	r0, [pc, #144]	@ (8005290 <_svfiprintf_r+0x1e8>)
 80051fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005202:	2206      	movs	r2, #6
 8005204:	f7fa fffc 	bl	8000200 <memchr>
 8005208:	2800      	cmp	r0, #0
 800520a:	d036      	beq.n	800527a <_svfiprintf_r+0x1d2>
 800520c:	4b21      	ldr	r3, [pc, #132]	@ (8005294 <_svfiprintf_r+0x1ec>)
 800520e:	bb1b      	cbnz	r3, 8005258 <_svfiprintf_r+0x1b0>
 8005210:	9b03      	ldr	r3, [sp, #12]
 8005212:	3307      	adds	r3, #7
 8005214:	f023 0307 	bic.w	r3, r3, #7
 8005218:	3308      	adds	r3, #8
 800521a:	9303      	str	r3, [sp, #12]
 800521c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800521e:	4433      	add	r3, r6
 8005220:	9309      	str	r3, [sp, #36]	@ 0x24
 8005222:	e76a      	b.n	80050fa <_svfiprintf_r+0x52>
 8005224:	fb0c 3202 	mla	r2, ip, r2, r3
 8005228:	460c      	mov	r4, r1
 800522a:	2001      	movs	r0, #1
 800522c:	e7a8      	b.n	8005180 <_svfiprintf_r+0xd8>
 800522e:	2300      	movs	r3, #0
 8005230:	3401      	adds	r4, #1
 8005232:	9305      	str	r3, [sp, #20]
 8005234:	4619      	mov	r1, r3
 8005236:	f04f 0c0a 	mov.w	ip, #10
 800523a:	4620      	mov	r0, r4
 800523c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005240:	3a30      	subs	r2, #48	@ 0x30
 8005242:	2a09      	cmp	r2, #9
 8005244:	d903      	bls.n	800524e <_svfiprintf_r+0x1a6>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0c6      	beq.n	80051d8 <_svfiprintf_r+0x130>
 800524a:	9105      	str	r1, [sp, #20]
 800524c:	e7c4      	b.n	80051d8 <_svfiprintf_r+0x130>
 800524e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005252:	4604      	mov	r4, r0
 8005254:	2301      	movs	r3, #1
 8005256:	e7f0      	b.n	800523a <_svfiprintf_r+0x192>
 8005258:	ab03      	add	r3, sp, #12
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	462a      	mov	r2, r5
 800525e:	4b0e      	ldr	r3, [pc, #56]	@ (8005298 <_svfiprintf_r+0x1f0>)
 8005260:	a904      	add	r1, sp, #16
 8005262:	4638      	mov	r0, r7
 8005264:	f3af 8000 	nop.w
 8005268:	1c42      	adds	r2, r0, #1
 800526a:	4606      	mov	r6, r0
 800526c:	d1d6      	bne.n	800521c <_svfiprintf_r+0x174>
 800526e:	89ab      	ldrh	r3, [r5, #12]
 8005270:	065b      	lsls	r3, r3, #25
 8005272:	f53f af2d 	bmi.w	80050d0 <_svfiprintf_r+0x28>
 8005276:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005278:	e72c      	b.n	80050d4 <_svfiprintf_r+0x2c>
 800527a:	ab03      	add	r3, sp, #12
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	462a      	mov	r2, r5
 8005280:	4b05      	ldr	r3, [pc, #20]	@ (8005298 <_svfiprintf_r+0x1f0>)
 8005282:	a904      	add	r1, sp, #16
 8005284:	4638      	mov	r0, r7
 8005286:	f000 f879 	bl	800537c <_printf_i>
 800528a:	e7ed      	b.n	8005268 <_svfiprintf_r+0x1c0>
 800528c:	08005cb8 	.word	0x08005cb8
 8005290:	08005cc2 	.word	0x08005cc2
 8005294:	00000000 	.word	0x00000000
 8005298:	08004ff1 	.word	0x08004ff1
 800529c:	08005cbe 	.word	0x08005cbe

080052a0 <_printf_common>:
 80052a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a4:	4616      	mov	r6, r2
 80052a6:	4698      	mov	r8, r3
 80052a8:	688a      	ldr	r2, [r1, #8]
 80052aa:	690b      	ldr	r3, [r1, #16]
 80052ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052b0:	4293      	cmp	r3, r2
 80052b2:	bfb8      	it	lt
 80052b4:	4613      	movlt	r3, r2
 80052b6:	6033      	str	r3, [r6, #0]
 80052b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052bc:	4607      	mov	r7, r0
 80052be:	460c      	mov	r4, r1
 80052c0:	b10a      	cbz	r2, 80052c6 <_printf_common+0x26>
 80052c2:	3301      	adds	r3, #1
 80052c4:	6033      	str	r3, [r6, #0]
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	0699      	lsls	r1, r3, #26
 80052ca:	bf42      	ittt	mi
 80052cc:	6833      	ldrmi	r3, [r6, #0]
 80052ce:	3302      	addmi	r3, #2
 80052d0:	6033      	strmi	r3, [r6, #0]
 80052d2:	6825      	ldr	r5, [r4, #0]
 80052d4:	f015 0506 	ands.w	r5, r5, #6
 80052d8:	d106      	bne.n	80052e8 <_printf_common+0x48>
 80052da:	f104 0a19 	add.w	sl, r4, #25
 80052de:	68e3      	ldr	r3, [r4, #12]
 80052e0:	6832      	ldr	r2, [r6, #0]
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	42ab      	cmp	r3, r5
 80052e6:	dc26      	bgt.n	8005336 <_printf_common+0x96>
 80052e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	3b00      	subs	r3, #0
 80052f0:	bf18      	it	ne
 80052f2:	2301      	movne	r3, #1
 80052f4:	0692      	lsls	r2, r2, #26
 80052f6:	d42b      	bmi.n	8005350 <_printf_common+0xb0>
 80052f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052fc:	4641      	mov	r1, r8
 80052fe:	4638      	mov	r0, r7
 8005300:	47c8      	blx	r9
 8005302:	3001      	adds	r0, #1
 8005304:	d01e      	beq.n	8005344 <_printf_common+0xa4>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	6922      	ldr	r2, [r4, #16]
 800530a:	f003 0306 	and.w	r3, r3, #6
 800530e:	2b04      	cmp	r3, #4
 8005310:	bf02      	ittt	eq
 8005312:	68e5      	ldreq	r5, [r4, #12]
 8005314:	6833      	ldreq	r3, [r6, #0]
 8005316:	1aed      	subeq	r5, r5, r3
 8005318:	68a3      	ldr	r3, [r4, #8]
 800531a:	bf0c      	ite	eq
 800531c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005320:	2500      	movne	r5, #0
 8005322:	4293      	cmp	r3, r2
 8005324:	bfc4      	itt	gt
 8005326:	1a9b      	subgt	r3, r3, r2
 8005328:	18ed      	addgt	r5, r5, r3
 800532a:	2600      	movs	r6, #0
 800532c:	341a      	adds	r4, #26
 800532e:	42b5      	cmp	r5, r6
 8005330:	d11a      	bne.n	8005368 <_printf_common+0xc8>
 8005332:	2000      	movs	r0, #0
 8005334:	e008      	b.n	8005348 <_printf_common+0xa8>
 8005336:	2301      	movs	r3, #1
 8005338:	4652      	mov	r2, sl
 800533a:	4641      	mov	r1, r8
 800533c:	4638      	mov	r0, r7
 800533e:	47c8      	blx	r9
 8005340:	3001      	adds	r0, #1
 8005342:	d103      	bne.n	800534c <_printf_common+0xac>
 8005344:	f04f 30ff 	mov.w	r0, #4294967295
 8005348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534c:	3501      	adds	r5, #1
 800534e:	e7c6      	b.n	80052de <_printf_common+0x3e>
 8005350:	18e1      	adds	r1, r4, r3
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	2030      	movs	r0, #48	@ 0x30
 8005356:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800535a:	4422      	add	r2, r4
 800535c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005360:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005364:	3302      	adds	r3, #2
 8005366:	e7c7      	b.n	80052f8 <_printf_common+0x58>
 8005368:	2301      	movs	r3, #1
 800536a:	4622      	mov	r2, r4
 800536c:	4641      	mov	r1, r8
 800536e:	4638      	mov	r0, r7
 8005370:	47c8      	blx	r9
 8005372:	3001      	adds	r0, #1
 8005374:	d0e6      	beq.n	8005344 <_printf_common+0xa4>
 8005376:	3601      	adds	r6, #1
 8005378:	e7d9      	b.n	800532e <_printf_common+0x8e>
	...

0800537c <_printf_i>:
 800537c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005380:	7e0f      	ldrb	r7, [r1, #24]
 8005382:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005384:	2f78      	cmp	r7, #120	@ 0x78
 8005386:	4691      	mov	r9, r2
 8005388:	4680      	mov	r8, r0
 800538a:	460c      	mov	r4, r1
 800538c:	469a      	mov	sl, r3
 800538e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005392:	d807      	bhi.n	80053a4 <_printf_i+0x28>
 8005394:	2f62      	cmp	r7, #98	@ 0x62
 8005396:	d80a      	bhi.n	80053ae <_printf_i+0x32>
 8005398:	2f00      	cmp	r7, #0
 800539a:	f000 80d1 	beq.w	8005540 <_printf_i+0x1c4>
 800539e:	2f58      	cmp	r7, #88	@ 0x58
 80053a0:	f000 80b8 	beq.w	8005514 <_printf_i+0x198>
 80053a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053ac:	e03a      	b.n	8005424 <_printf_i+0xa8>
 80053ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053b2:	2b15      	cmp	r3, #21
 80053b4:	d8f6      	bhi.n	80053a4 <_printf_i+0x28>
 80053b6:	a101      	add	r1, pc, #4	@ (adr r1, 80053bc <_printf_i+0x40>)
 80053b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053bc:	08005415 	.word	0x08005415
 80053c0:	08005429 	.word	0x08005429
 80053c4:	080053a5 	.word	0x080053a5
 80053c8:	080053a5 	.word	0x080053a5
 80053cc:	080053a5 	.word	0x080053a5
 80053d0:	080053a5 	.word	0x080053a5
 80053d4:	08005429 	.word	0x08005429
 80053d8:	080053a5 	.word	0x080053a5
 80053dc:	080053a5 	.word	0x080053a5
 80053e0:	080053a5 	.word	0x080053a5
 80053e4:	080053a5 	.word	0x080053a5
 80053e8:	08005527 	.word	0x08005527
 80053ec:	08005453 	.word	0x08005453
 80053f0:	080054e1 	.word	0x080054e1
 80053f4:	080053a5 	.word	0x080053a5
 80053f8:	080053a5 	.word	0x080053a5
 80053fc:	08005549 	.word	0x08005549
 8005400:	080053a5 	.word	0x080053a5
 8005404:	08005453 	.word	0x08005453
 8005408:	080053a5 	.word	0x080053a5
 800540c:	080053a5 	.word	0x080053a5
 8005410:	080054e9 	.word	0x080054e9
 8005414:	6833      	ldr	r3, [r6, #0]
 8005416:	1d1a      	adds	r2, r3, #4
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6032      	str	r2, [r6, #0]
 800541c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005420:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005424:	2301      	movs	r3, #1
 8005426:	e09c      	b.n	8005562 <_printf_i+0x1e6>
 8005428:	6833      	ldr	r3, [r6, #0]
 800542a:	6820      	ldr	r0, [r4, #0]
 800542c:	1d19      	adds	r1, r3, #4
 800542e:	6031      	str	r1, [r6, #0]
 8005430:	0606      	lsls	r6, r0, #24
 8005432:	d501      	bpl.n	8005438 <_printf_i+0xbc>
 8005434:	681d      	ldr	r5, [r3, #0]
 8005436:	e003      	b.n	8005440 <_printf_i+0xc4>
 8005438:	0645      	lsls	r5, r0, #25
 800543a:	d5fb      	bpl.n	8005434 <_printf_i+0xb8>
 800543c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005440:	2d00      	cmp	r5, #0
 8005442:	da03      	bge.n	800544c <_printf_i+0xd0>
 8005444:	232d      	movs	r3, #45	@ 0x2d
 8005446:	426d      	negs	r5, r5
 8005448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800544c:	4858      	ldr	r0, [pc, #352]	@ (80055b0 <_printf_i+0x234>)
 800544e:	230a      	movs	r3, #10
 8005450:	e011      	b.n	8005476 <_printf_i+0xfa>
 8005452:	6821      	ldr	r1, [r4, #0]
 8005454:	6833      	ldr	r3, [r6, #0]
 8005456:	0608      	lsls	r0, r1, #24
 8005458:	f853 5b04 	ldr.w	r5, [r3], #4
 800545c:	d402      	bmi.n	8005464 <_printf_i+0xe8>
 800545e:	0649      	lsls	r1, r1, #25
 8005460:	bf48      	it	mi
 8005462:	b2ad      	uxthmi	r5, r5
 8005464:	2f6f      	cmp	r7, #111	@ 0x6f
 8005466:	4852      	ldr	r0, [pc, #328]	@ (80055b0 <_printf_i+0x234>)
 8005468:	6033      	str	r3, [r6, #0]
 800546a:	bf14      	ite	ne
 800546c:	230a      	movne	r3, #10
 800546e:	2308      	moveq	r3, #8
 8005470:	2100      	movs	r1, #0
 8005472:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005476:	6866      	ldr	r6, [r4, #4]
 8005478:	60a6      	str	r6, [r4, #8]
 800547a:	2e00      	cmp	r6, #0
 800547c:	db05      	blt.n	800548a <_printf_i+0x10e>
 800547e:	6821      	ldr	r1, [r4, #0]
 8005480:	432e      	orrs	r6, r5
 8005482:	f021 0104 	bic.w	r1, r1, #4
 8005486:	6021      	str	r1, [r4, #0]
 8005488:	d04b      	beq.n	8005522 <_printf_i+0x1a6>
 800548a:	4616      	mov	r6, r2
 800548c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005490:	fb03 5711 	mls	r7, r3, r1, r5
 8005494:	5dc7      	ldrb	r7, [r0, r7]
 8005496:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800549a:	462f      	mov	r7, r5
 800549c:	42bb      	cmp	r3, r7
 800549e:	460d      	mov	r5, r1
 80054a0:	d9f4      	bls.n	800548c <_printf_i+0x110>
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d10b      	bne.n	80054be <_printf_i+0x142>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	07df      	lsls	r7, r3, #31
 80054aa:	d508      	bpl.n	80054be <_printf_i+0x142>
 80054ac:	6923      	ldr	r3, [r4, #16]
 80054ae:	6861      	ldr	r1, [r4, #4]
 80054b0:	4299      	cmp	r1, r3
 80054b2:	bfde      	ittt	le
 80054b4:	2330      	movle	r3, #48	@ 0x30
 80054b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054be:	1b92      	subs	r2, r2, r6
 80054c0:	6122      	str	r2, [r4, #16]
 80054c2:	f8cd a000 	str.w	sl, [sp]
 80054c6:	464b      	mov	r3, r9
 80054c8:	aa03      	add	r2, sp, #12
 80054ca:	4621      	mov	r1, r4
 80054cc:	4640      	mov	r0, r8
 80054ce:	f7ff fee7 	bl	80052a0 <_printf_common>
 80054d2:	3001      	adds	r0, #1
 80054d4:	d14a      	bne.n	800556c <_printf_i+0x1f0>
 80054d6:	f04f 30ff 	mov.w	r0, #4294967295
 80054da:	b004      	add	sp, #16
 80054dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	f043 0320 	orr.w	r3, r3, #32
 80054e6:	6023      	str	r3, [r4, #0]
 80054e8:	4832      	ldr	r0, [pc, #200]	@ (80055b4 <_printf_i+0x238>)
 80054ea:	2778      	movs	r7, #120	@ 0x78
 80054ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	6831      	ldr	r1, [r6, #0]
 80054f4:	061f      	lsls	r7, r3, #24
 80054f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80054fa:	d402      	bmi.n	8005502 <_printf_i+0x186>
 80054fc:	065f      	lsls	r7, r3, #25
 80054fe:	bf48      	it	mi
 8005500:	b2ad      	uxthmi	r5, r5
 8005502:	6031      	str	r1, [r6, #0]
 8005504:	07d9      	lsls	r1, r3, #31
 8005506:	bf44      	itt	mi
 8005508:	f043 0320 	orrmi.w	r3, r3, #32
 800550c:	6023      	strmi	r3, [r4, #0]
 800550e:	b11d      	cbz	r5, 8005518 <_printf_i+0x19c>
 8005510:	2310      	movs	r3, #16
 8005512:	e7ad      	b.n	8005470 <_printf_i+0xf4>
 8005514:	4826      	ldr	r0, [pc, #152]	@ (80055b0 <_printf_i+0x234>)
 8005516:	e7e9      	b.n	80054ec <_printf_i+0x170>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	f023 0320 	bic.w	r3, r3, #32
 800551e:	6023      	str	r3, [r4, #0]
 8005520:	e7f6      	b.n	8005510 <_printf_i+0x194>
 8005522:	4616      	mov	r6, r2
 8005524:	e7bd      	b.n	80054a2 <_printf_i+0x126>
 8005526:	6833      	ldr	r3, [r6, #0]
 8005528:	6825      	ldr	r5, [r4, #0]
 800552a:	6961      	ldr	r1, [r4, #20]
 800552c:	1d18      	adds	r0, r3, #4
 800552e:	6030      	str	r0, [r6, #0]
 8005530:	062e      	lsls	r6, r5, #24
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	d501      	bpl.n	800553a <_printf_i+0x1be>
 8005536:	6019      	str	r1, [r3, #0]
 8005538:	e002      	b.n	8005540 <_printf_i+0x1c4>
 800553a:	0668      	lsls	r0, r5, #25
 800553c:	d5fb      	bpl.n	8005536 <_printf_i+0x1ba>
 800553e:	8019      	strh	r1, [r3, #0]
 8005540:	2300      	movs	r3, #0
 8005542:	6123      	str	r3, [r4, #16]
 8005544:	4616      	mov	r6, r2
 8005546:	e7bc      	b.n	80054c2 <_printf_i+0x146>
 8005548:	6833      	ldr	r3, [r6, #0]
 800554a:	1d1a      	adds	r2, r3, #4
 800554c:	6032      	str	r2, [r6, #0]
 800554e:	681e      	ldr	r6, [r3, #0]
 8005550:	6862      	ldr	r2, [r4, #4]
 8005552:	2100      	movs	r1, #0
 8005554:	4630      	mov	r0, r6
 8005556:	f7fa fe53 	bl	8000200 <memchr>
 800555a:	b108      	cbz	r0, 8005560 <_printf_i+0x1e4>
 800555c:	1b80      	subs	r0, r0, r6
 800555e:	6060      	str	r0, [r4, #4]
 8005560:	6863      	ldr	r3, [r4, #4]
 8005562:	6123      	str	r3, [r4, #16]
 8005564:	2300      	movs	r3, #0
 8005566:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800556a:	e7aa      	b.n	80054c2 <_printf_i+0x146>
 800556c:	6923      	ldr	r3, [r4, #16]
 800556e:	4632      	mov	r2, r6
 8005570:	4649      	mov	r1, r9
 8005572:	4640      	mov	r0, r8
 8005574:	47d0      	blx	sl
 8005576:	3001      	adds	r0, #1
 8005578:	d0ad      	beq.n	80054d6 <_printf_i+0x15a>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	079b      	lsls	r3, r3, #30
 800557e:	d413      	bmi.n	80055a8 <_printf_i+0x22c>
 8005580:	68e0      	ldr	r0, [r4, #12]
 8005582:	9b03      	ldr	r3, [sp, #12]
 8005584:	4298      	cmp	r0, r3
 8005586:	bfb8      	it	lt
 8005588:	4618      	movlt	r0, r3
 800558a:	e7a6      	b.n	80054da <_printf_i+0x15e>
 800558c:	2301      	movs	r3, #1
 800558e:	4632      	mov	r2, r6
 8005590:	4649      	mov	r1, r9
 8005592:	4640      	mov	r0, r8
 8005594:	47d0      	blx	sl
 8005596:	3001      	adds	r0, #1
 8005598:	d09d      	beq.n	80054d6 <_printf_i+0x15a>
 800559a:	3501      	adds	r5, #1
 800559c:	68e3      	ldr	r3, [r4, #12]
 800559e:	9903      	ldr	r1, [sp, #12]
 80055a0:	1a5b      	subs	r3, r3, r1
 80055a2:	42ab      	cmp	r3, r5
 80055a4:	dcf2      	bgt.n	800558c <_printf_i+0x210>
 80055a6:	e7eb      	b.n	8005580 <_printf_i+0x204>
 80055a8:	2500      	movs	r5, #0
 80055aa:	f104 0619 	add.w	r6, r4, #25
 80055ae:	e7f5      	b.n	800559c <_printf_i+0x220>
 80055b0:	08005cc9 	.word	0x08005cc9
 80055b4:	08005cda 	.word	0x08005cda

080055b8 <memmove>:
 80055b8:	4288      	cmp	r0, r1
 80055ba:	b510      	push	{r4, lr}
 80055bc:	eb01 0402 	add.w	r4, r1, r2
 80055c0:	d902      	bls.n	80055c8 <memmove+0x10>
 80055c2:	4284      	cmp	r4, r0
 80055c4:	4623      	mov	r3, r4
 80055c6:	d807      	bhi.n	80055d8 <memmove+0x20>
 80055c8:	1e43      	subs	r3, r0, #1
 80055ca:	42a1      	cmp	r1, r4
 80055cc:	d008      	beq.n	80055e0 <memmove+0x28>
 80055ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055d6:	e7f8      	b.n	80055ca <memmove+0x12>
 80055d8:	4402      	add	r2, r0
 80055da:	4601      	mov	r1, r0
 80055dc:	428a      	cmp	r2, r1
 80055de:	d100      	bne.n	80055e2 <memmove+0x2a>
 80055e0:	bd10      	pop	{r4, pc}
 80055e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055ea:	e7f7      	b.n	80055dc <memmove+0x24>

080055ec <_sbrk_r>:
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	4d06      	ldr	r5, [pc, #24]	@ (8005608 <_sbrk_r+0x1c>)
 80055f0:	2300      	movs	r3, #0
 80055f2:	4604      	mov	r4, r0
 80055f4:	4608      	mov	r0, r1
 80055f6:	602b      	str	r3, [r5, #0]
 80055f8:	f7fc f84e 	bl	8001698 <_sbrk>
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d102      	bne.n	8005606 <_sbrk_r+0x1a>
 8005600:	682b      	ldr	r3, [r5, #0]
 8005602:	b103      	cbz	r3, 8005606 <_sbrk_r+0x1a>
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	bd38      	pop	{r3, r4, r5, pc}
 8005608:	200003e4 	.word	0x200003e4

0800560c <memcpy>:
 800560c:	440a      	add	r2, r1
 800560e:	4291      	cmp	r1, r2
 8005610:	f100 33ff 	add.w	r3, r0, #4294967295
 8005614:	d100      	bne.n	8005618 <memcpy+0xc>
 8005616:	4770      	bx	lr
 8005618:	b510      	push	{r4, lr}
 800561a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800561e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005622:	4291      	cmp	r1, r2
 8005624:	d1f9      	bne.n	800561a <memcpy+0xe>
 8005626:	bd10      	pop	{r4, pc}

08005628 <_realloc_r>:
 8005628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562c:	4607      	mov	r7, r0
 800562e:	4614      	mov	r4, r2
 8005630:	460d      	mov	r5, r1
 8005632:	b921      	cbnz	r1, 800563e <_realloc_r+0x16>
 8005634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005638:	4611      	mov	r1, r2
 800563a:	f7ff bc4d 	b.w	8004ed8 <_malloc_r>
 800563e:	b92a      	cbnz	r2, 800564c <_realloc_r+0x24>
 8005640:	f7ff fbde 	bl	8004e00 <_free_r>
 8005644:	4625      	mov	r5, r4
 8005646:	4628      	mov	r0, r5
 8005648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800564c:	f000 f81a 	bl	8005684 <_malloc_usable_size_r>
 8005650:	4284      	cmp	r4, r0
 8005652:	4606      	mov	r6, r0
 8005654:	d802      	bhi.n	800565c <_realloc_r+0x34>
 8005656:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800565a:	d8f4      	bhi.n	8005646 <_realloc_r+0x1e>
 800565c:	4621      	mov	r1, r4
 800565e:	4638      	mov	r0, r7
 8005660:	f7ff fc3a 	bl	8004ed8 <_malloc_r>
 8005664:	4680      	mov	r8, r0
 8005666:	b908      	cbnz	r0, 800566c <_realloc_r+0x44>
 8005668:	4645      	mov	r5, r8
 800566a:	e7ec      	b.n	8005646 <_realloc_r+0x1e>
 800566c:	42b4      	cmp	r4, r6
 800566e:	4622      	mov	r2, r4
 8005670:	4629      	mov	r1, r5
 8005672:	bf28      	it	cs
 8005674:	4632      	movcs	r2, r6
 8005676:	f7ff ffc9 	bl	800560c <memcpy>
 800567a:	4629      	mov	r1, r5
 800567c:	4638      	mov	r0, r7
 800567e:	f7ff fbbf 	bl	8004e00 <_free_r>
 8005682:	e7f1      	b.n	8005668 <_realloc_r+0x40>

08005684 <_malloc_usable_size_r>:
 8005684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005688:	1f18      	subs	r0, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	bfbc      	itt	lt
 800568e:	580b      	ldrlt	r3, [r1, r0]
 8005690:	18c0      	addlt	r0, r0, r3
 8005692:	4770      	bx	lr

08005694 <_init>:
 8005694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005696:	bf00      	nop
 8005698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569a:	bc08      	pop	{r3}
 800569c:	469e      	mov	lr, r3
 800569e:	4770      	bx	lr

080056a0 <_fini>:
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	bf00      	nop
 80056a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a6:	bc08      	pop	{r3}
 80056a8:	469e      	mov	lr, r3
 80056aa:	4770      	bx	lr
