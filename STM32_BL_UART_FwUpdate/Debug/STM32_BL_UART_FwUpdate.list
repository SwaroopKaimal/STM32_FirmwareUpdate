
STM32_BL_UART_FwUpdate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005484  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  08005634  08005634  00006634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb8  08005bb8  00007088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005bb8  08005bb8  00006bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bc0  08005bc0  00007088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc0  08005bc0  00006bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bc4  08005bc4  00006bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08005bc8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000088  08005c50  00007088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08005c50  000073f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce5f  00000000  00000000  000070b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002256  00000000  00000000  00013f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00016170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008eb  00000000  00000000  00016d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dc9  00000000  00000000  000175f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6a5  00000000  00000000  000403bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7a84  00000000  00000000  0004ea61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001464e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003374  00000000  00000000  00146528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0014989c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800561c 	.word	0x0800561c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800561c 	.word	0x0800561c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f001 f896 	bl	8001702 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f85f 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f92f 	bl	800083c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005de:	f000 f8d1 	bl	8000784 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f8fb 	bl	80007dc <MX_USART2_UART_Init>
  MX_CRC_Init();
 80005e6:	f000 f8ab 	bl	8000740 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /*Initially active bank is set as FLASH_ACTIVE_BANK1 as factory setup. TODO: Write protect and other necessary operations*/
  update_active_bank_number(FLASH_ACTIVE_BANK2);
 80005ea:	2002      	movs	r0, #2
 80005ec:	f000 feb2 	bl	8001354 <update_active_bank_number>

  /*Fetch the bank no. which has to be activated*/
  active_bank_number = fetch_active_bank_number();
 80005f0:	f000 fee4 	bl	80013bc <fetch_active_bank_number>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <main+0xa8>)
 80005fa:	701a      	strb	r2, [r3, #0]
  printmsg("BL_DEBUG_MSG: Active Bank: %d \n\r", active_bank_number);
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <main+0xa8>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	481d      	ldr	r0, [pc, #116]	@ (8000678 <main+0xac>)
 8000604:	f000 f9c0 	bl	8000988 <printmsg>


  /*If button is pressed*/
  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8000608:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800060c:	481b      	ldr	r0, [pc, #108]	@ (800067c <main+0xb0>)
 800060e:	f002 f947 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d126      	bne.n	8000666 <main+0x9a>
  {
	  printmsg("BL_DEBUG_MSG: Button pressed. Checking for firmware updates.\n\r");
 8000618:	4819      	ldr	r0, [pc, #100]	@ (8000680 <main+0xb4>)
 800061a:	f000 f9b5 	bl	8000988 <printmsg>
	  /* Function to return the version available on the host application */
	  //uint8_t available_version = fetch_available_firmware_version(); TODO: Fix Flow Logic
	  //printmsg("BL_DEBUG_MSG: Fetched version: %d \n\r", available_version);

	  /* Check if the user needs to update firmware, get input via Debug UART */
	  printmsg("BL_DEBUG_MSG: Update Firmware? Y/n \n\r");
 800061e:	4819      	ldr	r0, [pc, #100]	@ (8000684 <main+0xb8>)
 8000620:	f000 f9b2 	bl	8000988 <printmsg>
	  uint8_t update_option;
	  HAL_UART_Receive(D_UART, &update_option, 1, HAL_MAX_DELAY);
 8000624:	1df9      	adds	r1, r7, #7
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	2201      	movs	r2, #1
 800062c:	4816      	ldr	r0, [pc, #88]	@ (8000688 <main+0xbc>)
 800062e:	f003 fdba 	bl	80041a6 <HAL_UART_Receive>
	  if(update_option == 'Y' || update_option == 'y')
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b59      	cmp	r3, #89	@ 0x59
 8000636:	d002      	beq.n	800063e <main+0x72>
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	2b79      	cmp	r3, #121	@ 0x79
 800063c:	d102      	bne.n	8000644 <main+0x78>
	  {
		  /*User requires a firmware update */
		  handle_firmware_update();
 800063e:	f000 fe3d 	bl	80012bc <handle_firmware_update>
 8000642:	e015      	b.n	8000670 <main+0xa4>

	  }else if(update_option == 'N' || update_option == 'n')
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b4e      	cmp	r3, #78	@ 0x4e
 8000648:	d002      	beq.n	8000650 <main+0x84>
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b6e      	cmp	r3, #110	@ 0x6e
 800064e:	d105      	bne.n	800065c <main+0x90>
	  {
		  /*User does not requires a firmware update, go to custom boot loader*/
		  printmsg("BL_DEBUG_MSG: Update not required, entering bootloader mode \n\r");
 8000650:	480e      	ldr	r0, [pc, #56]	@ (800068c <main+0xc0>)
 8000652:	f000 f999 	bl	8000988 <printmsg>

		  /*Continuously check for user inputs to the boot loader*/
		  bootloader_uart_read_data();
 8000656:	f000 fa11 	bl	8000a7c <bootloader_uart_read_data>
 800065a:	e009      	b.n	8000670 <main+0xa4>

	  }else{
		  printmsg("BL_DEBUG_MSG: Invalid option. Please reset the board. \n\r");
 800065c:	480c      	ldr	r0, [pc, #48]	@ (8000690 <main+0xc4>)
 800065e:	f000 f993 	bl	8000988 <printmsg>
		  while(1);
 8000662:	bf00      	nop
 8000664:	e7fd      	b.n	8000662 <main+0x96>
	  }

  }else{

	  printmsg("BL_DEBUG_MSG: Button not pressed. Executing user application\n\r");
 8000666:	480b      	ldr	r0, [pc, #44]	@ (8000694 <main+0xc8>)
 8000668:	f000 f98e 	bl	8000988 <printmsg>

	  bootloader_jump_to_active_bank(); /*Jump to the active bank binaries*/
 800066c:	f000 f9b2 	bl	80009d4 <bootloader_jump_to_active_bank>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <main+0xa4>
 8000674:	200002a0 	.word	0x200002a0
 8000678:	08005634 	.word	0x08005634
 800067c:	48000800 	.word	0x48000800
 8000680:	08005658 	.word	0x08005658
 8000684:	08005698 	.word	0x08005698
 8000688:	200000c8 	.word	0x200000c8
 800068c:	080056c0 	.word	0x080056c0
 8000690:	08005700 	.word	0x08005700
 8000694:	0800573c 	.word	0x0800573c

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b096      	sub	sp, #88	@ 0x58
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2244      	movs	r2, #68	@ 0x44
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 fb3a 	bl	8004d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006be:	f002 f92d 	bl	800291c <HAL_PWREx_ControlVoltageScaling>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c8:	f000 fe8a 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006cc:	2310      	movs	r3, #16
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d8:	2360      	movs	r3, #96	@ 0x60
 80006da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006e0:	2301      	movs	r3, #1
 80006e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006e8:	2328      	movs	r3, #40	@ 0x28
 80006ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 f973 	bl	80029e8 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000708:	f000 fe6a 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2303      	movs	r3, #3
 8000712:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000718:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800071c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	2104      	movs	r1, #4
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fd78 	bl	800321c <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000732:	f000 fe55 	bl	80013e0 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3758      	adds	r7, #88	@ 0x58
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000744:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <MX_CRC_Init+0x3c>)
 8000746:	4a0e      	ldr	r2, [pc, #56]	@ (8000780 <MX_CRC_Init+0x40>)
 8000748:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_CRC_Init+0x3c>)
 800074c:	2200      	movs	r2, #0
 800074e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <MX_CRC_Init+0x3c>)
 8000752:	2200      	movs	r2, #0
 8000754:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_CRC_Init+0x3c>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <MX_CRC_Init+0x3c>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_CRC_Init+0x3c>)
 8000764:	2203      	movs	r2, #3
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_CRC_Init+0x3c>)
 800076a:	f001 f925 	bl	80019b8 <HAL_CRC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000774:	f000 fe34 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000a4 	.word	0x200000a4
 8000780:	40023000 	.word	0x40023000

08000784 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000788:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 800078a:	4a13      	ldr	r2, [pc, #76]	@ (80007d8 <MX_LPUART1_UART_Init+0x54>)
 800078c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 80007c2:	f003 fc19 	bl	8003ff8 <HAL_UART_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f000 fe08 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000c8 	.word	0x200000c8
 80007d8:	40008000 	.word	0x40008000

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007e2:	4a15      	ldr	r2, [pc, #84]	@ (8000838 <MX_USART2_UART_Init+0x5c>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000820:	f003 fbea 	bl	8003ff8 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800082a:	f000 fdd9 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000150 	.word	0x20000150
 8000838:	40004400 	.word	0x40004400

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	@ 0x30
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b49      	ldr	r3, [pc, #292]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a48      	ldr	r2, [pc, #288]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b46      	ldr	r3, [pc, #280]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086a:	4b43      	ldr	r3, [pc, #268]	@ (8000978 <MX_GPIO_Init+0x13c>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a42      	ldr	r2, [pc, #264]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b40      	ldr	r3, [pc, #256]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b3d      	ldr	r3, [pc, #244]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a3c      	ldr	r2, [pc, #240]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b3a      	ldr	r3, [pc, #232]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089a:	4b37      	ldr	r3, [pc, #220]	@ (8000978 <MX_GPIO_Init+0x13c>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a36      	ldr	r2, [pc, #216]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b34      	ldr	r3, [pc, #208]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80008b2:	f002 f889 	bl	80029c8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b30      	ldr	r3, [pc, #192]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	4a29      	ldr	r2, [pc, #164]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008da:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80008ec:	4823      	ldr	r0, [pc, #140]	@ (800097c <MX_GPIO_Init+0x140>)
 80008ee:	f001 ffef 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 5131 	mov.w	r1, #11328	@ 0x2c40
 80008f8:	4821      	ldr	r0, [pc, #132]	@ (8000980 <MX_GPIO_Init+0x144>)
 80008fa:	f001 ffe9 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000904:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	481b      	ldr	r0, [pc, #108]	@ (8000984 <MX_GPIO_Init+0x148>)
 8000916:	f001 fe31 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800091a:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4812      	ldr	r0, [pc, #72]	@ (800097c <MX_GPIO_Init+0x140>)
 8000934:	f001 fe22 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 8000938:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <MX_GPIO_Init+0x144>)
 800094e:	f001 fe15 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 8000952:	f44f 5331 	mov.w	r3, #11328	@ 0x2c40
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_GPIO_Init+0x144>)
 800096c:	f001 fe06 	bl	800257c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000970:	bf00      	nop
 8000972:	3730      	adds	r7, #48	@ 0x30
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40021000 	.word	0x40021000
 800097c:	48000400 	.word	0x48000400
 8000980:	48001800 	.word	0x48001800
 8000984:	48000800 	.word	0x48000800

08000988 <printmsg>:

/* USER CODE BEGIN 4 */

void printmsg(char *format, ...){/* The ... (ellipsis) means that more arguments can follow */
 8000988:	b40f      	push	{r0, r1, r2, r3}
 800098a:	b580      	push	{r7, lr}
 800098c:	b096      	sub	sp, #88	@ 0x58
 800098e:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN

	char str[80];
	/*Extract the argument list using C VA APIs*/
	va_list args;
	va_start(args, format);
 8000990:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000994:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800099e:	4618      	mov	r0, r3
 80009a0:	f004 f9b4 	bl	8004d0c <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fc21 	bl	80001f0 <strlen>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	f107 0108 	add.w	r1, r7, #8
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <printmsg+0x48>)
 80009bc:	f003 fb6a 	bl	8004094 <HAL_UART_Transmit>
	va_end(args);
#endif
}
 80009c0:	bf00      	nop
 80009c2:	3758      	adds	r7, #88	@ 0x58
 80009c4:	46bd      	mov	sp, r7
 80009c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009ca:	b004      	add	sp, #16
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	200000c8 	.word	0x200000c8

080009d4 <bootloader_jump_to_active_bank>:

void bootloader_jump_to_active_bank()
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
	 * 2. Redirects interrupts by re-mapping VTOR.
	 * 3. Fetches the application’s Reset_Handler address.
	 * 4. Calls it, effectively jumping to the user application.
	 */

	printmsg("BL_DEBUG_MSG: bootloader_jump_to_user_app\n\r");
 80009da:	481e      	ldr	r0, [pc, #120]	@ (8000a54 <bootloader_jump_to_active_bank+0x80>)
 80009dc:	f7ff ffd4 	bl	8000988 <printmsg>
	/*1. Configure the Main Stack Pointer (MSP) by reading the value form the flash base address of desired sector*/
	/* Check which firmware bank is active and run active firmware bank*/

	uint32_t resethandler_address;

	if(active_bank_number == FLASH_ACTIVE_BANK1)
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <bootloader_jump_to_active_bank+0x84>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d112      	bne.n	8000a0e <bootloader_jump_to_active_bank+0x3a>
	{

		printmsg("BL_DEBUG_MSG: Firmware Bank 1 Active. \n\r");
 80009e8:	481c      	ldr	r0, [pc, #112]	@ (8000a5c <bootloader_jump_to_active_bank+0x88>)
 80009ea:	f7ff ffcd 	bl	8000988 <printmsg>

		uint32_t msp_value = *(volatile uint32_t*)FLASH_FIRMWARE1;
 80009ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <bootloader_jump_to_active_bank+0x8c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f383 8808 	msr	MSP, r3
}
 80009fe:	bf00      	nop

		/* Set MSP function from CMSIS*/
		__set_MSP(msp_value);

		/* Re-map vector table to user application base address */
		SCB->VTOR = FLASH_FIRMWARE1; /* System Control Block - Vector Table Offset Register */
 8000a00:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <bootloader_jump_to_active_bank+0x90>)
 8000a02:	4a17      	ldr	r2, [pc, #92]	@ (8000a60 <bootloader_jump_to_active_bank+0x8c>)
 8000a04:	609a      	str	r2, [r3, #8]

		/* Fetch the reset handler address of the user application
		* from the location FIRMWARE_BASE_ADDRESS + 4 (32bits) */
		resethandler_address = *(volatile uint32_t*)(FLASH_FIRMWARE1 + 4);
 8000a06:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <bootloader_jump_to_active_bank+0x94>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e019      	b.n	8000a42 <bootloader_jump_to_active_bank+0x6e>

	}else if(active_bank_number == FLASH_ACTIVE_BANK2){
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <bootloader_jump_to_active_bank+0x84>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d112      	bne.n	8000a3c <bootloader_jump_to_active_bank+0x68>

		printmsg("BL_DEBUG_MSG: Firmware Bank 2 Active. \n\r");
 8000a16:	4815      	ldr	r0, [pc, #84]	@ (8000a6c <bootloader_jump_to_active_bank+0x98>)
 8000a18:	f7ff ffb6 	bl	8000988 <printmsg>

		uint32_t msp_value = *(volatile uint32_t*)FLASH_FIRMWARE2;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <bootloader_jump_to_active_bank+0x9c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	f383 8808 	msr	MSP, r3
}
 8000a2c:	bf00      	nop

		__set_MSP(msp_value);

		SCB->VTOR = FLASH_FIRMWARE2;
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <bootloader_jump_to_active_bank+0x90>)
 8000a30:	4a0f      	ldr	r2, [pc, #60]	@ (8000a70 <bootloader_jump_to_active_bank+0x9c>)
 8000a32:	609a      	str	r2, [r3, #8]

		resethandler_address = *(volatile uint32_t*)(FLASH_FIRMWARE2 + 4);
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <bootloader_jump_to_active_bank+0xa0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	e002      	b.n	8000a42 <bootloader_jump_to_active_bank+0x6e>
	}
	else{
		/*If values fetched from FLASH Meta data page is not 0 or 1*/
		printmsg("BL_DEBUG_MSG: Firmware Bank Error! \n\r");
 8000a3c:	480e      	ldr	r0, [pc, #56]	@ (8000a78 <bootloader_jump_to_active_bank+0xa4>)
 8000a3e:	f7ff ffa3 	bl	8000988 <printmsg>
	}

	void (*app_reset_handler)(void); /*A function pointer to hold the address of reset handler*/
	app_reset_handler = (void*) resethandler_address;
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	60bb      	str	r3, [r7, #8]

	/*3. Jumping to the reset handler of user application - Now this address will be loaded into the Program Counter*/
	app_reset_handler();
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	4798      	blx	r3

}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	0800577c 	.word	0x0800577c
 8000a58:	200002a0 	.word	0x200002a0
 8000a5c:	080057a8 	.word	0x080057a8
 8000a60:	08008000 	.word	0x08008000
 8000a64:	e000ed00 	.word	0xe000ed00
 8000a68:	08008004 	.word	0x08008004
 8000a6c:	080057d4 	.word	0x080057d4
 8000a70:	08080000 	.word	0x08080000
 8000a74:	08080004 	.word	0x08080004
 8000a78:	08005800 	.word	0x08005800

08000a7c <bootloader_uart_read_data>:

void bootloader_uart_read_data()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer, 0, BL_RX_LEN);
 8000a86:	22c8      	movs	r2, #200	@ 0xc8
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4832      	ldr	r0, [pc, #200]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000a8c:	f004 f948 	bl	8004d20 <memset>

		/*First read only one byte, which is the length. Then read the other bytes from UART */
		HAL_UART_Receive(C_UART, (uint8_t*)&bl_rx_buffer, 1, HAL_MAX_DELAY);
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	2201      	movs	r2, #1
 8000a96:	492f      	ldr	r1, [pc, #188]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000a98:	482f      	ldr	r0, [pc, #188]	@ (8000b58 <bootloader_uart_read_data+0xdc>)
 8000a9a:	f003 fb84 	bl	80041a6 <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	71fb      	strb	r3, [r7, #7]
		/*Receive the command*/
		HAL_UART_Receive(C_UART, (uint8_t*)&bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	492b      	ldr	r1, [pc, #172]	@ (8000b5c <bootloader_uart_read_data+0xe0>)
 8000aae:	482a      	ldr	r0, [pc, #168]	@ (8000b58 <bootloader_uart_read_data+0xdc>)
 8000ab0:	f003 fb79 	bl	80041a6 <HAL_UART_Receive>

		switch(bl_rx_buffer[1]) /* To check for command codes */
 8000ab4:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000ab6:	785b      	ldrb	r3, [r3, #1]
 8000ab8:	3b51      	subs	r3, #81	@ 0x51
 8000aba:	2b0f      	cmp	r3, #15
 8000abc:	d844      	bhi.n	8000b48 <bootloader_uart_read_data+0xcc>
 8000abe:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac4 <bootloader_uart_read_data+0x48>)
 8000ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac4:	08000b05 	.word	0x08000b05
 8000ac8:	08000b0d 	.word	0x08000b0d
 8000acc:	08000b15 	.word	0x08000b15
 8000ad0:	08000b1d 	.word	0x08000b1d
 8000ad4:	08000b49 	.word	0x08000b49
 8000ad8:	08000b25 	.word	0x08000b25
 8000adc:	08000b2d 	.word	0x08000b2d
 8000ae0:	08000b35 	.word	0x08000b35
 8000ae4:	08000b49 	.word	0x08000b49
 8000ae8:	08000b49 	.word	0x08000b49
 8000aec:	08000b49 	.word	0x08000b49
 8000af0:	08000b3d 	.word	0x08000b3d
 8000af4:	08000b49 	.word	0x08000b49
 8000af8:	08000b49 	.word	0x08000b49
 8000afc:	08000b49 	.word	0x08000b49
 8000b00:	08000b45 	.word	0x08000b45
		{
		case BL_GET_VER:
			bootloader_handle_getver_cmd(bl_rx_buffer);
 8000b04:	4813      	ldr	r0, [pc, #76]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b06:	f000 f82d 	bl	8000b64 <bootloader_handle_getver_cmd>
			break;
 8000b0a:	e021      	b.n	8000b50 <bootloader_uart_read_data+0xd4>
		case BL_GET_HELP:
			bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000b0c:	4811      	ldr	r0, [pc, #68]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b0e:	f000 f86d 	bl	8000bec <bootloader_handle_gethelp_cmd>
			break;
 8000b12:	e01d      	b.n	8000b50 <bootloader_uart_read_data+0xd4>
		case BL_GET_CID:
			bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000b14:	480f      	ldr	r0, [pc, #60]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b16:	f000 f8a1 	bl	8000c5c <bootloader_handle_getcid_cmd>
			break;
 8000b1a:	e019      	b.n	8000b50 <bootloader_uart_read_data+0xd4>
		case BL_GET_RDP_STATUS:
			bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000b1c:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b1e:	f000 f8e3 	bl	8000ce8 <bootloader_handle_getrdp_cmd>
			break;
 8000b22:	e015      	b.n	8000b50 <bootloader_uart_read_data+0xd4>
		case BL_FLASH_ERASE:
			bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000b24:	480b      	ldr	r0, [pc, #44]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b26:	f000 f925 	bl	8000d74 <bootloader_handle_flash_erase_cmd>
			break;
 8000b2a:	e011      	b.n	8000b50 <bootloader_uart_read_data+0xd4>
		case BL_MEM_WRITE:
			bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000b2c:	4809      	ldr	r0, [pc, #36]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b2e:	f000 f98b 	bl	8000e48 <bootloader_handle_mem_write_cmd>
			break;
 8000b32:	e00d      	b.n	8000b50 <bootloader_uart_read_data+0xd4>
		case BL_EN_RW_PROTECT:
			bootloader_handle_en_rw_protect(bl_rx_buffer);
 8000b34:	4807      	ldr	r0, [pc, #28]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b36:	f000 f9fd 	bl	8000f34 <bootloader_handle_en_rw_protect>
			break;
 8000b3a:	e009      	b.n	8000b50 <bootloader_uart_read_data+0xd4>
		case BL_DIS_R_W_PROTECT:
			bootloader_handle_dis_rw_protect(bl_rx_buffer);
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b3e:	f000 fa03 	bl	8000f48 <bootloader_handle_dis_rw_protect>
			break;
 8000b42:	e005      	b.n	8000b50 <bootloader_uart_read_data+0xd4>
		case BL_SHOW_ACTIVE_BANK:
			bootloader_show_active_bank();
 8000b44:	f000 fbfc 	bl	8001340 <bootloader_show_active_bank>
		default:
			printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 8000b48:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <bootloader_uart_read_data+0xe4>)
 8000b4a:	f7ff ff1d 	bl	8000988 <printmsg>
			break;
 8000b4e:	bf00      	nop
		memset(bl_rx_buffer, 0, BL_RX_LEN);
 8000b50:	e799      	b.n	8000a86 <bootloader_uart_read_data+0xa>
 8000b52:	bf00      	nop
 8000b54:	200001d8 	.word	0x200001d8
 8000b58:	20000150 	.word	0x20000150
 8000b5c:	200001d9 	.word	0x200001d9
 8000b60:	08005828 	.word	0x08005828

08000b64 <bootloader_handle_getver_cmd>:
}

/******************* Boot loader handler functions *******************/

void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    /* Handle "Get Version" command */
	uint8_t bl_version;

	uint32_t command_packet_len = bl_rx_buffer[0] + 1; /*Length to follow + First byte*/
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]

	/*Extract the 4 bytes of CRC32 sent by the host*/
	uint32_t host_crc = *((uint32_t*)(bl_rx_buffer + command_packet_len - 4)); /* CRC is always 32 bits (4 bytes) here */
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	3b04      	subs	r3, #4
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	613b      	str	r3, [r7, #16]

	/*Verify checksum*/
	printmsg("BL_DEBUG_MSG: bootloader_handle_getver_cmd\n\r");
 8000b80:	4816      	ldr	r0, [pc, #88]	@ (8000bdc <bootloader_handle_getver_cmd+0x78>)
 8000b82:	f7ff ff01 	bl	8000988 <printmsg>
	if(! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3b04      	subs	r3, #4
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 fa0e 	bl	8000fb0 <bootloader_verify_crc>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d117      	bne.n	8000bca <bootloader_handle_getver_cmd+0x66>
	{
		/*Checksum is correct*/
		printmsg("BL_DEBUG_MSG: Checksum success...!\n");
 8000b9a:	4811      	ldr	r0, [pc, #68]	@ (8000be0 <bootloader_handle_getver_cmd+0x7c>)
 8000b9c:	f7ff fef4 	bl	8000988 <printmsg>
		bootloader_send_ack(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f000 f9ed 	bl	8000f80 <bootloader_send_ack>
		bl_version = get_bootloader_version();
 8000ba6:	f000 fa4b 	bl	8001040 <get_bootloader_version>
 8000baa:	4603      	mov	r3, r0
 8000bac:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG: BL_VER: %d &#x\n", bl_version, bl_version);
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	480b      	ldr	r0, [pc, #44]	@ (8000be4 <bootloader_handle_getver_cmd+0x80>)
 8000bb8:	f7ff fee6 	bl	8000988 <printmsg>
		bootloader_uart_write_data(&bl_version, 1); /* Sends data back to the HOST */
 8000bbc:	f107 030f 	add.w	r3, r7, #15
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fa28 	bl	8001018 <bootloader_uart_write_data>
		printmsg("BL_DEBUG_MSG: Checksum failed...!\n");
		bootloader_send_nack();

	}

}
 8000bc8:	e004      	b.n	8000bd4 <bootloader_handle_getver_cmd+0x70>
		printmsg("BL_DEBUG_MSG: Checksum failed...!\n");
 8000bca:	4807      	ldr	r0, [pc, #28]	@ (8000be8 <bootloader_handle_getver_cmd+0x84>)
 8000bcc:	f7ff fedc 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000bd0:	f000 f9c4 	bl	8000f5c <bootloader_send_nack>
}
 8000bd4:	bf00      	nop
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	08005860 	.word	0x08005860
 8000be0:	08005890 	.word	0x08005890
 8000be4:	080058b4 	.word	0x080058b4
 8000be8:	080058d4 	.word	0x080058d4

08000bec <bootloader_handle_gethelp_cmd>:

void bootloader_handle_gethelp_cmd(uint8_t *bl_rx_buffer)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    /* Handle "Get Help" command */
	printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
 8000bf4:	4815      	ldr	r0, [pc, #84]	@ (8000c4c <bootloader_handle_gethelp_cmd+0x60>)
 8000bf6:	f7ff fec7 	bl	8000988 <printmsg>

	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]

	uint32_t host_crc = *((uint32_t*)(bl_rx_buffer + command_packet_len - 4));
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	3b04      	subs	r3, #4
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60bb      	str	r3, [r7, #8]

	if(! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3b04      	subs	r3, #4
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	4619      	mov	r1, r3
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f9ca 	bl	8000fb0 <bootloader_verify_crc>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d10a      	bne.n	8000c38 <bootloader_handle_gethelp_cmd+0x4c>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000c22:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <bootloader_handle_gethelp_cmd+0x64>)
 8000c24:	f7ff feb0 	bl	8000988 <printmsg>
		bootloader_send_ack(sizeof(supported_commands));
 8000c28:	2009      	movs	r0, #9
 8000c2a:	f000 f9a9 	bl	8000f80 <bootloader_send_ack>
		bootloader_uart_write_data(supported_commands, sizeof(supported_commands));
 8000c2e:	2109      	movs	r1, #9
 8000c30:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <bootloader_handle_gethelp_cmd+0x68>)
 8000c32:	f000 f9f1 	bl	8001018 <bootloader_uart_write_data>

	}else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000c36:	e004      	b.n	8000c42 <bootloader_handle_gethelp_cmd+0x56>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000c38:	4807      	ldr	r0, [pc, #28]	@ (8000c58 <bootloader_handle_gethelp_cmd+0x6c>)
 8000c3a:	f7ff fea5 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000c3e:	f000 f98d 	bl	8000f5c <bootloader_send_nack>
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	080058f8 	.word	0x080058f8
 8000c50:	08005924 	.word	0x08005924
 8000c54:	20000000 	.word	0x20000000
 8000c58:	08005948 	.word	0x08005948

08000c5c <bootloader_handle_getcid_cmd>:

void bootloader_handle_getcid_cmd(uint8_t *bl_rx_buffer)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    /* Handle "Get Chip ID" command */
	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
 8000c64:	481c      	ldr	r0, [pc, #112]	@ (8000cd8 <bootloader_handle_getcid_cmd+0x7c>)
 8000c66:	f7ff fe8f 	bl	8000988 <printmsg>

	uint16_t bl_cid_num = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	81fb      	strh	r3, [r7, #14]

	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]

	uint32_t host_crc = *((uint32_t*)(bl_rx_buffer + command_packet_len - 4));
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3b04      	subs	r3, #4
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	613b      	str	r3, [r7, #16]

	if(! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3b04      	subs	r3, #4
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f990 	bl	8000fb0 <bootloader_verify_crc>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d117      	bne.n	8000cc6 <bootloader_handle_getcid_cmd+0x6a>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000c96:	4811      	ldr	r0, [pc, #68]	@ (8000cdc <bootloader_handle_getcid_cmd+0x80>)
 8000c98:	f7ff fe76 	bl	8000988 <printmsg>
		bootloader_send_ack(2);
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f000 f96f 	bl	8000f80 <bootloader_send_ack>
		bl_cid_num = get_mcu_chip_id();
 8000ca2:	f000 f9d5 	bl	8001050 <get_mcu_chip_id>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	81fb      	strh	r3, [r7, #14]
		printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	4619      	mov	r1, r3
 8000cae:	89fb      	ldrh	r3, [r7, #14]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	480b      	ldr	r0, [pc, #44]	@ (8000ce0 <bootloader_handle_getcid_cmd+0x84>)
 8000cb4:	f7ff fe68 	bl	8000988 <printmsg>
		bootloader_uart_write_data((uint8_t*)&bl_cid_num, 2);
 8000cb8:	f107 030e 	add.w	r3, r7, #14
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f9aa 	bl	8001018 <bootloader_uart_write_data>
	}else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000cc4:	e004      	b.n	8000cd0 <bootloader_handle_getcid_cmd+0x74>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000cc6:	4807      	ldr	r0, [pc, #28]	@ (8000ce4 <bootloader_handle_getcid_cmd+0x88>)
 8000cc8:	f7ff fe5e 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000ccc:	f000 f946 	bl	8000f5c <bootloader_send_nack>
}
 8000cd0:	bf00      	nop
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	08005968 	.word	0x08005968
 8000cdc:	08005924 	.word	0x08005924
 8000ce0:	08005994 	.word	0x08005994
 8000ce4:	08005948 	.word	0x08005948

08000ce8 <bootloader_handle_getrdp_cmd>:

void bootloader_handle_getrdp_cmd(uint8_t *bl_rx_buffer)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
    /* Handle "Get Read Protection Level" command */
	printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
 8000cf0:	481c      	ldr	r0, [pc, #112]	@ (8000d64 <bootloader_handle_getrdp_cmd+0x7c>)
 8000cf2:	f7ff fe49 	bl	8000988 <printmsg>

	uint8_t rdp_level = 0x00;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3b04      	subs	r3, #4
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3b04      	subs	r3, #4
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4619      	mov	r1, r3
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f94a 	bl	8000fb0 <bootloader_verify_crc>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d117      	bne.n	8000d52 <bootloader_handle_getrdp_cmd+0x6a>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000d22:	4811      	ldr	r0, [pc, #68]	@ (8000d68 <bootloader_handle_getrdp_cmd+0x80>)
 8000d24:	f7ff fe30 	bl	8000988 <printmsg>
		bootloader_send_ack(1);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f000 f929 	bl	8000f80 <bootloader_send_ack>
		rdp_level = get_flash_rdp_level();
 8000d2e:	f000 f9a1 	bl	8001074 <get_flash_rdp_level>
 8000d32:	4603      	mov	r3, r0
 8000d34:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level, rdp_level);
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	480b      	ldr	r0, [pc, #44]	@ (8000d6c <bootloader_handle_getrdp_cmd+0x84>)
 8000d40:	f7ff fe22 	bl	8000988 <printmsg>
		bootloader_uart_write_data(&rdp_level, 1);
 8000d44:	f107 030f 	add.w	r3, r7, #15
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f964 	bl	8001018 <bootloader_uart_write_data>

	}else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000d50:	e004      	b.n	8000d5c <bootloader_handle_getrdp_cmd+0x74>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000d52:	4807      	ldr	r0, [pc, #28]	@ (8000d70 <bootloader_handle_getrdp_cmd+0x88>)
 8000d54:	f7ff fe18 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000d58:	f000 f900 	bl	8000f5c <bootloader_send_nack>
}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	080059b8 	.word	0x080059b8
 8000d68:	08005924 	.word	0x08005924
 8000d6c:	080059e4 	.word	0x080059e4
 8000d70:	08005948 	.word	0x08005948

08000d74 <bootloader_handle_flash_erase_cmd>:

void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  uint8_t erase_status = 0x00;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]
  printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 8000d80:	482a      	ldr	r0, [pc, #168]	@ (8000e2c <bootloader_handle_flash_erase_cmd+0xb8>)
 8000d82:	f7ff fe01 	bl	8000988 <printmsg>

  //Total length of the command packet
  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000d86:	4b2a      	ldr	r3, [pc, #168]	@ (8000e30 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]

  //extract the CRC32 sent by the Host
  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3b04      	subs	r3, #4
 8000d92:	4a27      	ldr	r2, [pc, #156]	@ (8000e30 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000d94:	4413      	add	r3, r2
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	613b      	str	r3, [r7, #16]

  if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc)) {
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3b04      	subs	r3, #4
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4619      	mov	r1, r3
 8000da2:	4823      	ldr	r0, [pc, #140]	@ (8000e30 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000da4:	f000 f904 	bl	8000fb0 <bootloader_verify_crc>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d135      	bne.n	8000e1a <bootloader_handle_flash_erase_cmd+0xa6>

    printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000dae:	4821      	ldr	r0, [pc, #132]	@ (8000e34 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000db0:	f7ff fdea 	bl	8000988 <printmsg>
    bootloader_send_ack(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f000 f8e3 	bl	8000f80 <bootloader_send_ack>
    printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3303      	adds	r3, #3
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	481b      	ldr	r0, [pc, #108]	@ (8000e38 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000dcc:	f7ff fddc 	bl	8000988 <printmsg>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dd6:	4819      	ldr	r0, [pc, #100]	@ (8000e3c <bootloader_handle_flash_erase_cmd+0xc8>)
 8000dd8:	f001 fd7a 	bl	80028d0 <HAL_GPIO_WritePin>
    erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3302      	adds	r3, #2
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3303      	adds	r3, #3
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4619      	mov	r1, r3
 8000dec:	4610      	mov	r0, r2
 8000dee:	f000 f983 	bl	80010f8 <execute_flash_erase>
 8000df2:	4603      	mov	r3, r0
 8000df4:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dfc:	480f      	ldr	r0, [pc, #60]	@ (8000e3c <bootloader_handle_flash_erase_cmd+0xc8>)
 8000dfe:	f001 fd67 	bl	80028d0 <HAL_GPIO_WritePin>

    printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	4619      	mov	r1, r3
 8000e06:	480e      	ldr	r0, [pc, #56]	@ (8000e40 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000e08:	f7ff fdbe 	bl	8000988 <printmsg>

    bootloader_uart_write_data(&erase_status,1);
 8000e0c:	f107 030f 	add.w	r3, r7, #15
 8000e10:	2101      	movs	r1, #1
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f900 	bl	8001018 <bootloader_uart_write_data>
  } else {

    printmsg("BL_DEBUG_MSG:checksum fail !!\n");
    bootloader_send_nack();
  }
}
 8000e18:	e004      	b.n	8000e24 <bootloader_handle_flash_erase_cmd+0xb0>
    printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000e1a:	480a      	ldr	r0, [pc, #40]	@ (8000e44 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000e1c:	f7ff fdb4 	bl	8000988 <printmsg>
    bootloader_send_nack();
 8000e20:	f000 f89c 	bl	8000f5c <bootloader_send_nack>
}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	08005a04 	.word	0x08005a04
 8000e30:	200001d8 	.word	0x200001d8
 8000e34:	08005924 	.word	0x08005924
 8000e38:	08005a34 	.word	0x08005a34
 8000e3c:	48000400 	.word	0x48000400
 8000e40:	08005a68 	.word	0x08005a68
 8000e44:	08005948 	.word	0x08005948

08000e48 <bootloader_handle_mem_write_cmd>:


void bootloader_handle_mem_write_cmd(uint8_t *bl_rx_buffer)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	/* Handle "Memory Write" command */

	printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 8000e50:	4831      	ldr	r0, [pc, #196]	@ (8000f18 <bootloader_handle_mem_write_cmd+0xd0>)
 8000e52:	f7ff fd99 	bl	8000988 <printmsg>

	uint8_t write_status = 0x00;
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]
	uint8_t payload_len = bl_rx_buffer[6];
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	799b      	ldrb	r3, [r3, #6]
 8000e5e:	77fb      	strb	r3, [r7, #31]

	uint32_t mem_addr = *((uint32_t*)(&bl_rx_buffer[2]));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000e66:	61bb      	str	r3, [r7, #24]

	uint32_t command_packet_len = bl_rx_buffer[0] + 1 ;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer + command_packet_len - 4));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	3b04      	subs	r3, #4
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	613b      	str	r3, [r7, #16]

	if(! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len -4, host_crc))
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4619      	mov	r1, r3
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 f893 	bl	8000fb0 <bootloader_verify_crc>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d13a      	bne.n	8000f06 <bootloader_handle_mem_write_cmd+0xbe>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000e90:	4822      	ldr	r0, [pc, #136]	@ (8000f1c <bootloader_handle_mem_write_cmd+0xd4>)
 8000e92:	f7ff fd79 	bl	8000988 <printmsg>
		bootloader_send_ack(1);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f000 f872 	bl	8000f80 <bootloader_send_ack>
		printmsg("BL_DEBUG_MSG: mem write address : %#x\n",mem_addr);
 8000e9c:	69b9      	ldr	r1, [r7, #24]
 8000e9e:	4820      	ldr	r0, [pc, #128]	@ (8000f20 <bootloader_handle_mem_write_cmd+0xd8>)
 8000ea0:	f7ff fd72 	bl	8000988 <printmsg>

		if( verify_address(mem_addr) == ADDR_VALID ) {
 8000ea4:	69b8      	ldr	r0, [r7, #24]
 8000ea6:	f000 f8f9 	bl	800109c <verify_address>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d11e      	bne.n	8000eee <bootloader_handle_mem_write_cmd+0xa6>


			printmsg("BL_DEBUG_MSG: valid mem write address\n");
 8000eb0:	481c      	ldr	r0, [pc, #112]	@ (8000f24 <bootloader_handle_mem_write_cmd+0xdc>)
 8000eb2:	f7ff fd69 	bl	8000988 <printmsg>

			//glow the led to indicate bootloader is currently writing to memory
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ebc:	481a      	ldr	r0, [pc, #104]	@ (8000f28 <bootloader_handle_mem_write_cmd+0xe0>)
 8000ebe:	f001 fd07 	bl	80028d0 <HAL_GPIO_WritePin>

			/* Execute memory write*/
			write_status = execute_mem_write(&bl_rx_buffer[7], mem_addr, payload_len);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3307      	adds	r3, #7
 8000ec6:	7ffa      	ldrb	r2, [r7, #31]
 8000ec8:	69b9      	ldr	r1, [r7, #24]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f953 	bl	8001176 <execute_mem_write>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eda:	4813      	ldr	r0, [pc, #76]	@ (8000f28 <bootloader_handle_mem_write_cmd+0xe0>)
 8000edc:	f001 fcf8 	bl	80028d0 <HAL_GPIO_WritePin>

			//inform host about the status
			bootloader_uart_write_data(&write_status,1);
 8000ee0:	f107 030f 	add.w	r3, r7, #15
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f896 	bl	8001018 <bootloader_uart_write_data>
		}
	}else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000eec:	e010      	b.n	8000f10 <bootloader_handle_mem_write_cmd+0xc8>
			printmsg("BL_DEBUG_MSG: invalid mem write address\n");
 8000eee:	480f      	ldr	r0, [pc, #60]	@ (8000f2c <bootloader_handle_mem_write_cmd+0xe4>)
 8000ef0:	f7ff fd4a 	bl	8000988 <printmsg>
			write_status = ADDR_INVALID;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
			bootloader_uart_write_data(&write_status,1);
 8000ef8:	f107 030f 	add.w	r3, r7, #15
 8000efc:	2101      	movs	r1, #1
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f88a 	bl	8001018 <bootloader_uart_write_data>
}
 8000f04:	e004      	b.n	8000f10 <bootloader_handle_mem_write_cmd+0xc8>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000f06:	480a      	ldr	r0, [pc, #40]	@ (8000f30 <bootloader_handle_mem_write_cmd+0xe8>)
 8000f08:	f7ff fd3e 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000f0c:	f000 f826 	bl	8000f5c <bootloader_send_nack>
}
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	08005a90 	.word	0x08005a90
 8000f1c:	08005924 	.word	0x08005924
 8000f20:	08005ac0 	.word	0x08005ac0
 8000f24:	08005ae8 	.word	0x08005ae8
 8000f28:	48000400 	.word	0x48000400
 8000f2c:	08005b10 	.word	0x08005b10
 8000f30:	08005948 	.word	0x08005948

08000f34 <bootloader_handle_en_rw_protect>:


void bootloader_handle_en_rw_protect(uint8_t *bl_rx_buffer)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
    /* Handle "Enable Read/Write Protection" command */
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <bootloader_handle_dis_rw_protect>:

void bootloader_handle_dis_rw_protect(uint8_t *bl_rx_buffer)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
    /* Handle "Disable Read/Write Protection" command */
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <bootloader_send_nack>:

void bootloader_send_nack(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000f62:	237f      	movs	r3, #127	@ 0x7f
 8000f64:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART, (uint8_t*)&nack, 1, HAL_MAX_DELAY);
 8000f66:	1df9      	adds	r1, r7, #7
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4803      	ldr	r0, [pc, #12]	@ (8000f7c <bootloader_send_nack+0x20>)
 8000f70:	f003 f890 	bl	8004094 <HAL_UART_Transmit>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000150 	.word	0x20000150

08000f80 <bootloader_send_ack>:

void bootloader_send_ack(uint8_t follow_len)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	/* 2 Bytes are sent, first byte is ACK and second is the length value */
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8000f8a:	23a5      	movs	r3, #165	@ 0xa5
 8000f8c:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART, (uint8_t*)&ack_buf, 2, HAL_MAX_DELAY);
 8000f92:	f107 010c 	add.w	r1, r7, #12
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	4803      	ldr	r0, [pc, #12]	@ (8000fac <bootloader_send_ack+0x2c>)
 8000f9e:	f003 f879 	bl	8004094 <HAL_UART_Transmit>

}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000150 	.word	0x20000150

08000fb0 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc(uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xff;
 8000fbc:	23ff      	movs	r3, #255	@ 0xff
 8000fbe:	61fb      	str	r3, [r7, #28]

	for(int i=0; i<len; i++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	e00f      	b.n	8000fe6 <bootloader_verify_crc+0x36>
	{
		uint32_t i_data = pData[i];
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480e      	ldr	r0, [pc, #56]	@ (8001014 <bootloader_verify_crc+0x64>)
 8000fda:	f000 fd51 	bl	8001a80 <HAL_CRC_Accumulate>
 8000fde:	61f8      	str	r0, [r7, #28]
	for(int i=0; i<len; i++)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	68ba      	ldr	r2, [r7, #8]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d8eb      	bhi.n	8000fc6 <bootloader_verify_crc+0x16>
	}

	/* Reset CRC Calculation Unit */
	__HAL_CRC_DR_RESET(&hcrc);
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <bootloader_verify_crc+0x64>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <bootloader_verify_crc+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 0201 	orr.w	r2, r2, #1
 8000ffc:	609a      	str	r2, [r3, #8]

	if(uwCRCValue == crc_host)
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	d101      	bne.n	800100a <bootloader_verify_crc+0x5a>
		return VERIFY_CRC_SUCCESS;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <bootloader_verify_crc+0x5c>
	return VERIFY_CRC_FAIL;
 800100a:	2301      	movs	r3, #1

}
 800100c:	4618      	mov	r0, r3
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200000a4 	.word	0x200000a4

08001018 <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(C_UART, pBuffer, len, HAL_MAX_DELAY);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b29a      	uxth	r2, r3
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4803      	ldr	r0, [pc, #12]	@ (800103c <bootloader_uart_write_data+0x24>)
 800102e:	f003 f831 	bl	8004094 <HAL_UART_Transmit>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000150 	.word	0x20000150

08001040 <get_bootloader_version>:

uint8_t get_bootloader_version()
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 8001044:	2310      	movs	r3, #16
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
	   the user software. It is even accessible while the MCU is under system reset.
	 */

	uint16_t cid;
	/* Reading the register and masking the unnecessary bits */
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <get_mcu_chip_id+0x20>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001060:	80fb      	strh	r3, [r7, #6]
	return cid;
 8001062:	88fb      	ldrh	r3, [r7, #6]
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e0042000 	.word	0xe0042000

08001074 <get_flash_rdp_level>:

uint8_t get_flash_rdp_level(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	@ 0x30
 8001078:	af00      	add	r7, sp, #0
	 *
	 * When decreased from 'Level 1 to Level 0', the FLASH goes into MASS ERASE.
	 *
	 * */
	/*HAL Implementation*/
	uint8_t rdp_status = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	FLASH_OBProgramInitTypeDef ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	4618      	mov	r0, r3
 8001084:	f001 f884 	bl	8002190 <HAL_FLASHEx_OBGetConfig>
	rdp_status = (uint8_t)ob_handle.RDPLevel;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	return rdp_status;
 800108e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001092:	4618      	mov	r0, r3
 8001094:	3730      	adds	r7, #48	@ 0x30
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <verify_address>:


uint8_t verify_address(uint32_t go_address)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	/*Jump to FLASH, System Memory, SRAM1, SRAM2, Backup SRAM allowed,
	 * others such as peripheral memory not allowed*/

	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010aa:	d305      	bcc.n	80010b8 <verify_address+0x1c>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <verify_address+0x54>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d801      	bhi.n	80010b8 <verify_address+0x1c>

		return ADDR_VALID;
 80010b4:	2300      	movs	r3, #0
 80010b6:	e014      	b.n	80010e2 <verify_address+0x46>
	} else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80010be:	d305      	bcc.n	80010cc <verify_address+0x30>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a0c      	ldr	r2, [pc, #48]	@ (80010f4 <verify_address+0x58>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d801      	bhi.n	80010cc <verify_address+0x30>

		return ADDR_VALID;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e00a      	b.n	80010e2 <verify_address+0x46>
	} else if ( go_address >= FLASH_BASE && go_address <= FLASH_END) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80010d2:	d305      	bcc.n	80010e0 <verify_address+0x44>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80010da:	d201      	bcs.n	80010e0 <verify_address+0x44>

		return ADDR_VALID;
 80010dc:	2300      	movs	r3, #0
 80010de:	e000      	b.n	80010e2 <verify_address+0x46>
	}else
	return ADDR_INVALID;
 80010e0:	2301      	movs	r3, #1
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20040000 	.word	0x20040000
 80010f4:	10010000 	.word	0x10010000

080010f8 <execute_flash_erase>:

uint8_t execute_flash_erase(uint32_t page_number , uint32_t number_of_pages) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  FLASH_EraseInitTypeDef flashErase_handle;
  uint32_t sectorError;
  HAL_StatusTypeDef status;


  if( number_of_pages > 511 )
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001108:	d301      	bcc.n	800110e <execute_flash_erase+0x16>
    return INVALID_SECTOR;
 800110a:	2304      	movs	r3, #4
 800110c:	e02f      	b.n	800116e <execute_flash_erase+0x76>

  if( (page_number == 0xff ) || (page_number <= 511) ) {
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2bff      	cmp	r3, #255	@ 0xff
 8001112:	d003      	beq.n	800111c <execute_flash_erase+0x24>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800111a:	d227      	bcs.n	800116c <execute_flash_erase+0x74>
    if(page_number == (uint8_t) 0xff) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2bff      	cmp	r3, #255	@ 0xff
 8001120:	d102      	bne.n	8001128 <execute_flash_erase+0x30>
    flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8001122:	2301      	movs	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e00f      	b.n	8001148 <execute_flash_erase+0x50>

    } else {
      /*Here we are just calculating how many sectors needs to erased */
      uint8_t remanining_page = 511 - page_number;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	77fb      	strb	r3, [r7, #31]
      if( number_of_pages > remanining_page) {
 8001130:	7ffb      	ldrb	r3, [r7, #31]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d901      	bls.n	800113c <execute_flash_erase+0x44>

    	  number_of_pages = remanining_page;
 8001138:	7ffb      	ldrb	r3, [r7, #31]
 800113a:	603b      	str	r3, [r7, #0]
      }
      flashErase_handle.TypeErase = FLASH_TYPEERASE_PAGES; /*Macro from HAL*/
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
      flashErase_handle.Page = page_number; // This is the initial page
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	617b      	str	r3, [r7, #20]
      flashErase_handle.NbPages = number_of_pages;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	61bb      	str	r3, [r7, #24]
    }
    flashErase_handle.Banks = FLASH_BANK_1;
 8001148:	2301      	movs	r3, #1
 800114a:	613b      	str	r3, [r7, #16]

    /*Get access to the flash registers, unlock them first */
    HAL_FLASH_Unlock();
 800114c:	f000 fea0 	bl	8001e90 <HAL_FLASH_Unlock>
    status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8001150:	f107 0208 	add.w	r2, r7, #8
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f000 ff7c 	bl	8002058 <HAL_FLASHEx_Erase>
 8001160:	4603      	mov	r3, r0
 8001162:	77bb      	strb	r3, [r7, #30]
    HAL_FLASH_Lock();
 8001164:	f000 feb6 	bl	8001ed4 <HAL_FLASH_Lock>

    return status;
 8001168:	7fbb      	ldrb	r3, [r7, #30]
 800116a:	e000      	b.n	800116e <execute_flash_erase+0x76>
  }

  return INVALID_SECTOR;
 800116c:	2304      	movs	r3, #4
}
 800116e:	4618      	mov	r0, r3
 8001170:	3720      	adds	r7, #32
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <execute_mem_write>:

uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 8001176:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800117a:	b091      	sub	sp, #68	@ 0x44
 800117c:	af00      	add	r7, sp, #0
 800117e:	61f8      	str	r0, [r7, #28]
 8001180:	61b9      	str	r1, [r7, #24]
 8001182:	617a      	str	r2, [r7, #20]
	/* Below code is for FLASH_TYPEPROGRAM_DOUBLEWORD logic - host application sends single word */

    HAL_StatusTypeDef status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    if ((mem_address & 0x7U) != 0U) return (uint8_t)HAL_ERROR; /* must be 8-byte aligned */
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <execute_mem_write+0x22>
 8001194:	2301      	movs	r3, #1
 8001196:	e08c      	b.n	80012b2 <execute_mem_write+0x13c>
    if (len == 0U) return (uint8_t)HAL_OK;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <execute_mem_write+0x2c>
 800119e:	2300      	movs	r3, #0
 80011a0:	e087      	b.n	80012b2 <execute_mem_write+0x13c>

    HAL_FLASH_Unlock();
 80011a2:	f000 fe75 	bl	8001e90 <HAL_FLASH_Unlock>

    for (uint32_t offset = 0; offset < len; offset += 8U) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011aa:	e078      	b.n	800129e <execute_mem_write+0x128>
        uint64_t data64 = 0ULL;
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        uint32_t chunk = ((len - offset) >= 8U) ? 8U : (len - offset);
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b08      	cmp	r3, #8
 80011c0:	bf28      	it	cs
 80011c2:	2308      	movcs	r3, #8
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* pack available bytes (little-endian) */
        for (uint32_t b = 0U; b < chunk; ++b) {
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011ca:	e027      	b.n	800121c <execute_mem_write+0xa6>
            data64 |= ((uint64_t)pBuffer[offset + b]) << (8U * b);
 80011cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d0:	4413      	add	r3, r2
 80011d2:	69fa      	ldr	r2, [r7, #28]
 80011d4:	4413      	add	r3, r2
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2200      	movs	r2, #0
 80011dc:	469a      	mov	sl, r3
 80011de:	4693      	mov	fp, r2
 80011e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	f1a3 0120 	sub.w	r1, r3, #32
 80011e8:	f1c3 0220 	rsb	r2, r3, #32
 80011ec:	fa0b f503 	lsl.w	r5, fp, r3
 80011f0:	fa0a f101 	lsl.w	r1, sl, r1
 80011f4:	430d      	orrs	r5, r1
 80011f6:	fa2a f202 	lsr.w	r2, sl, r2
 80011fa:	4315      	orrs	r5, r2
 80011fc:	fa0a f403 	lsl.w	r4, sl, r3
 8001200:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001204:	ea42 0104 	orr.w	r1, r2, r4
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	432b      	orrs	r3, r5
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001212:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for (uint32_t b = 0U; b < chunk; ++b) {
 8001216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001218:	3301      	adds	r3, #1
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800121c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	429a      	cmp	r2, r3
 8001222:	d3d3      	bcc.n	80011cc <execute_mem_write+0x56>
        }
        /* pad remaining bytes with 0xFF if needed */
        for (uint32_t b = chunk; b < 8U; ++b) {
 8001224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001228:	e024      	b.n	8001274 <execute_mem_write+0xfe>
            data64 |= ((uint64_t)0xFFU) << (8U * b);
 800122a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800122c:	00d8      	lsls	r0, r3, #3
 800122e:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	f1a0 0620 	sub.w	r6, r0, #32
 800123a:	f1c0 0120 	rsb	r1, r0, #32
 800123e:	fa03 f900 	lsl.w	r9, r3, r0
 8001242:	fa02 f606 	lsl.w	r6, r2, r6
 8001246:	ea49 0906 	orr.w	r9, r9, r6
 800124a:	fa22 f101 	lsr.w	r1, r2, r1
 800124e:	ea49 0901 	orr.w	r9, r9, r1
 8001252:	fa02 f800 	lsl.w	r8, r2, r0
 8001256:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800125a:	ea42 0108 	orr.w	r1, r2, r8
 800125e:	6039      	str	r1, [r7, #0]
 8001260:	ea43 0309 	orr.w	r3, r3, r9
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800126a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for (uint32_t b = chunk; b < 8U; ++b) {
 800126e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001270:	3301      	adds	r3, #1
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001276:	2b07      	cmp	r3, #7
 8001278:	d9d7      	bls.n	800122a <execute_mem_write+0xb4>
        }

        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, mem_address + offset, data64);
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800127e:	18d1      	adds	r1, r2, r3
 8001280:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001284:	2000      	movs	r0, #0
 8001286:	f000 fd97 	bl	8001db8 <HAL_FLASH_Program>
 800128a:	4603      	mov	r3, r0
 800128c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (status != HAL_OK) break;
 8001290:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001294:	2b00      	cmp	r3, #0
 8001296:	d107      	bne.n	80012a8 <execute_mem_write+0x132>
    for (uint32_t offset = 0; offset < len; offset += 8U) {
 8001298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800129a:	3308      	adds	r3, #8
 800129c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800129e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d382      	bcc.n	80011ac <execute_mem_write+0x36>
 80012a6:	e000      	b.n	80012aa <execute_mem_write+0x134>
        if (status != HAL_OK) break;
 80012a8:	bf00      	nop
    }

    HAL_FLASH_Lock();
 80012aa:	f000 fe13 	bl	8001ed4 <HAL_FLASH_Lock>
    return (uint8_t)status; /* 0 = HAL_OK */
 80012ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3744      	adds	r7, #68	@ 0x44
 80012b6:	46bd      	mov	sp, r7
 80012b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080012bc <handle_firmware_update>:
	/*TODO: Add CRC verification for the received function*/
	return available_version;
}

uint8_t handle_firmware_update(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
	/* Find the inactive bank address and corresponding page numbers*/
	uint64_t inactive_bank_adress = (active_bank_number == FLASH_ACTIVE_BANK1) ? FLASH_FIRMWARE2 : FLASH_FIRMWARE1;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	@ (800132c <handle_firmware_update+0x70>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d103      	bne.n	80012d2 <handle_firmware_update+0x16>
 80012ca:	4a19      	ldr	r2, [pc, #100]	@ (8001330 <handle_firmware_update+0x74>)
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	e002      	b.n	80012d8 <handle_firmware_update+0x1c>
 80012d2:	4a18      	ldr	r2, [pc, #96]	@ (8001334 <handle_firmware_update+0x78>)
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t active_page_number = (active_bank_number == FLASH_ACTIVE_BANK1) ? 16 : 256;
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <handle_firmware_update+0x70>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <handle_firmware_update+0x2c>
 80012e4:	2310      	movs	r3, #16
 80012e6:	e001      	b.n	80012ec <handle_firmware_update+0x30>
 80012e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012ec:	607b      	str	r3, [r7, #4]

	uint8_t update_request = BL_FW_UPDATE_REQUIRED;
 80012ee:	2388      	movs	r3, #136	@ 0x88
 80012f0:	707b      	strb	r3, [r7, #1]
	bootloader_uart_write_data(&update_request, 1);
 80012f2:	1c7b      	adds	r3, r7, #1
 80012f4:	2101      	movs	r1, #1
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fe8e 	bl	8001018 <bootloader_uart_write_data>

	/* Get the length and check if new firmware fit into the banks, <= 480KB (in terms of words) TODO: Add size check, verification, roll back, other features*/
	// uint8_t write_status = 0x00;
	uint8_t payload_len = bl_rx_buffer[6];
 80012fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <handle_firmware_update+0x7c>)
 80012fe:	799b      	ldrb	r3, [r3, #6]
 8001300:	70fb      	strb	r3, [r7, #3]

	/* Erase the Inactive bank */
	execute_flash_erase(active_page_number , 240); /* TODO: Check flash erase logic*/
 8001302:	21f0      	movs	r1, #240	@ 0xf0
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fef7 	bl	80010f8 <execute_flash_erase>

	/* Download onto Inactive bank */
	execute_mem_write(&bl_rx_buffer[7], inactive_bank_adress, payload_len);
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	78fa      	ldrb	r2, [r7, #3]
 800130e:	4619      	mov	r1, r3
 8001310:	480a      	ldr	r0, [pc, #40]	@ (800133c <handle_firmware_update+0x80>)
 8001312:	f7ff ff30 	bl	8001176 <execute_mem_write>

	/*Update the active bank number in FLASH */
	uint8_t num_status = update_active_bank_number(inactive_bank_adress);
 8001316:	7a3b      	ldrb	r3, [r7, #8]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f81b 	bl	8001354 <update_active_bank_number>
 800131e:	4603      	mov	r3, r0
 8001320:	70bb      	strb	r3, [r7, #2]

	return num_status;
 8001322:	78bb      	ldrb	r3, [r7, #2]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200002a0 	.word	0x200002a0
 8001330:	08080000 	.word	0x08080000
 8001334:	08008000 	.word	0x08008000
 8001338:	200001d8 	.word	0x200001d8
 800133c:	200001df 	.word	0x200001df

08001340 <bootloader_show_active_bank>:

void bootloader_show_active_bank(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	/* Variable to store the active firmware bank number - To be preserved even after powering off
	 * One method: one dedicated page (2KB) in FLASH for configuration data - meta-data*/
	bootloader_uart_write_data((uint8_t*)&active_bank_number, 1);
 8001344:	2101      	movs	r1, #1
 8001346:	4802      	ldr	r0, [pc, #8]	@ (8001350 <bootloader_show_active_bank+0x10>)
 8001348:	f7ff fe66 	bl	8001018 <bootloader_uart_write_data>
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200002a0 	.word	0x200002a0

08001354 <update_active_bank_number>:

uint8_t update_active_bank_number(uint8_t active_bank)
{
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]

	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t pageError;
	HAL_StatusTypeDef status;

	HAL_FLASH_Unlock();
 800135e:	f000 fd97 	bl	8001e90 <HAL_FLASH_Unlock>

	flashErase_handle.Banks = FLASH_BANK_2;
 8001362:	2302      	movs	r3, #2
 8001364:	613b      	str	r3, [r7, #16]
	flashErase_handle.NbPages = 1;
 8001366:	2301      	movs	r3, #1
 8001368:	61bb      	str	r3, [r7, #24]
	flashErase_handle.Page = FLASH_METADATA_PAGE;
 800136a:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800136e:	617b      	str	r3, [r7, #20]
	flashErase_handle.TypeErase = FLASH_TYPEERASE_PAGES;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]

	status = HAL_FLASHEx_Erase(&flashErase_handle, &pageError);
 8001374:	f107 0208 	add.w	r2, r7, #8
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fe6a 	bl	8002058 <HAL_FLASHEx_Erase>
 8001384:	4603      	mov	r3, r0
 8001386:	77fb      	strb	r3, [r7, #31]
	if (status == HAL_ERROR) return HAL_ERROR;
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <update_active_bank_number+0x3e>
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <update_active_bank_number+0x5c>

	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_METADATA_BASEADDR, (uint64_t)active_bank);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2200      	movs	r2, #0
 8001396:	461c      	mov	r4, r3
 8001398:	4615      	mov	r5, r2
 800139a:	4622      	mov	r2, r4
 800139c:	462b      	mov	r3, r5
 800139e:	4906      	ldr	r1, [pc, #24]	@ (80013b8 <update_active_bank_number+0x64>)
 80013a0:	2000      	movs	r0, #0
 80013a2:	f000 fd09 	bl	8001db8 <HAL_FLASH_Program>
 80013a6:	4603      	mov	r3, r0
 80013a8:	77fb      	strb	r3, [r7, #31]

	HAL_FLASH_Lock();
 80013aa:	f000 fd93 	bl	8001ed4 <HAL_FLASH_Lock>

	return status;
 80013ae:	7ffb      	ldrb	r3, [r7, #31]

}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bdb0      	pop	{r4, r5, r7, pc}
 80013b8:	080ff800 	.word	0x080ff800

080013bc <fetch_active_bank_number>:

uint8_t fetch_active_bank_number(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
	/*Fetch the active bank details from dedicated FLASH meta data page*/
	uint64_t retrieved_data;
	retrieved_data = *(const uint64_t*) FLASH_METADATA_BASEADDR;
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <fetch_active_bank_number+0x20>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	e9c7 2300 	strd	r2, r3, [r7]

	return (uint8_t)retrieved_data;
 80013cc:	783b      	ldrb	r3, [r7, #0]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	080ff800 	.word	0x080ff800

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <Error_Handler+0x8>

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <HAL_MspInit+0x44>)
 80013f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001430 <HAL_MspInit+0x44>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <HAL_MspInit+0x44>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <HAL_MspInit+0x44>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140e:	4a08      	ldr	r2, [pc, #32]	@ (8001430 <HAL_MspInit+0x44>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001414:	6593      	str	r3, [r2, #88]	@ 0x58
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <HAL_MspInit+0x44>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000

08001434 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0a      	ldr	r2, [pc, #40]	@ (800146c <HAL_CRC_MspInit+0x38>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d10b      	bne.n	800145e <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001446:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <HAL_CRC_MspInit+0x3c>)
 8001448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800144a:	4a09      	ldr	r2, [pc, #36]	@ (8001470 <HAL_CRC_MspInit+0x3c>)
 800144c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001450:	6493      	str	r3, [r2, #72]	@ 0x48
 8001452:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <HAL_CRC_MspInit+0x3c>)
 8001454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001456:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023000 	.word	0x40023000
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b0ae      	sub	sp, #184	@ 0xb8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800148c:	f107 0318 	add.w	r3, r7, #24
 8001490:	228c      	movs	r2, #140	@ 0x8c
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f003 fc43 	bl	8004d20 <memset>
  if(huart->Instance==LPUART1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a43      	ldr	r2, [pc, #268]	@ (80015ac <HAL_UART_MspInit+0x138>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d13e      	bne.n	8001522 <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80014a4:	2320      	movs	r3, #32
 80014a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ac:	f107 0318 	add.w	r3, r7, #24
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 f8d7 	bl	8003664 <HAL_RCCEx_PeriphCLKConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014bc:	f7ff ff90 	bl	80013e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80014c0:	4b3b      	ldr	r3, [pc, #236]	@ (80015b0 <HAL_UART_MspInit+0x13c>)
 80014c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c4:	4a3a      	ldr	r2, [pc, #232]	@ (80015b0 <HAL_UART_MspInit+0x13c>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80014cc:	4b38      	ldr	r3, [pc, #224]	@ (80015b0 <HAL_UART_MspInit+0x13c>)
 80014ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d8:	4b35      	ldr	r3, [pc, #212]	@ (80015b0 <HAL_UART_MspInit+0x13c>)
 80014da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014dc:	4a34      	ldr	r2, [pc, #208]	@ (80015b0 <HAL_UART_MspInit+0x13c>)
 80014de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e4:	4b32      	ldr	r3, [pc, #200]	@ (80015b0 <HAL_UART_MspInit+0x13c>)
 80014e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80014f0:	f001 fa6a 	bl	80029c8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014f4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800150e:	2308      	movs	r3, #8
 8001510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001514:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001518:	4619      	mov	r1, r3
 800151a:	4826      	ldr	r0, [pc, #152]	@ (80015b4 <HAL_UART_MspInit+0x140>)
 800151c:	f001 f82e 	bl	800257c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001520:	e03f      	b.n	80015a2 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a24      	ldr	r2, [pc, #144]	@ (80015b8 <HAL_UART_MspInit+0x144>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d13a      	bne.n	80015a2 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001530:	2300      	movs	r3, #0
 8001532:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001534:	f107 0318 	add.w	r3, r7, #24
 8001538:	4618      	mov	r0, r3
 800153a:	f002 f893 	bl	8003664 <HAL_RCCEx_PeriphCLKConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001544:	f7ff ff4c 	bl	80013e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001548:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <HAL_UART_MspInit+0x13c>)
 800154a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154c:	4a18      	ldr	r2, [pc, #96]	@ (80015b0 <HAL_UART_MspInit+0x13c>)
 800154e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001552:	6593      	str	r3, [r2, #88]	@ 0x58
 8001554:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <HAL_UART_MspInit+0x13c>)
 8001556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <HAL_UART_MspInit+0x13c>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001564:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <HAL_UART_MspInit+0x13c>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156c:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <HAL_UART_MspInit+0x13c>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001578:	2360      	movs	r3, #96	@ 0x60
 800157a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001590:	2307      	movs	r3, #7
 8001592:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001596:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800159a:	4619      	mov	r1, r3
 800159c:	4807      	ldr	r0, [pc, #28]	@ (80015bc <HAL_UART_MspInit+0x148>)
 800159e:	f000 ffed 	bl	800257c <HAL_GPIO_Init>
}
 80015a2:	bf00      	nop
 80015a4:	37b8      	adds	r7, #184	@ 0xb8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40008000 	.word	0x40008000
 80015b0:	40021000 	.word	0x40021000
 80015b4:	48001800 	.word	0x48001800
 80015b8:	40004400 	.word	0x40004400
 80015bc:	48000c00 	.word	0x48000c00

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <NMI_Handler+0x4>

080015c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <MemManage_Handler+0x4>

080015d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001616:	f000 f8c9 	bl	80017ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001628:	4a14      	ldr	r2, [pc, #80]	@ (800167c <_sbrk+0x5c>)
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <_sbrk+0x60>)
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001634:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <_sbrk+0x64>)
 800163e:	4a12      	ldr	r2, [pc, #72]	@ (8001688 <_sbrk+0x68>)
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	429a      	cmp	r2, r3
 800164e:	d207      	bcs.n	8001660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001650:	f003 fb6e 	bl	8004d30 <__errno>
 8001654:	4603      	mov	r3, r0
 8001656:	220c      	movs	r2, #12
 8001658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
 800165e:	e009      	b.n	8001674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001666:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	4a05      	ldr	r2, [pc, #20]	@ (8001684 <_sbrk+0x64>)
 8001670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20040000 	.word	0x20040000
 8001680:	00000400 	.word	0x00000400
 8001684:	200002a4 	.word	0x200002a4
 8001688:	200003f8 	.word	0x200003f8

0800168c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <SystemInit+0x20>)
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001696:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <SystemInit+0x20>)
 8001698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800169c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016b4:	f7ff ffea 	bl	800168c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b8:	480c      	ldr	r0, [pc, #48]	@ (80016ec <LoopForever+0x6>)
  ldr r1, =_edata
 80016ba:	490d      	ldr	r1, [pc, #52]	@ (80016f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016bc:	4a0d      	ldr	r2, [pc, #52]	@ (80016f4 <LoopForever+0xe>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c0:	e002      	b.n	80016c8 <LoopCopyDataInit>

080016c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c6:	3304      	adds	r3, #4

080016c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016cc:	d3f9      	bcc.n	80016c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ce:	4a0a      	ldr	r2, [pc, #40]	@ (80016f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d0:	4c0a      	ldr	r4, [pc, #40]	@ (80016fc <LoopForever+0x16>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d4:	e001      	b.n	80016da <LoopFillZerobss>

080016d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d8:	3204      	adds	r2, #4

080016da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016dc:	d3fb      	bcc.n	80016d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016de:	f003 fb2d 	bl	8004d3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016e2:	f7fe ff73 	bl	80005cc <main>

080016e6 <LoopForever>:

LoopForever:
    b LoopForever
 80016e6:	e7fe      	b.n	80016e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016e8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80016ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80016f4:	08005bc8 	.word	0x08005bc8
  ldr r2, =_sbss
 80016f8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80016fc:	200003f4 	.word	0x200003f4

08001700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC1_2_IRQHandler>

08001702 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 f91f 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001712:	2000      	movs	r0, #0
 8001714:	f000 f80e 	bl	8001734 <HAL_InitTick>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	71fb      	strb	r3, [r7, #7]
 8001722:	e001      	b.n	8001728 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001724:	f7ff fe62 	bl	80013ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001728:	79fb      	ldrb	r3, [r7, #7]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001740:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <HAL_InitTick+0x6c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d023      	beq.n	8001790 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <HAL_InitTick+0x70>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <HAL_InitTick+0x6c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001756:	fbb3 f3f1 	udiv	r3, r3, r1
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f91d 	bl	800199e <HAL_SYSTICK_Config>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10f      	bne.n	800178a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b0f      	cmp	r3, #15
 800176e:	d809      	bhi.n	8001784 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001770:	2200      	movs	r2, #0
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f000 f8f5 	bl	8001966 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800177c:	4a0a      	ldr	r2, [pc, #40]	@ (80017a8 <HAL_InitTick+0x74>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e007      	b.n	8001794 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	e004      	b.n	8001794 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	e001      	b.n	8001794 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000014 	.word	0x20000014
 80017a4:	2000000c 	.word	0x2000000c
 80017a8:	20000010 	.word	0x20000010

080017ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <HAL_IncTick+0x20>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_IncTick+0x24>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a04      	ldr	r2, [pc, #16]	@ (80017d0 <HAL_IncTick+0x24>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000014 	.word	0x20000014
 80017d0:	200002a8 	.word	0x200002a8

080017d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b03      	ldr	r3, [pc, #12]	@ (80017e8 <HAL_GetTick+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	200002a8 	.word	0x200002a8

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	@ (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	@ (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	@ (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	@ 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf28      	it	cs
 80018c2:	2304      	movcs	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b03      	subs	r3, #3
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	4313      	orrs	r3, r2
         );
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	@ 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f7ff ff8e 	bl	8001850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	@ (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff47 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff5c 	bl	8001834 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff8e 	bl	80018a4 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5d 	bl	8001850 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffb0 	bl	800190c <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e054      	b.n	8001a74 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7f5b      	ldrb	r3, [r3, #29]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d105      	bne.n	80019e0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff fd2a 	bl	8001434 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	791b      	ldrb	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10c      	bne.n	8001a08 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a22      	ldr	r2, [pc, #136]	@ (8001a7c <HAL_CRC_Init+0xc4>)
 80019f4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0218 	bic.w	r2, r2, #24
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	e00c      	b.n	8001a22 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6899      	ldr	r1, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	461a      	mov	r2, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f942 	bl	8001c9c <HAL_CRCEx_Polynomial_Set>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e028      	b.n	8001a74 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	795b      	ldrb	r3, [r3, #5]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d105      	bne.n	8001a36 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a32:	611a      	str	r2, [r3, #16]
 8001a34:	e004      	b.n	8001a40 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6912      	ldr	r2, [r2, #16]
 8001a3e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699a      	ldr	r2, [r3, #24]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	04c11db7 	.word	0x04c11db7

08001a80 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2202      	movs	r2, #2
 8001a94:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d006      	beq.n	8001aac <HAL_CRC_Accumulate+0x2c>
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d829      	bhi.n	8001af6 <HAL_CRC_Accumulate+0x76>
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d019      	beq.n	8001ada <HAL_CRC_Accumulate+0x5a>
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d01e      	beq.n	8001ae8 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8001aaa:	e024      	b.n	8001af6 <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	e00a      	b.n	8001ac8 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	441a      	add	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3f0      	bcc.n	8001ab2 <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	613b      	str	r3, [r7, #16]
      break;
 8001ad8:	e00e      	b.n	8001af8 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 f812 	bl	8001b08 <CRC_Handle_8>
 8001ae4:	6138      	str	r0, [r7, #16]
      break;
 8001ae6:	e007      	b.n	8001af8 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f89b 	bl	8001c28 <CRC_Handle_16>
 8001af2:	6138      	str	r0, [r7, #16]
      break;
 8001af4:	e000      	b.n	8001af8 <HAL_CRC_Accumulate+0x78>
      break;
 8001af6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2201      	movs	r2, #1
 8001afc:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001afe:	693b      	ldr	r3, [r7, #16]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	@ 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	e023      	b.n	8001b62 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	4413      	add	r3, r2
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	440b      	add	r3, r1
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b34:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	440b      	add	r3, r1
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001b44:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	3303      	adds	r3, #3
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	440b      	add	r3, r1
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001b58:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d3d6      	bcc.n	8001b1a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d04f      	beq.n	8001c16 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d107      	bne.n	8001b90 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	4413      	add	r3, r2
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d117      	bne.n	8001bca <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	b21a      	sxth	r2, r3
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	3301      	adds	r3, #1
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	440b      	add	r3, r1
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	8b7a      	ldrh	r2, [r7, #26]
 8001bc8:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d120      	bne.n	8001c16 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	4413      	add	r3, r2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	b21a      	sxth	r2, r3
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	3301      	adds	r3, #1
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	440b      	add	r3, r1
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	8b7a      	ldrh	r2, [r7, #26]
 8001c02:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3724      	adds	r7, #36	@ 0x24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	e013      	b.n	8001c62 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	4413      	add	r3, r2
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	041a      	lsls	r2, r3, #16
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	440b      	add	r3, r1
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	4619      	mov	r1, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	085b      	lsrs	r3, r3, #1
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d3e6      	bcc.n	8001c3a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	4413      	add	r3, r2
 8001c84:	881a      	ldrh	r2, [r3, #0]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001cac:	231f      	movs	r3, #31
 8001cae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	75fb      	strb	r3, [r7, #23]
 8001cbe:	e063      	b.n	8001d88 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001cc0:	bf00      	nop
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1e5a      	subs	r2, r3, #1
 8001cc6:	613a      	str	r2, [r7, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d009      	beq.n	8001ce0 <HAL_CRCEx_Polynomial_Set+0x44>
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b18      	cmp	r3, #24
 8001ce4:	d846      	bhi.n	8001d74 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cec <HAL_CRCEx_Polynomial_Set+0x50>)
 8001ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cec:	08001d7b 	.word	0x08001d7b
 8001cf0:	08001d75 	.word	0x08001d75
 8001cf4:	08001d75 	.word	0x08001d75
 8001cf8:	08001d75 	.word	0x08001d75
 8001cfc:	08001d75 	.word	0x08001d75
 8001d00:	08001d75 	.word	0x08001d75
 8001d04:	08001d75 	.word	0x08001d75
 8001d08:	08001d75 	.word	0x08001d75
 8001d0c:	08001d69 	.word	0x08001d69
 8001d10:	08001d75 	.word	0x08001d75
 8001d14:	08001d75 	.word	0x08001d75
 8001d18:	08001d75 	.word	0x08001d75
 8001d1c:	08001d75 	.word	0x08001d75
 8001d20:	08001d75 	.word	0x08001d75
 8001d24:	08001d75 	.word	0x08001d75
 8001d28:	08001d75 	.word	0x08001d75
 8001d2c:	08001d5d 	.word	0x08001d5d
 8001d30:	08001d75 	.word	0x08001d75
 8001d34:	08001d75 	.word	0x08001d75
 8001d38:	08001d75 	.word	0x08001d75
 8001d3c:	08001d75 	.word	0x08001d75
 8001d40:	08001d75 	.word	0x08001d75
 8001d44:	08001d75 	.word	0x08001d75
 8001d48:	08001d75 	.word	0x08001d75
 8001d4c:	08001d51 	.word	0x08001d51
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d913      	bls.n	8001d7e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001d5a:	e010      	b.n	8001d7e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2b07      	cmp	r3, #7
 8001d60:	d90f      	bls.n	8001d82 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001d66:	e00c      	b.n	8001d82 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2b0f      	cmp	r3, #15
 8001d6c:	d90b      	bls.n	8001d86 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001d72:	e008      	b.n	8001d86 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	75fb      	strb	r3, [r7, #23]
        break;
 8001d78:	e006      	b.n	8001d88 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001d7a:	bf00      	nop
 8001d7c:	e004      	b.n	8001d88 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001d7e:	bf00      	nop
 8001d80:	e002      	b.n	8001d88 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001d82:	bf00      	nop
 8001d84:	e000      	b.n	8001d88 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001d86:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001d88:	7dfb      	ldrb	r3, [r7, #23]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10d      	bne.n	8001daa <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 0118 	bic.w	r1, r3, #24
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	371c      	adds	r7, #28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001dca:	4b2f      	ldr	r3, [pc, #188]	@ (8001e88 <HAL_FLASH_Program+0xd0>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_FLASH_Program+0x1e>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e053      	b.n	8001e7e <HAL_FLASH_Program+0xc6>
 8001dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e88 <HAL_FLASH_Program+0xd0>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ddc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001de0:	f000 f888 	bl	8001ef4 <FLASH_WaitForLastOperation>
 8001de4:	4603      	mov	r3, r0
 8001de6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d143      	bne.n	8001e76 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001dee:	4b26      	ldr	r3, [pc, #152]	@ (8001e88 <HAL_FLASH_Program+0xd0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001df4:	4b25      	ldr	r3, [pc, #148]	@ (8001e8c <HAL_FLASH_Program+0xd4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001e00:	4b22      	ldr	r3, [pc, #136]	@ (8001e8c <HAL_FLASH_Program+0xd4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a21      	ldr	r2, [pc, #132]	@ (8001e8c <HAL_FLASH_Program+0xd4>)
 8001e06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e0a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e88 <HAL_FLASH_Program+0xd0>)
 8001e0e:	2202      	movs	r2, #2
 8001e10:	771a      	strb	r2, [r3, #28]
 8001e12:	e002      	b.n	8001e1a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001e14:	4b1c      	ldr	r3, [pc, #112]	@ (8001e88 <HAL_FLASH_Program+0xd0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d107      	bne.n	8001e30 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e24:	68b8      	ldr	r0, [r7, #8]
 8001e26:	f000 f8bb 	bl	8001fa0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	e010      	b.n	8001e52 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d002      	beq.n	8001e3c <HAL_FLASH_Program+0x84>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d10a      	bne.n	8001e52 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	68b8      	ldr	r0, [r7, #8]
 8001e42:	f000 f8d3 	bl	8001fec <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d102      	bne.n	8001e52 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001e4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001e50:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e52:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001e56:	f000 f84d 	bl	8001ef4 <FLASH_WaitForLastOperation>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_FLASH_Program+0xd4>)
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	4907      	ldr	r1, [pc, #28]	@ (8001e8c <HAL_FLASH_Program+0xd4>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001e72:	f000 fa39 	bl	80022e8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e76:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <HAL_FLASH_Program+0xd0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]

  return status;
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000018 	.word	0x20000018
 8001e8c:	40022000 	.word	0x40022000

08001e90 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <HAL_FLASH_Unlock+0x38>)
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	da0b      	bge.n	8001eba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_FLASH_Unlock+0x38>)
 8001ea4:	4a09      	ldr	r2, [pc, #36]	@ (8001ecc <HAL_FLASH_Unlock+0x3c>)
 8001ea6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ea8:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <HAL_FLASH_Unlock+0x38>)
 8001eaa:	4a09      	ldr	r2, [pc, #36]	@ (8001ed0 <HAL_FLASH_Unlock+0x40>)
 8001eac:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001eae:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_FLASH_Unlock+0x38>)
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	da01      	bge.n	8001eba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001eba:	79fb      	ldrb	r3, [r7, #7]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	40022000 	.word	0x40022000
 8001ecc:	45670123 	.word	0x45670123
 8001ed0:	cdef89ab 	.word	0xcdef89ab

08001ed4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <HAL_FLASH_Lock+0x1c>)
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <HAL_FLASH_Lock+0x1c>)
 8001ede:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001ee2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40022000 	.word	0x40022000

08001ef4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001efc:	f7ff fc6a 	bl	80017d4 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001f02:	e00d      	b.n	8001f20 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0a:	d009      	beq.n	8001f20 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001f0c:	f7ff fc62 	bl	80017d4 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d801      	bhi.n	8001f20 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e036      	b.n	8001f8e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001f20:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <FLASH_WaitForLastOperation+0xa4>)
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1eb      	bne.n	8001f04 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f98 <FLASH_WaitForLastOperation+0xa4>)
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01d      	beq.n	8001f7a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001f3e:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <FLASH_WaitForLastOperation+0xa8>)
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	4a15      	ldr	r2, [pc, #84]	@ (8001f9c <FLASH_WaitForLastOperation+0xa8>)
 8001f48:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f50:	d307      	bcc.n	8001f62 <FLASH_WaitForLastOperation+0x6e>
 8001f52:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <FLASH_WaitForLastOperation+0xa4>)
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8001f5c:	490e      	ldr	r1, [pc, #56]	@ (8001f98 <FLASH_WaitForLastOperation+0xa4>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	618b      	str	r3, [r1, #24]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <FLASH_WaitForLastOperation+0x82>
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f98 <FLASH_WaitForLastOperation+0xa4>)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001f74:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e009      	b.n	8001f8e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001f7a:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <FLASH_WaitForLastOperation+0xa4>)
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001f86:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <FLASH_WaitForLastOperation+0xa4>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40022000 	.word	0x40022000
 8001f9c:	20000018 	.word	0x20000018

08001fa0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001fac:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <FLASH_Program_DoubleWord+0x48>)
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe8 <FLASH_Program_DoubleWord+0x48>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001fbe:	f3bf 8f6f 	isb	sy
}
 8001fc2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	000a      	movs	r2, r1
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	68f9      	ldr	r1, [r7, #12]
 8001fd6:	3104      	adds	r1, #4
 8001fd8:	4613      	mov	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40022000 	.word	0x40022000

08001fec <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	@ 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8001ff6:	2340      	movs	r3, #64	@ 0x40
 8001ff8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002002:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <FLASH_Program_Fast+0x68>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	4a13      	ldr	r2, [pc, #76]	@ (8002054 <FLASH_Program_Fast+0x68>)
 8002008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800200c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800200e:	f3ef 8310 	mrs	r3, PRIMASK
 8002012:	60fb      	str	r3, [r7, #12]
  return(result);
 8002014:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002016:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002018:	b672      	cpsid	i
}
 800201a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	3304      	adds	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	3304      	adds	r3, #4
 800202e:	617b      	str	r3, [r7, #20]
    row_index--;
 8002030:	7ffb      	ldrb	r3, [r7, #31]
 8002032:	3b01      	subs	r3, #1
 8002034:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8002036:	7ffb      	ldrb	r3, [r7, #31]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1ef      	bne.n	800201c <FLASH_Program_Fast+0x30>
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f383 8810 	msr	PRIMASK, r3
}
 8002046:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8002048:	bf00      	nop
 800204a:	3724      	adds	r7, #36	@ 0x24
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40022000 	.word	0x40022000

08002058 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002062:	4b49      	ldr	r3, [pc, #292]	@ (8002188 <HAL_FLASHEx_Erase+0x130>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_FLASHEx_Erase+0x16>
 800206a:	2302      	movs	r3, #2
 800206c:	e087      	b.n	800217e <HAL_FLASHEx_Erase+0x126>
 800206e:	4b46      	ldr	r3, [pc, #280]	@ (8002188 <HAL_FLASHEx_Erase+0x130>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002074:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002078:	f7ff ff3c 	bl	8001ef4 <FLASH_WaitForLastOperation>
 800207c:	4603      	mov	r3, r0
 800207e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d177      	bne.n	8002176 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002086:	4b40      	ldr	r3, [pc, #256]	@ (8002188 <HAL_FLASHEx_Erase+0x130>)
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800208c:	4b3f      	ldr	r3, [pc, #252]	@ (800218c <HAL_FLASHEx_Erase+0x134>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002094:	2b00      	cmp	r3, #0
 8002096:	d013      	beq.n	80020c0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002098:	4b3c      	ldr	r3, [pc, #240]	@ (800218c <HAL_FLASHEx_Erase+0x134>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d009      	beq.n	80020b8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80020a4:	4b39      	ldr	r3, [pc, #228]	@ (800218c <HAL_FLASHEx_Erase+0x134>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a38      	ldr	r2, [pc, #224]	@ (800218c <HAL_FLASHEx_Erase+0x134>)
 80020aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80020ae:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80020b0:	4b35      	ldr	r3, [pc, #212]	@ (8002188 <HAL_FLASHEx_Erase+0x130>)
 80020b2:	2203      	movs	r2, #3
 80020b4:	771a      	strb	r2, [r3, #28]
 80020b6:	e016      	b.n	80020e6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80020b8:	4b33      	ldr	r3, [pc, #204]	@ (8002188 <HAL_FLASHEx_Erase+0x130>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	771a      	strb	r2, [r3, #28]
 80020be:	e012      	b.n	80020e6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80020c0:	4b32      	ldr	r3, [pc, #200]	@ (800218c <HAL_FLASHEx_Erase+0x134>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d009      	beq.n	80020e0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80020cc:	4b2f      	ldr	r3, [pc, #188]	@ (800218c <HAL_FLASHEx_Erase+0x134>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a2e      	ldr	r2, [pc, #184]	@ (800218c <HAL_FLASHEx_Erase+0x134>)
 80020d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80020d6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80020d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002188 <HAL_FLASHEx_Erase+0x130>)
 80020da:	2202      	movs	r2, #2
 80020dc:	771a      	strb	r2, [r3, #28]
 80020de:	e002      	b.n	80020e6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80020e0:	4b29      	ldr	r3, [pc, #164]	@ (8002188 <HAL_FLASHEx_Erase+0x130>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d113      	bne.n	8002116 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f89a 	bl	800222c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80020fc:	f7ff fefa 	bl	8001ef4 <FLASH_WaitForLastOperation>
 8002100:	4603      	mov	r3, r0
 8002102:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002104:	4b21      	ldr	r3, [pc, #132]	@ (800218c <HAL_FLASHEx_Erase+0x134>)
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	4a20      	ldr	r2, [pc, #128]	@ (800218c <HAL_FLASHEx_Erase+0x134>)
 800210a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800210e:	f023 0304 	bic.w	r3, r3, #4
 8002112:	6153      	str	r3, [r2, #20]
 8002114:	e02d      	b.n	8002172 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	e01d      	b.n	8002162 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4619      	mov	r1, r3
 800212c:	68b8      	ldr	r0, [r7, #8]
 800212e:	f000 f8a5 	bl	800227c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002132:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002136:	f7ff fedd 	bl	8001ef4 <FLASH_WaitForLastOperation>
 800213a:	4603      	mov	r3, r0
 800213c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800213e:	4b13      	ldr	r3, [pc, #76]	@ (800218c <HAL_FLASHEx_Erase+0x134>)
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	4a12      	ldr	r2, [pc, #72]	@ (800218c <HAL_FLASHEx_Erase+0x134>)
 8002144:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002148:	f023 0302 	bic.w	r3, r3, #2
 800214c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	601a      	str	r2, [r3, #0]
          break;
 800215a:	e00a      	b.n	8002172 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3301      	adds	r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	4413      	add	r3, r2
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	429a      	cmp	r2, r3
 8002170:	d3d9      	bcc.n	8002126 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002172:	f000 f8b9 	bl	80022e8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002176:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <HAL_FLASHEx_Erase+0x130>)
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]

  return status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000018 	.word	0x20000018
 800218c:	40022000 	.word	0x40022000

08002190 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2206      	movs	r2, #6
 800219c:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_FLASHEx_OBGetConfig+0x2e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d007      	beq.n	80021be <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d003      	beq.n	80021be <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d10f      	bne.n	80021de <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f043 0201 	orr.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6858      	ldr	r0, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f103 0108 	add.w	r1, r3, #8
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	330c      	adds	r3, #12
 80021d8:	461a      	mov	r2, r3
 80021da:	f000 f8cf 	bl	800237c <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80021de:	f000 f917 	bl	8002410 <FLASH_OB_GetRDP>
 80021e2:	4602      	mov	r2, r0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80021e8:	f000 f92c 	bl	8002444 <FLASH_OB_GetUser>
 80021ec:	4602      	mov	r2, r0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d003      	beq.n	8002202 <HAL_FLASHEx_OBGetConfig+0x72>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d110      	bne.n	8002224 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f043 0208 	orr.w	r2, r3, #8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f103 001c 	add.w	r0, r3, #28
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f103 0120 	add.w	r1, r3, #32
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3324      	adds	r3, #36	@ 0x24
 800221e:	461a      	mov	r2, r3
 8002220:	f000 f924 	bl	800246c <FLASH_OB_GetPCROP>
  }
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800223e:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <FLASH_MassErase+0x4c>)
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	4a0d      	ldr	r2, [pc, #52]	@ (8002278 <FLASH_MassErase+0x4c>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002254:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <FLASH_MassErase+0x4c>)
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	4a07      	ldr	r2, [pc, #28]	@ (8002278 <FLASH_MassErase+0x4c>)
 800225a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800225e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002260:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <FLASH_MassErase+0x4c>)
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	4a04      	ldr	r2, [pc, #16]	@ (8002278 <FLASH_MassErase+0x4c>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226a:	6153      	str	r3, [r2, #20]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	40022000 	.word	0x40022000

0800227c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002290:	4b14      	ldr	r3, [pc, #80]	@ (80022e4 <FLASH_PageErase+0x68>)
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	4a13      	ldr	r2, [pc, #76]	@ (80022e4 <FLASH_PageErase+0x68>)
 8002296:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800229a:	6153      	str	r3, [r2, #20]
 800229c:	e005      	b.n	80022aa <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800229e:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <FLASH_PageErase+0x68>)
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	4a10      	ldr	r2, [pc, #64]	@ (80022e4 <FLASH_PageErase+0x68>)
 80022a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022a8:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80022aa:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <FLASH_PageErase+0x68>)
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 80022ba:	490a      	ldr	r1, [pc, #40]	@ (80022e4 <FLASH_PageErase+0x68>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80022c0:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <FLASH_PageErase+0x68>)
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	4a07      	ldr	r2, [pc, #28]	@ (80022e4 <FLASH_PageErase+0x68>)
 80022c6:	f043 0302 	orr.w	r3, r3, #2
 80022ca:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <FLASH_PageErase+0x68>)
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	4a04      	ldr	r2, [pc, #16]	@ (80022e4 <FLASH_PageErase+0x68>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d6:	6153      	str	r3, [r2, #20]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40022000 	.word	0x40022000

080022e8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80022ee:	4b21      	ldr	r3, [pc, #132]	@ (8002374 <FLASH_FlushCaches+0x8c>)
 80022f0:	7f1b      	ldrb	r3, [r3, #28]
 80022f2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d002      	beq.n	8002300 <FLASH_FlushCaches+0x18>
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d117      	bne.n	8002330 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002300:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <FLASH_FlushCaches+0x90>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1c      	ldr	r2, [pc, #112]	@ (8002378 <FLASH_FlushCaches+0x90>)
 8002306:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800230a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800230c:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a19      	ldr	r2, [pc, #100]	@ (8002378 <FLASH_FlushCaches+0x90>)
 8002312:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a16      	ldr	r2, [pc, #88]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800231e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002322:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002324:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <FLASH_FlushCaches+0x90>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a13      	ldr	r2, [pc, #76]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800232a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800232e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d002      	beq.n	800233c <FLASH_FlushCaches+0x54>
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d111      	bne.n	8002360 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800233c:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0d      	ldr	r2, [pc, #52]	@ (8002378 <FLASH_FlushCaches+0x90>)
 8002342:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0a      	ldr	r2, [pc, #40]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800234e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002352:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002354:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <FLASH_FlushCaches+0x90>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a07      	ldr	r2, [pc, #28]	@ (8002378 <FLASH_FlushCaches+0x90>)
 800235a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800235e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002360:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <FLASH_FlushCaches+0x8c>)
 8002362:	2200      	movs	r2, #0
 8002364:	771a      	strb	r2, [r3, #28]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000018 	.word	0x20000018
 8002378:	40022000 	.word	0x40022000

0800237c <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10b      	bne.n	80023a6 <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800238e:	4b1f      	ldr	r3, [pc, #124]	@ (800240c <FLASH_OB_GetWRP+0x90>)
 8002390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002392:	b2da      	uxtb	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 8002398:	4b1c      	ldr	r3, [pc, #112]	@ (800240c <FLASH_OB_GetWRP+0x90>)
 800239a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239c:	0c1b      	lsrs	r3, r3, #16
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 80023a4:	e02b      	b.n	80023fe <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d10b      	bne.n	80023c4 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 80023ac:	4b17      	ldr	r3, [pc, #92]	@ (800240c <FLASH_OB_GetWRP+0x90>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 80023b6:	4b15      	ldr	r3, [pc, #84]	@ (800240c <FLASH_OB_GetWRP+0x90>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	0c1b      	lsrs	r3, r3, #16
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	601a      	str	r2, [r3, #0]
}
 80023c2:	e01c      	b.n	80023fe <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d10b      	bne.n	80023e2 <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 80023ca:	4b10      	ldr	r3, [pc, #64]	@ (800240c <FLASH_OB_GetWRP+0x90>)
 80023cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 80023d4:	4b0d      	ldr	r3, [pc, #52]	@ (800240c <FLASH_OB_GetWRP+0x90>)
 80023d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d8:	0c1b      	lsrs	r3, r3, #16
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	601a      	str	r2, [r3, #0]
}
 80023e0:	e00d      	b.n	80023fe <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d10a      	bne.n	80023fe <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 80023e8:	4b08      	ldr	r3, [pc, #32]	@ (800240c <FLASH_OB_GetWRP+0x90>)
 80023ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <FLASH_OB_GetWRP+0x90>)
 80023f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f6:	0c1b      	lsrs	r3, r3, #16
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40022000 	.word	0x40022000

08002410 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8002416:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <FLASH_OB_GetRDP+0x30>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2baa      	cmp	r3, #170	@ 0xaa
 8002422:	d004      	beq.n	800242e <FLASH_OB_GetRDP+0x1e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2bcc      	cmp	r3, #204	@ 0xcc
 8002428:	d001      	beq.n	800242e <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800242a:	23bb      	movs	r3, #187	@ 0xbb
 800242c:	e002      	b.n	8002434 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 800242e:	4b04      	ldr	r3, [pc, #16]	@ (8002440 <FLASH_OB_GetRDP+0x30>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	b2db      	uxtb	r3, r3
  }
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40022000 	.word	0x40022000

08002444 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800244a:	4b07      	ldr	r3, [pc, #28]	@ (8002468 <FLASH_OB_GetUser+0x24>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002456:	607b      	str	r3, [r7, #4]

  return user_config;
 8002458:	687b      	ldr	r3, [r7, #4]
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40022000 	.word	0x40022000

0800246c <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	@ 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8002478:	4b3b      	ldr	r3, [pc, #236]	@ (8002568 <FLASH_OB_GetPCROP+0xfc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d115      	bne.n	80024b0 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 8002484:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002488:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800248a:	4b38      	ldr	r3, [pc, #224]	@ (800256c <FLASH_OB_GetPCROP+0x100>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002494:	4293      	cmp	r3, r2
 8002496:	d008      	beq.n	80024aa <FLASH_OB_GetPCROP+0x3e>
 8002498:	4b34      	ldr	r3, [pc, #208]	@ (800256c <FLASH_OB_GetPCROP+0x100>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	029b      	lsls	r3, r3, #10
 800249e:	085a      	lsrs	r2, r3, #1
 80024a0:	4b33      	ldr	r3, [pc, #204]	@ (8002570 <FLASH_OB_GetPCROP+0x104>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80024a8:	e000      	b.n	80024ac <FLASH_OB_GetPCROP+0x40>
 80024aa:	4b32      	ldr	r3, [pc, #200]	@ (8002574 <FLASH_OB_GetPCROP+0x108>)
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	e014      	b.n	80024da <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80024b0:	4b2e      	ldr	r3, [pc, #184]	@ (800256c <FLASH_OB_GetPCROP+0x100>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d008      	beq.n	80024d0 <FLASH_OB_GetPCROP+0x64>
 80024be:	4b2b      	ldr	r3, [pc, #172]	@ (800256c <FLASH_OB_GetPCROP+0x100>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	029b      	lsls	r3, r3, #10
 80024c4:	085a      	lsrs	r2, r3, #1
 80024c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002570 <FLASH_OB_GetPCROP+0x104>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80024ce:	e000      	b.n	80024d2 <FLASH_OB_GetPCROP+0x66>
 80024d0:	4b28      	ldr	r3, [pc, #160]	@ (8002574 <FLASH_OB_GetPCROP+0x108>)
 80024d2:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 80024d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80024d8:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d115      	bne.n	8002512 <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 80024e6:	4b24      	ldr	r3, [pc, #144]	@ (8002578 <FLASH_OB_GetPCROP+0x10c>)
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	00da      	lsls	r2, r3, #3
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	441a      	add	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 80024fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002578 <FLASH_OB_GetPCROP+0x10c>)
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	b29b      	uxth	r3, r3
 8002500:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	00da      	lsls	r2, r3, #3
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	4413      	add	r3, r2
 800250a:	1dda      	adds	r2, r3, #7
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	e01a      	b.n	8002548 <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d114      	bne.n	8002548 <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 800251e:	4b16      	ldr	r3, [pc, #88]	@ (8002578 <FLASH_OB_GetPCROP+0x10c>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	b29b      	uxth	r3, r3
 8002524:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	00da      	lsls	r2, r3, #3
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	441a      	add	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8002532:	4b11      	ldr	r3, [pc, #68]	@ (8002578 <FLASH_OB_GetPCROP+0x10c>)
 8002534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002536:	b29b      	uxth	r3, r3
 8002538:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	00da      	lsls	r2, r3, #3
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4413      	add	r3, r2
 8002542:	1dda      	adds	r2, r3, #7
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 8002548:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <FLASH_OB_GetPCROP+0x10c>)
 800254a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	431a      	orrs	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	601a      	str	r2, [r3, #0]
}
 800255a:	bf00      	nop
 800255c:	3724      	adds	r7, #36	@ 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40010000 	.word	0x40010000
 800256c:	1fff75e0 	.word	0x1fff75e0
 8002570:	01fffe00 	.word	0x01fffe00
 8002574:	08080000 	.word	0x08080000
 8002578:	40022000 	.word	0x40022000

0800257c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258a:	e166      	b.n	800285a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2101      	movs	r1, #1
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	4013      	ands	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8158 	beq.w	8002854 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d005      	beq.n	80025bc <HAL_GPIO_Init+0x40>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d130      	bne.n	800261e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025f2:	2201      	movs	r2, #1
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	f003 0201 	and.w	r2, r3, #1
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b03      	cmp	r3, #3
 8002628:	d017      	beq.n	800265a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	2203      	movs	r2, #3
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d123      	bne.n	80026ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	08da      	lsrs	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3208      	adds	r2, #8
 800266e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002672:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	08da      	lsrs	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3208      	adds	r2, #8
 80026a8:	6939      	ldr	r1, [r7, #16]
 80026aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	2203      	movs	r2, #3
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0203 	and.w	r2, r3, #3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 80b2 	beq.w	8002854 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f0:	4b61      	ldr	r3, [pc, #388]	@ (8002878 <HAL_GPIO_Init+0x2fc>)
 80026f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f4:	4a60      	ldr	r2, [pc, #384]	@ (8002878 <HAL_GPIO_Init+0x2fc>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80026fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002878 <HAL_GPIO_Init+0x2fc>)
 80026fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002708:	4a5c      	ldr	r2, [pc, #368]	@ (800287c <HAL_GPIO_Init+0x300>)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	3302      	adds	r3, #2
 8002710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	220f      	movs	r2, #15
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002732:	d02b      	beq.n	800278c <HAL_GPIO_Init+0x210>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a52      	ldr	r2, [pc, #328]	@ (8002880 <HAL_GPIO_Init+0x304>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d025      	beq.n	8002788 <HAL_GPIO_Init+0x20c>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a51      	ldr	r2, [pc, #324]	@ (8002884 <HAL_GPIO_Init+0x308>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d01f      	beq.n	8002784 <HAL_GPIO_Init+0x208>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a50      	ldr	r2, [pc, #320]	@ (8002888 <HAL_GPIO_Init+0x30c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d019      	beq.n	8002780 <HAL_GPIO_Init+0x204>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a4f      	ldr	r2, [pc, #316]	@ (800288c <HAL_GPIO_Init+0x310>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d013      	beq.n	800277c <HAL_GPIO_Init+0x200>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a4e      	ldr	r2, [pc, #312]	@ (8002890 <HAL_GPIO_Init+0x314>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00d      	beq.n	8002778 <HAL_GPIO_Init+0x1fc>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a4d      	ldr	r2, [pc, #308]	@ (8002894 <HAL_GPIO_Init+0x318>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d007      	beq.n	8002774 <HAL_GPIO_Init+0x1f8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a4c      	ldr	r2, [pc, #304]	@ (8002898 <HAL_GPIO_Init+0x31c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d101      	bne.n	8002770 <HAL_GPIO_Init+0x1f4>
 800276c:	2307      	movs	r3, #7
 800276e:	e00e      	b.n	800278e <HAL_GPIO_Init+0x212>
 8002770:	2308      	movs	r3, #8
 8002772:	e00c      	b.n	800278e <HAL_GPIO_Init+0x212>
 8002774:	2306      	movs	r3, #6
 8002776:	e00a      	b.n	800278e <HAL_GPIO_Init+0x212>
 8002778:	2305      	movs	r3, #5
 800277a:	e008      	b.n	800278e <HAL_GPIO_Init+0x212>
 800277c:	2304      	movs	r3, #4
 800277e:	e006      	b.n	800278e <HAL_GPIO_Init+0x212>
 8002780:	2303      	movs	r3, #3
 8002782:	e004      	b.n	800278e <HAL_GPIO_Init+0x212>
 8002784:	2302      	movs	r3, #2
 8002786:	e002      	b.n	800278e <HAL_GPIO_Init+0x212>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <HAL_GPIO_Init+0x212>
 800278c:	2300      	movs	r3, #0
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	f002 0203 	and.w	r2, r2, #3
 8002794:	0092      	lsls	r2, r2, #2
 8002796:	4093      	lsls	r3, r2
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800279e:	4937      	ldr	r1, [pc, #220]	@ (800287c <HAL_GPIO_Init+0x300>)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	3302      	adds	r3, #2
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027ac:	4b3b      	ldr	r3, [pc, #236]	@ (800289c <HAL_GPIO_Init+0x320>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027d0:	4a32      	ldr	r2, [pc, #200]	@ (800289c <HAL_GPIO_Init+0x320>)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027d6:	4b31      	ldr	r3, [pc, #196]	@ (800289c <HAL_GPIO_Init+0x320>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	43db      	mvns	r3, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027fa:	4a28      	ldr	r2, [pc, #160]	@ (800289c <HAL_GPIO_Init+0x320>)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002800:	4b26      	ldr	r3, [pc, #152]	@ (800289c <HAL_GPIO_Init+0x320>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	43db      	mvns	r3, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002824:	4a1d      	ldr	r2, [pc, #116]	@ (800289c <HAL_GPIO_Init+0x320>)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800282a:	4b1c      	ldr	r3, [pc, #112]	@ (800289c <HAL_GPIO_Init+0x320>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800284e:	4a13      	ldr	r2, [pc, #76]	@ (800289c <HAL_GPIO_Init+0x320>)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	3301      	adds	r3, #1
 8002858:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	f47f ae91 	bne.w	800258c <HAL_GPIO_Init+0x10>
  }
}
 800286a:	bf00      	nop
 800286c:	bf00      	nop
 800286e:	371c      	adds	r7, #28
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	40021000 	.word	0x40021000
 800287c:	40010000 	.word	0x40010000
 8002880:	48000400 	.word	0x48000400
 8002884:	48000800 	.word	0x48000800
 8002888:	48000c00 	.word	0x48000c00
 800288c:	48001000 	.word	0x48001000
 8002890:	48001400 	.word	0x48001400
 8002894:	48001800 	.word	0x48001800
 8002898:	48001c00 	.word	0x48001c00
 800289c:	40010400 	.word	0x40010400

080028a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e001      	b.n	80028c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
 80028dc:	4613      	mov	r3, r2
 80028de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e0:	787b      	ldrb	r3, [r7, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028ec:	e002      	b.n	80028f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002904:	4b04      	ldr	r3, [pc, #16]	@ (8002918 <HAL_PWREx_GetVoltageRange+0x18>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40007000 	.word	0x40007000

0800291c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800292a:	d130      	bne.n	800298e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800292c:	4b23      	ldr	r3, [pc, #140]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002938:	d038      	beq.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800293a:	4b20      	ldr	r3, [pc, #128]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002942:	4a1e      	ldr	r2, [pc, #120]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002944:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002948:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800294a:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2232      	movs	r2, #50	@ 0x32
 8002950:	fb02 f303 	mul.w	r3, r2, r3
 8002954:	4a1b      	ldr	r2, [pc, #108]	@ (80029c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0c9b      	lsrs	r3, r3, #18
 800295c:	3301      	adds	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002960:	e002      	b.n	8002968 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3b01      	subs	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002968:	4b14      	ldr	r3, [pc, #80]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002974:	d102      	bne.n	800297c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f2      	bne.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800297c:	4b0f      	ldr	r3, [pc, #60]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002988:	d110      	bne.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e00f      	b.n	80029ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800298e:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299a:	d007      	beq.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800299c:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029a4:	4a05      	ldr	r2, [pc, #20]	@ (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40007000 	.word	0x40007000
 80029c0:	2000000c 	.word	0x2000000c
 80029c4:	431bde83 	.word	0x431bde83

080029c8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80029cc:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4a04      	ldr	r2, [pc, #16]	@ (80029e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80029d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029d6:	6053      	str	r3, [r2, #4]
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40007000 	.word	0x40007000

080029e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f000 bc08 	b.w	800320c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fc:	4b96      	ldr	r3, [pc, #600]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a06:	4b94      	ldr	r3, [pc, #592]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80e4 	beq.w	8002be6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4c>
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	f040 808b 	bne.w	8002b42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	f040 8087 	bne.w	8002b42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a34:	4b88      	ldr	r3, [pc, #544]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_OscConfig+0x64>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e3df      	b.n	800320c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1a      	ldr	r2, [r3, #32]
 8002a50:	4b81      	ldr	r3, [pc, #516]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d004      	beq.n	8002a66 <HAL_RCC_OscConfig+0x7e>
 8002a5c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a64:	e005      	b.n	8002a72 <HAL_RCC_OscConfig+0x8a>
 8002a66:	4b7c      	ldr	r3, [pc, #496]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d223      	bcs.n	8002abe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fd92 	bl	80035a4 <RCC_SetFlashLatencyFromMSIRange>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e3c0      	b.n	800320c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a8a:	4b73      	ldr	r3, [pc, #460]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a72      	ldr	r2, [pc, #456]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a90:	f043 0308 	orr.w	r3, r3, #8
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b70      	ldr	r3, [pc, #448]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	496d      	ldr	r1, [pc, #436]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa8:	4b6b      	ldr	r3, [pc, #428]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	4968      	ldr	r1, [pc, #416]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
 8002abc:	e025      	b.n	8002b0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002abe:	4b66      	ldr	r3, [pc, #408]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a65      	ldr	r2, [pc, #404]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002ac4:	f043 0308 	orr.w	r3, r3, #8
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b63      	ldr	r3, [pc, #396]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	4960      	ldr	r1, [pc, #384]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002adc:	4b5e      	ldr	r3, [pc, #376]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	495b      	ldr	r1, [pc, #364]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fd52 	bl	80035a4 <RCC_SetFlashLatencyFromMSIRange>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e380      	b.n	800320c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b0a:	f000 fc87 	bl	800341c <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b51      	ldr	r3, [pc, #324]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	4950      	ldr	r1, [pc, #320]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	4a4e      	ldr	r2, [pc, #312]	@ (8002c60 <HAL_RCC_OscConfig+0x278>)
 8002b28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c64 <HAL_RCC_OscConfig+0x27c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fe00 	bl	8001734 <HAL_InitTick>
 8002b34:	4603      	mov	r3, r0
 8002b36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d052      	beq.n	8002be4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	e364      	b.n	800320c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d032      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b4a:	4b43      	ldr	r3, [pc, #268]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a42      	ldr	r2, [pc, #264]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b56:	f7fe fe3d 	bl	80017d4 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b5e:	f7fe fe39 	bl	80017d4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e34d      	b.n	800320c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b70:	4b39      	ldr	r3, [pc, #228]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b7c:	4b36      	ldr	r3, [pc, #216]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a35      	ldr	r2, [pc, #212]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b82:	f043 0308 	orr.w	r3, r3, #8
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b33      	ldr	r3, [pc, #204]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	4930      	ldr	r1, [pc, #192]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	492b      	ldr	r1, [pc, #172]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
 8002bae:	e01a      	b.n	8002be6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bb0:	4b29      	ldr	r3, [pc, #164]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a28      	ldr	r2, [pc, #160]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fe0a 	bl	80017d4 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bc4:	f7fe fe06 	bl	80017d4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e31a      	b.n	800320c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bd6:	4b20      	ldr	r3, [pc, #128]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x1dc>
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002be4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d073      	beq.n	8002cda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_OscConfig+0x21c>
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d10e      	bne.n	8002c1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d10b      	bne.n	8002c1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c04:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d063      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x2f0>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d15f      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e2f7      	b.n	800320c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c24:	d106      	bne.n	8002c34 <HAL_RCC_OscConfig+0x24c>
 8002c26:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e025      	b.n	8002c80 <HAL_RCC_OscConfig+0x298>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c3c:	d114      	bne.n	8002c68 <HAL_RCC_OscConfig+0x280>
 8002c3e:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a05      	ldr	r2, [pc, #20]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b03      	ldr	r3, [pc, #12]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a02      	ldr	r2, [pc, #8]	@ (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e013      	b.n	8002c80 <HAL_RCC_OscConfig+0x298>
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	08005b3c 	.word	0x08005b3c
 8002c60:	2000000c 	.word	0x2000000c
 8002c64:	20000010 	.word	0x20000010
 8002c68:	4ba0      	ldr	r3, [pc, #640]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a9f      	ldr	r2, [pc, #636]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b9d      	ldr	r3, [pc, #628]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a9c      	ldr	r2, [pc, #624]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fda4 	bl	80017d4 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe fda0 	bl	80017d4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	@ 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e2b4      	b.n	800320c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca2:	4b92      	ldr	r3, [pc, #584]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x2a8>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fd90 	bl	80017d4 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fd8c 	bl	80017d4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	@ 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e2a0      	b.n	800320c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cca:	4b88      	ldr	r3, [pc, #544]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x2d0>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d060      	beq.n	8002da8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x310>
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	d119      	bne.n	8002d26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d116      	bne.n	8002d26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cf8:	4b7c      	ldr	r3, [pc, #496]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_OscConfig+0x328>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e27d      	b.n	800320c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d10:	4b76      	ldr	r3, [pc, #472]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	061b      	lsls	r3, r3, #24
 8002d1e:	4973      	ldr	r1, [pc, #460]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d24:	e040      	b.n	8002da8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d023      	beq.n	8002d76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2e:	4b6f      	ldr	r3, [pc, #444]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6e      	ldr	r2, [pc, #440]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fe fd4b 	bl	80017d4 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d42:	f7fe fd47 	bl	80017d4 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e25b      	b.n	800320c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d54:	4b65      	ldr	r3, [pc, #404]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d60:	4b62      	ldr	r3, [pc, #392]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	061b      	lsls	r3, r3, #24
 8002d6e:	495f      	ldr	r1, [pc, #380]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
 8002d74:	e018      	b.n	8002da8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d76:	4b5d      	ldr	r3, [pc, #372]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a5c      	ldr	r2, [pc, #368]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7fe fd27 	bl	80017d4 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8a:	f7fe fd23 	bl	80017d4 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e237      	b.n	800320c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d9c:	4b53      	ldr	r3, [pc, #332]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f0      	bne.n	8002d8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d03c      	beq.n	8002e2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01c      	beq.n	8002df6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dc2:	4a4a      	ldr	r2, [pc, #296]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fd02 	bl	80017d4 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd4:	f7fe fcfe 	bl	80017d4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e212      	b.n	800320c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de6:	4b41      	ldr	r3, [pc, #260]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ef      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x3ec>
 8002df4:	e01b      	b.n	8002e2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df6:	4b3d      	ldr	r3, [pc, #244]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dfc:	4a3b      	ldr	r2, [pc, #236]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e06:	f7fe fce5 	bl	80017d4 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7fe fce1 	bl	80017d4 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e1f5      	b.n	800320c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e20:	4b32      	ldr	r3, [pc, #200]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1ef      	bne.n	8002e0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80a6 	beq.w	8002f88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e40:	4b2a      	ldr	r3, [pc, #168]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10d      	bne.n	8002e68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4c:	4b27      	ldr	r3, [pc, #156]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e50:	4a26      	ldr	r2, [pc, #152]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e58:	4b24      	ldr	r3, [pc, #144]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e64:	2301      	movs	r3, #1
 8002e66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e68:	4b21      	ldr	r3, [pc, #132]	@ (8002ef0 <HAL_RCC_OscConfig+0x508>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d118      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e74:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef0 <HAL_RCC_OscConfig+0x508>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef0 <HAL_RCC_OscConfig+0x508>)
 8002e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e80:	f7fe fca8 	bl	80017d4 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e88:	f7fe fca4 	bl	80017d4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1b8      	b.n	800320c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <HAL_RCC_OscConfig+0x508>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d108      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x4d8>
 8002eae:	4b0f      	ldr	r3, [pc, #60]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ebe:	e029      	b.n	8002f14 <HAL_RCC_OscConfig+0x52c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d115      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x50c>
 8002ec8:	4b08      	ldr	r3, [pc, #32]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ece:	4a07      	ldr	r2, [pc, #28]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002ed0:	f043 0304 	orr.w	r3, r3, #4
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ed8:	4b04      	ldr	r3, [pc, #16]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ede:	4a03      	ldr	r2, [pc, #12]	@ (8002eec <HAL_RCC_OscConfig+0x504>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ee8:	e014      	b.n	8002f14 <HAL_RCC_OscConfig+0x52c>
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	4b9d      	ldr	r3, [pc, #628]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efa:	4a9c      	ldr	r2, [pc, #624]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f04:	4b99      	ldr	r3, [pc, #612]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0a:	4a98      	ldr	r2, [pc, #608]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d016      	beq.n	8002f4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe fc5a 	bl	80017d4 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f24:	f7fe fc56 	bl	80017d4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e168      	b.n	800320c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3a:	4b8c      	ldr	r3, [pc, #560]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0ed      	beq.n	8002f24 <HAL_RCC_OscConfig+0x53c>
 8002f48:	e015      	b.n	8002f76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fc43 	bl	80017d4 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fe fc3f 	bl	80017d4 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e151      	b.n	800320c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f68:	4b80      	ldr	r3, [pc, #512]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1ed      	bne.n	8002f52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d105      	bne.n	8002f88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7c:	4b7b      	ldr	r3, [pc, #492]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f80:	4a7a      	ldr	r2, [pc, #488]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8002f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f86:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d03c      	beq.n	800300e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f9c:	4b73      	ldr	r3, [pc, #460]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8002f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fa2:	4a72      	ldr	r2, [pc, #456]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fe fc12 	bl	80017d4 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fb4:	f7fe fc0e 	bl	80017d4 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e122      	b.n	800320c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fc6:	4b69      	ldr	r3, [pc, #420]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8002fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ef      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x5cc>
 8002fd4:	e01b      	b.n	800300e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fd6:	4b65      	ldr	r3, [pc, #404]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8002fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fdc:	4a63      	ldr	r2, [pc, #396]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe6:	f7fe fbf5 	bl	80017d4 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fee:	f7fe fbf1 	bl	80017d4 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e105      	b.n	800320c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003000:	4b5a      	ldr	r3, [pc, #360]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8003002:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1ef      	bne.n	8002fee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80f9 	beq.w	800320a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301c:	2b02      	cmp	r3, #2
 800301e:	f040 80cf 	bne.w	80031c0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003022:	4b52      	ldr	r3, [pc, #328]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f003 0203 	and.w	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003032:	429a      	cmp	r2, r3
 8003034:	d12c      	bne.n	8003090 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	3b01      	subs	r3, #1
 8003042:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d123      	bne.n	8003090 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003052:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d11b      	bne.n	8003090 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003062:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d113      	bne.n	8003090 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	3b01      	subs	r3, #1
 8003076:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d109      	bne.n	8003090 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	3b01      	subs	r3, #1
 800308a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d071      	beq.n	8003174 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d068      	beq.n	8003168 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003096:	4b35      	ldr	r3, [pc, #212]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d105      	bne.n	80030ae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030a2:	4b32      	ldr	r3, [pc, #200]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e0ac      	b.n	800320c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030b2:	4b2e      	ldr	r3, [pc, #184]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a2d      	ldr	r2, [pc, #180]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 80030b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030be:	f7fe fb89 	bl	80017d4 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c6:	f7fe fb85 	bl	80017d4 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e099      	b.n	800320c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d8:	4b24      	ldr	r3, [pc, #144]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f0      	bne.n	80030c6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e4:	4b21      	ldr	r3, [pc, #132]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	4b21      	ldr	r3, [pc, #132]	@ (8003170 <HAL_RCC_OscConfig+0x788>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030f4:	3a01      	subs	r2, #1
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	4311      	orrs	r1, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030fe:	0212      	lsls	r2, r2, #8
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003106:	0852      	lsrs	r2, r2, #1
 8003108:	3a01      	subs	r2, #1
 800310a:	0552      	lsls	r2, r2, #21
 800310c:	4311      	orrs	r1, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003112:	0852      	lsrs	r2, r2, #1
 8003114:	3a01      	subs	r2, #1
 8003116:	0652      	lsls	r2, r2, #25
 8003118:	4311      	orrs	r1, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800311e:	06d2      	lsls	r2, r2, #27
 8003120:	430a      	orrs	r2, r1
 8003122:	4912      	ldr	r1, [pc, #72]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8003124:	4313      	orrs	r3, r2
 8003126:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003128:	4b10      	ldr	r3, [pc, #64]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0f      	ldr	r2, [pc, #60]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 800312e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003132:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003134:	4b0d      	ldr	r3, [pc, #52]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a0c      	ldr	r2, [pc, #48]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 800313a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800313e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003140:	f7fe fb48 	bl	80017d4 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe fb44 	bl	80017d4 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e058      	b.n	800320c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315a:	4b04      	ldr	r3, [pc, #16]	@ (800316c <HAL_RCC_OscConfig+0x784>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003166:	e050      	b.n	800320a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e04f      	b.n	800320c <HAL_RCC_OscConfig+0x824>
 800316c:	40021000 	.word	0x40021000
 8003170:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003174:	4b27      	ldr	r3, [pc, #156]	@ (8003214 <HAL_RCC_OscConfig+0x82c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d144      	bne.n	800320a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003180:	4b24      	ldr	r3, [pc, #144]	@ (8003214 <HAL_RCC_OscConfig+0x82c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a23      	ldr	r2, [pc, #140]	@ (8003214 <HAL_RCC_OscConfig+0x82c>)
 8003186:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800318a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800318c:	4b21      	ldr	r3, [pc, #132]	@ (8003214 <HAL_RCC_OscConfig+0x82c>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a20      	ldr	r2, [pc, #128]	@ (8003214 <HAL_RCC_OscConfig+0x82c>)
 8003192:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003196:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003198:	f7fe fb1c 	bl	80017d4 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe fb18 	bl	80017d4 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e02c      	b.n	800320c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b2:	4b18      	ldr	r3, [pc, #96]	@ (8003214 <HAL_RCC_OscConfig+0x82c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0x7b8>
 80031be:	e024      	b.n	800320a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2b0c      	cmp	r3, #12
 80031c4:	d01f      	beq.n	8003206 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c6:	4b13      	ldr	r3, [pc, #76]	@ (8003214 <HAL_RCC_OscConfig+0x82c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a12      	ldr	r2, [pc, #72]	@ (8003214 <HAL_RCC_OscConfig+0x82c>)
 80031cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d2:	f7fe faff 	bl	80017d4 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031da:	f7fe fafb 	bl	80017d4 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e00f      	b.n	800320c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ec:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <HAL_RCC_OscConfig+0x82c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f0      	bne.n	80031da <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031f8:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <HAL_RCC_OscConfig+0x82c>)
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	4905      	ldr	r1, [pc, #20]	@ (8003214 <HAL_RCC_OscConfig+0x82c>)
 80031fe:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <HAL_RCC_OscConfig+0x830>)
 8003200:	4013      	ands	r3, r2
 8003202:	60cb      	str	r3, [r1, #12]
 8003204:	e001      	b.n	800320a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3720      	adds	r7, #32
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	feeefffc 	.word	0xfeeefffc

0800321c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0e7      	b.n	8003400 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003230:	4b75      	ldr	r3, [pc, #468]	@ (8003408 <HAL_RCC_ClockConfig+0x1ec>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d910      	bls.n	8003260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b72      	ldr	r3, [pc, #456]	@ (8003408 <HAL_RCC_ClockConfig+0x1ec>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 0207 	bic.w	r2, r3, #7
 8003246:	4970      	ldr	r1, [pc, #448]	@ (8003408 <HAL_RCC_ClockConfig+0x1ec>)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b6e      	ldr	r3, [pc, #440]	@ (8003408 <HAL_RCC_ClockConfig+0x1ec>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0cf      	b.n	8003400 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d010      	beq.n	800328e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	4b66      	ldr	r3, [pc, #408]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003278:	429a      	cmp	r2, r3
 800327a:	d908      	bls.n	800328e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800327c:	4b63      	ldr	r3, [pc, #396]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4960      	ldr	r1, [pc, #384]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 800328a:	4313      	orrs	r3, r2
 800328c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d04c      	beq.n	8003334 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d107      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a2:	4b5a      	ldr	r3, [pc, #360]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d121      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0a6      	b.n	8003400 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d107      	bne.n	80032ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ba:	4b54      	ldr	r3, [pc, #336]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d115      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e09a      	b.n	8003400 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d107      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d2:	4b4e      	ldr	r3, [pc, #312]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e08e      	b.n	8003400 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e2:	4b4a      	ldr	r3, [pc, #296]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e086      	b.n	8003400 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032f2:	4b46      	ldr	r3, [pc, #280]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f023 0203 	bic.w	r2, r3, #3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4943      	ldr	r1, [pc, #268]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 8003300:	4313      	orrs	r3, r2
 8003302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003304:	f7fe fa66 	bl	80017d4 <HAL_GetTick>
 8003308:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330a:	e00a      	b.n	8003322 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330c:	f7fe fa62 	bl	80017d4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e06e      	b.n	8003400 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003322:	4b3a      	ldr	r3, [pc, #232]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 020c 	and.w	r2, r3, #12
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	429a      	cmp	r2, r3
 8003332:	d1eb      	bne.n	800330c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d010      	beq.n	8003362 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	4b31      	ldr	r3, [pc, #196]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800334c:	429a      	cmp	r2, r3
 800334e:	d208      	bcs.n	8003362 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003350:	4b2e      	ldr	r3, [pc, #184]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	492b      	ldr	r1, [pc, #172]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003362:	4b29      	ldr	r3, [pc, #164]	@ (8003408 <HAL_RCC_ClockConfig+0x1ec>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d210      	bcs.n	8003392 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003370:	4b25      	ldr	r3, [pc, #148]	@ (8003408 <HAL_RCC_ClockConfig+0x1ec>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f023 0207 	bic.w	r2, r3, #7
 8003378:	4923      	ldr	r1, [pc, #140]	@ (8003408 <HAL_RCC_ClockConfig+0x1ec>)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003380:	4b21      	ldr	r3, [pc, #132]	@ (8003408 <HAL_RCC_ClockConfig+0x1ec>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d001      	beq.n	8003392 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e036      	b.n	8003400 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d008      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800339e:	4b1b      	ldr	r3, [pc, #108]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	4918      	ldr	r1, [pc, #96]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d009      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033bc:	4b13      	ldr	r3, [pc, #76]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4910      	ldr	r1, [pc, #64]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033d0:	f000 f824 	bl	800341c <HAL_RCC_GetSysClockFreq>
 80033d4:	4602      	mov	r2, r0
 80033d6:	4b0d      	ldr	r3, [pc, #52]	@ (800340c <HAL_RCC_ClockConfig+0x1f0>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	490b      	ldr	r1, [pc, #44]	@ (8003410 <HAL_RCC_ClockConfig+0x1f4>)
 80033e2:	5ccb      	ldrb	r3, [r1, r3]
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
 80033ec:	4a09      	ldr	r2, [pc, #36]	@ (8003414 <HAL_RCC_ClockConfig+0x1f8>)
 80033ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033f0:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_RCC_ClockConfig+0x1fc>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe f99d 	bl	8001734 <HAL_InitTick>
 80033fa:	4603      	mov	r3, r0
 80033fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80033fe:	7afb      	ldrb	r3, [r7, #11]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40022000 	.word	0x40022000
 800340c:	40021000 	.word	0x40021000
 8003410:	08005b3c 	.word	0x08005b3c
 8003414:	2000000c 	.word	0x2000000c
 8003418:	20000010 	.word	0x20000010

0800341c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	b089      	sub	sp, #36	@ 0x24
 8003420:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	2300      	movs	r3, #0
 8003428:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800342a:	4b3e      	ldr	r3, [pc, #248]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003434:	4b3b      	ldr	r3, [pc, #236]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x34>
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b0c      	cmp	r3, #12
 8003448:	d121      	bne.n	800348e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d11e      	bne.n	800348e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003450:	4b34      	ldr	r3, [pc, #208]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d107      	bne.n	800346c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800345c:	4b31      	ldr	r3, [pc, #196]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 800345e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003462:	0a1b      	lsrs	r3, r3, #8
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	e005      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800346c:	4b2d      	ldr	r3, [pc, #180]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003478:	4a2b      	ldr	r2, [pc, #172]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x10c>)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003480:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10d      	bne.n	80034a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b04      	cmp	r3, #4
 8003492:	d102      	bne.n	800349a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003494:	4b25      	ldr	r3, [pc, #148]	@ (800352c <HAL_RCC_GetSysClockFreq+0x110>)
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	e004      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034a0:	4b23      	ldr	r3, [pc, #140]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x114>)
 80034a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b0c      	cmp	r3, #12
 80034a8:	d134      	bne.n	8003514 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d003      	beq.n	80034c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d003      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0xac>
 80034c0:	e005      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034c2:	4b1a      	ldr	r3, [pc, #104]	@ (800352c <HAL_RCC_GetSysClockFreq+0x110>)
 80034c4:	617b      	str	r3, [r7, #20]
      break;
 80034c6:	e005      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034c8:	4b19      	ldr	r3, [pc, #100]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x114>)
 80034ca:	617b      	str	r3, [r7, #20]
      break;
 80034cc:	e002      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	617b      	str	r3, [r7, #20]
      break;
 80034d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034d4:	4b13      	ldr	r3, [pc, #76]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	3301      	adds	r3, #1
 80034e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034e2:	4b10      	ldr	r3, [pc, #64]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	fb03 f202 	mul.w	r2, r3, r2
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x108>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	0e5b      	lsrs	r3, r3, #25
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	3301      	adds	r3, #1
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003514:	69bb      	ldr	r3, [r7, #24]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3724      	adds	r7, #36	@ 0x24
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000
 8003528:	08005b54 	.word	0x08005b54
 800352c:	00f42400 	.word	0x00f42400
 8003530:	007a1200 	.word	0x007a1200

08003534 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003538:	4b03      	ldr	r3, [pc, #12]	@ (8003548 <HAL_RCC_GetHCLKFreq+0x14>)
 800353a:	681b      	ldr	r3, [r3, #0]
}
 800353c:	4618      	mov	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	2000000c 	.word	0x2000000c

0800354c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003550:	f7ff fff0 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 8003554:	4602      	mov	r2, r0
 8003556:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	4904      	ldr	r1, [pc, #16]	@ (8003574 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003562:	5ccb      	ldrb	r3, [r1, r3]
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000
 8003574:	08005b4c 	.word	0x08005b4c

08003578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800357c:	f7ff ffda 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b06      	ldr	r3, [pc, #24]	@ (800359c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	0adb      	lsrs	r3, r3, #11
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4904      	ldr	r1, [pc, #16]	@ (80035a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40021000 	.word	0x40021000
 80035a0:	08005b4c 	.word	0x08005b4c

080035a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035ac:	2300      	movs	r3, #0
 80035ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035b0:	4b2a      	ldr	r3, [pc, #168]	@ (800365c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035bc:	f7ff f9a0 	bl	8002900 <HAL_PWREx_GetVoltageRange>
 80035c0:	6178      	str	r0, [r7, #20]
 80035c2:	e014      	b.n	80035ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035c4:	4b25      	ldr	r3, [pc, #148]	@ (800365c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c8:	4a24      	ldr	r2, [pc, #144]	@ (800365c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80035d0:	4b22      	ldr	r3, [pc, #136]	@ (800365c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035dc:	f7ff f990 	bl	8002900 <HAL_PWREx_GetVoltageRange>
 80035e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035e2:	4b1e      	ldr	r3, [pc, #120]	@ (800365c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e6:	4a1d      	ldr	r2, [pc, #116]	@ (800365c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035f4:	d10b      	bne.n	800360e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b80      	cmp	r3, #128	@ 0x80
 80035fa:	d919      	bls.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2ba0      	cmp	r3, #160	@ 0xa0
 8003600:	d902      	bls.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003602:	2302      	movs	r3, #2
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	e013      	b.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003608:	2301      	movs	r3, #1
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	e010      	b.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b80      	cmp	r3, #128	@ 0x80
 8003612:	d902      	bls.n	800361a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003614:	2303      	movs	r3, #3
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	e00a      	b.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b80      	cmp	r3, #128	@ 0x80
 800361e:	d102      	bne.n	8003626 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003620:	2302      	movs	r3, #2
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	e004      	b.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b70      	cmp	r3, #112	@ 0x70
 800362a:	d101      	bne.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800362c:	2301      	movs	r3, #1
 800362e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003630:	4b0b      	ldr	r3, [pc, #44]	@ (8003660 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f023 0207 	bic.w	r2, r3, #7
 8003638:	4909      	ldr	r1, [pc, #36]	@ (8003660 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003640:	4b07      	ldr	r3, [pc, #28]	@ (8003660 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	429a      	cmp	r2, r3
 800364c:	d001      	beq.n	8003652 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40021000 	.word	0x40021000
 8003660:	40022000 	.word	0x40022000

08003664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800366c:	2300      	movs	r3, #0
 800366e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003670:	2300      	movs	r3, #0
 8003672:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800367c:	2b00      	cmp	r3, #0
 800367e:	d041      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003684:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003688:	d02a      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800368a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800368e:	d824      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003690:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003694:	d008      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003696:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800369a:	d81e      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036a4:	d010      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036a6:	e018      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036a8:	4b86      	ldr	r3, [pc, #536]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a85      	ldr	r2, [pc, #532]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036b4:	e015      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 facd 	bl	8003c5c <RCCEx_PLLSAI1_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036c6:	e00c      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3320      	adds	r3, #32
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fbb6 	bl	8003e40 <RCCEx_PLLSAI2_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036d8:	e003      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	74fb      	strb	r3, [r7, #19]
      break;
 80036de:	e000      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e2:	7cfb      	ldrb	r3, [r7, #19]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10b      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036e8:	4b76      	ldr	r3, [pc, #472]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036f6:	4973      	ldr	r1, [pc, #460]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80036fe:	e001      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003700:	7cfb      	ldrb	r3, [r7, #19]
 8003702:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d041      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003714:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003718:	d02a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800371a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800371e:	d824      	bhi.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003720:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003724:	d008      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003726:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800372a:	d81e      	bhi.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003734:	d010      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003736:	e018      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003738:	4b62      	ldr	r3, [pc, #392]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4a61      	ldr	r2, [pc, #388]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003742:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003744:	e015      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3304      	adds	r3, #4
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fa85 	bl	8003c5c <RCCEx_PLLSAI1_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003756:	e00c      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3320      	adds	r3, #32
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fb6e 	bl	8003e40 <RCCEx_PLLSAI2_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003768:	e003      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	74fb      	strb	r3, [r7, #19]
      break;
 800376e:	e000      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10b      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003778:	4b52      	ldr	r3, [pc, #328]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003786:	494f      	ldr	r1, [pc, #316]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800378e:	e001      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003790:	7cfb      	ldrb	r3, [r7, #19]
 8003792:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80a0 	beq.w	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037a6:	4b47      	ldr	r3, [pc, #284]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037b6:	2300      	movs	r3, #0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00d      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	4b41      	ldr	r3, [pc, #260]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c0:	4a40      	ldr	r2, [pc, #256]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80037c8:	4b3e      	ldr	r3, [pc, #248]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d4:	2301      	movs	r3, #1
 80037d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037d8:	4b3b      	ldr	r3, [pc, #236]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a3a      	ldr	r2, [pc, #232]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037e4:	f7fd fff6 	bl	80017d4 <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037ea:	e009      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ec:	f7fd fff2 	bl	80017d4 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d902      	bls.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	74fb      	strb	r3, [r7, #19]
        break;
 80037fe:	e005      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003800:	4b31      	ldr	r3, [pc, #196]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ef      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800380c:	7cfb      	ldrb	r3, [r7, #19]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d15c      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003812:	4b2c      	ldr	r3, [pc, #176]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003818:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800381c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01f      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	429a      	cmp	r2, r3
 800382e:	d019      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003830:	4b24      	ldr	r3, [pc, #144]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800383a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800383c:	4b21      	ldr	r3, [pc, #132]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003842:	4a20      	ldr	r2, [pc, #128]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800384c:	4b1d      	ldr	r3, [pc, #116]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003852:	4a1c      	ldr	r2, [pc, #112]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003854:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800385c:	4a19      	ldr	r2, [pc, #100]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386e:	f7fd ffb1 	bl	80017d4 <HAL_GetTick>
 8003872:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003874:	e00b      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003876:	f7fd ffad 	bl	80017d4 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003884:	4293      	cmp	r3, r2
 8003886:	d902      	bls.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	74fb      	strb	r3, [r7, #19]
            break;
 800388c:	e006      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388e:	4b0d      	ldr	r3, [pc, #52]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0ec      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800389c:	7cfb      	ldrb	r3, [r7, #19]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10c      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038a2:	4b08      	ldr	r3, [pc, #32]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b2:	4904      	ldr	r1, [pc, #16]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038ba:	e009      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038bc:	7cfb      	ldrb	r3, [r7, #19]
 80038be:	74bb      	strb	r3, [r7, #18]
 80038c0:	e006      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038d0:	7c7b      	ldrb	r3, [r7, #17]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d105      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d6:	4ba6      	ldr	r3, [pc, #664]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038da:	4aa5      	ldr	r2, [pc, #660]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038ee:	4ba0      	ldr	r3, [pc, #640]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f4:	f023 0203 	bic.w	r2, r3, #3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fc:	499c      	ldr	r1, [pc, #624]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003910:	4b97      	ldr	r3, [pc, #604]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003916:	f023 020c 	bic.w	r2, r3, #12
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391e:	4994      	ldr	r1, [pc, #592]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003932:	4b8f      	ldr	r3, [pc, #572]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003938:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	498b      	ldr	r1, [pc, #556]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003954:	4b86      	ldr	r3, [pc, #536]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	4983      	ldr	r1, [pc, #524]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003976:	4b7e      	ldr	r3, [pc, #504]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003984:	497a      	ldr	r1, [pc, #488]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003998:	4b75      	ldr	r3, [pc, #468]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800399e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a6:	4972      	ldr	r1, [pc, #456]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c8:	4969      	ldr	r1, [pc, #420]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039dc:	4b64      	ldr	r3, [pc, #400]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039ea:	4961      	ldr	r1, [pc, #388]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a04:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a0c:	4958      	ldr	r1, [pc, #352]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a20:	4b53      	ldr	r3, [pc, #332]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a26:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2e:	4950      	ldr	r1, [pc, #320]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a42:	4b4b      	ldr	r3, [pc, #300]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a50:	4947      	ldr	r1, [pc, #284]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a64:	4b42      	ldr	r3, [pc, #264]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a72:	493f      	ldr	r1, [pc, #252]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d028      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a86:	4b3a      	ldr	r3, [pc, #232]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a94:	4936      	ldr	r1, [pc, #216]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aa4:	d106      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aa6:	4b32      	ldr	r3, [pc, #200]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	4a31      	ldr	r2, [pc, #196]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ab0:	60d3      	str	r3, [r2, #12]
 8003ab2:	e011      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 f8c9 	bl	8003c5c <RCCEx_PLLSAI1_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ace:	7cfb      	ldrb	r3, [r7, #19]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d028      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ae4:	4b22      	ldr	r3, [pc, #136]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af2:	491f      	ldr	r1, [pc, #124]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b02:	d106      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b04:	4b1a      	ldr	r3, [pc, #104]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a19      	ldr	r2, [pc, #100]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b0e:	60d3      	str	r3, [r2, #12]
 8003b10:	e011      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b1a:	d10c      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	2101      	movs	r1, #1
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f89a 	bl	8003c5c <RCCEx_PLLSAI1_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b2c:	7cfb      	ldrb	r3, [r7, #19]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003b32:	7cfb      	ldrb	r3, [r7, #19]
 8003b34:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d02a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b42:	4b0b      	ldr	r3, [pc, #44]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b50:	4907      	ldr	r1, [pc, #28]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b60:	d108      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	4a02      	ldr	r2, [pc, #8]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b6c:	60d3      	str	r3, [r2, #12]
 8003b6e:	e013      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003b70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3304      	adds	r3, #4
 8003b82:	2101      	movs	r1, #1
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 f869 	bl	8003c5c <RCCEx_PLLSAI1_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b8e:	7cfb      	ldrb	r3, [r7, #19]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d02f      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003baa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bb2:	4929      	ldr	r1, [pc, #164]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bc2:	d10d      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	2102      	movs	r1, #2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 f846 	bl	8003c5c <RCCEx_PLLSAI1_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d014      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003bda:	7cfb      	ldrb	r3, [r7, #19]
 8003bdc:	74bb      	strb	r3, [r7, #18]
 8003bde:	e011      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003be4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3320      	adds	r3, #32
 8003bee:	2102      	movs	r1, #2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 f925 	bl	8003e40 <RCCEx_PLLSAI2_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003c00:	7cfb      	ldrb	r3, [r7, #19]
 8003c02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00b      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c10:	4b11      	ldr	r3, [pc, #68]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c16:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c20:	490d      	ldr	r1, [pc, #52]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00b      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c34:	4b08      	ldr	r3, [pc, #32]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c44:	4904      	ldr	r1, [pc, #16]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000

08003c5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c6a:	4b74      	ldr	r3, [pc, #464]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d018      	beq.n	8003ca8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c76:	4b71      	ldr	r3, [pc, #452]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0203 	and.w	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d10d      	bne.n	8003ca2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
       ||
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c8e:	4b6b      	ldr	r3, [pc, #428]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d047      	beq.n	8003d32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
 8003ca6:	e044      	b.n	8003d32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d018      	beq.n	8003ce2 <RCCEx_PLLSAI1_Config+0x86>
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d825      	bhi.n	8003d00 <RCCEx_PLLSAI1_Config+0xa4>
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d002      	beq.n	8003cbe <RCCEx_PLLSAI1_Config+0x62>
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d009      	beq.n	8003cd0 <RCCEx_PLLSAI1_Config+0x74>
 8003cbc:	e020      	b.n	8003d00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d11d      	bne.n	8003d06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cce:	e01a      	b.n	8003d06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d116      	bne.n	8003d0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce0:	e013      	b.n	8003d0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ce2:	4b56      	ldr	r3, [pc, #344]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10f      	bne.n	8003d0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cee:	4b53      	ldr	r3, [pc, #332]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cfe:	e006      	b.n	8003d0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
      break;
 8003d04:	e004      	b.n	8003d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d06:	bf00      	nop
 8003d08:	e002      	b.n	8003d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e000      	b.n	8003d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10d      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d16:	4b49      	ldr	r3, [pc, #292]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6819      	ldr	r1, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	430b      	orrs	r3, r1
 8003d2c:	4943      	ldr	r1, [pc, #268]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d17c      	bne.n	8003e32 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d38:	4b40      	ldr	r3, [pc, #256]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d44:	f7fd fd46 	bl	80017d4 <HAL_GetTick>
 8003d48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d4a:	e009      	b.n	8003d60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d4c:	f7fd fd42 	bl	80017d4 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d902      	bls.n	8003d60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d5e:	e005      	b.n	8003d6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d60:	4b36      	ldr	r3, [pc, #216]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1ef      	bne.n	8003d4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d15f      	bne.n	8003e32 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d110      	bne.n	8003d9a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d78:	4b30      	ldr	r3, [pc, #192]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003d80:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6892      	ldr	r2, [r2, #8]
 8003d88:	0211      	lsls	r1, r2, #8
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68d2      	ldr	r2, [r2, #12]
 8003d8e:	06d2      	lsls	r2, r2, #27
 8003d90:	430a      	orrs	r2, r1
 8003d92:	492a      	ldr	r1, [pc, #168]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	610b      	str	r3, [r1, #16]
 8003d98:	e027      	b.n	8003dea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d112      	bne.n	8003dc6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003da0:	4b26      	ldr	r3, [pc, #152]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003da8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6892      	ldr	r2, [r2, #8]
 8003db0:	0211      	lsls	r1, r2, #8
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6912      	ldr	r2, [r2, #16]
 8003db6:	0852      	lsrs	r2, r2, #1
 8003db8:	3a01      	subs	r2, #1
 8003dba:	0552      	lsls	r2, r2, #21
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	491f      	ldr	r1, [pc, #124]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	610b      	str	r3, [r1, #16]
 8003dc4:	e011      	b.n	8003dea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003dce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6892      	ldr	r2, [r2, #8]
 8003dd6:	0211      	lsls	r1, r2, #8
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6952      	ldr	r2, [r2, #20]
 8003ddc:	0852      	lsrs	r2, r2, #1
 8003dde:	3a01      	subs	r2, #1
 8003de0:	0652      	lsls	r2, r2, #25
 8003de2:	430a      	orrs	r2, r1
 8003de4:	4915      	ldr	r1, [pc, #84]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003dea:	4b14      	ldr	r3, [pc, #80]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a13      	ldr	r2, [pc, #76]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003df4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df6:	f7fd fced 	bl	80017d4 <HAL_GetTick>
 8003dfa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dfc:	e009      	b.n	8003e12 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dfe:	f7fd fce9 	bl	80017d4 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d902      	bls.n	8003e12 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	73fb      	strb	r3, [r7, #15]
          break;
 8003e10:	e005      	b.n	8003e1e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e12:	4b0a      	ldr	r3, [pc, #40]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0ef      	beq.n	8003dfe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d106      	bne.n	8003e32 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e24:	4b05      	ldr	r3, [pc, #20]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	4903      	ldr	r1, [pc, #12]	@ (8003e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40021000 	.word	0x40021000

08003e40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e4e:	4b69      	ldr	r3, [pc, #420]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d018      	beq.n	8003e8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e5a:	4b66      	ldr	r3, [pc, #408]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0203 	and.w	r2, r3, #3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d10d      	bne.n	8003e86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
       ||
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e72:	4b60      	ldr	r3, [pc, #384]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
       ||
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d047      	beq.n	8003f16 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
 8003e8a:	e044      	b.n	8003f16 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d018      	beq.n	8003ec6 <RCCEx_PLLSAI2_Config+0x86>
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d825      	bhi.n	8003ee4 <RCCEx_PLLSAI2_Config+0xa4>
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d002      	beq.n	8003ea2 <RCCEx_PLLSAI2_Config+0x62>
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d009      	beq.n	8003eb4 <RCCEx_PLLSAI2_Config+0x74>
 8003ea0:	e020      	b.n	8003ee4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ea2:	4b54      	ldr	r3, [pc, #336]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d11d      	bne.n	8003eea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb2:	e01a      	b.n	8003eea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d116      	bne.n	8003eee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec4:	e013      	b.n	8003eee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ec6:	4b4b      	ldr	r3, [pc, #300]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10f      	bne.n	8003ef2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ed2:	4b48      	ldr	r3, [pc, #288]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ee2:	e006      	b.n	8003ef2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee8:	e004      	b.n	8003ef4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003eea:	bf00      	nop
 8003eec:	e002      	b.n	8003ef4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ef2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10d      	bne.n	8003f16 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003efa:	4b3e      	ldr	r3, [pc, #248]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6819      	ldr	r1, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	4938      	ldr	r1, [pc, #224]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d166      	bne.n	8003fea <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f1c:	4b35      	ldr	r3, [pc, #212]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a34      	ldr	r2, [pc, #208]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f28:	f7fd fc54 	bl	80017d4 <HAL_GetTick>
 8003f2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f2e:	e009      	b.n	8003f44 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f30:	f7fd fc50 	bl	80017d4 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d902      	bls.n	8003f44 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	73fb      	strb	r3, [r7, #15]
        break;
 8003f42:	e005      	b.n	8003f50 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f44:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1ef      	bne.n	8003f30 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d149      	bne.n	8003fea <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d110      	bne.n	8003f7e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f5c:	4b25      	ldr	r3, [pc, #148]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003f64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6892      	ldr	r2, [r2, #8]
 8003f6c:	0211      	lsls	r1, r2, #8
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68d2      	ldr	r2, [r2, #12]
 8003f72:	06d2      	lsls	r2, r2, #27
 8003f74:	430a      	orrs	r2, r1
 8003f76:	491f      	ldr	r1, [pc, #124]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	614b      	str	r3, [r1, #20]
 8003f7c:	e011      	b.n	8003fa2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f86:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6892      	ldr	r2, [r2, #8]
 8003f8e:	0211      	lsls	r1, r2, #8
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6912      	ldr	r2, [r2, #16]
 8003f94:	0852      	lsrs	r2, r2, #1
 8003f96:	3a01      	subs	r2, #1
 8003f98:	0652      	lsls	r2, r2, #25
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	4915      	ldr	r1, [pc, #84]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fa2:	4b14      	ldr	r3, [pc, #80]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a13      	ldr	r2, [pc, #76]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fae:	f7fd fc11 	bl	80017d4 <HAL_GetTick>
 8003fb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fb4:	e009      	b.n	8003fca <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fb6:	f7fd fc0d 	bl	80017d4 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d902      	bls.n	8003fca <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	73fb      	strb	r3, [r7, #15]
          break;
 8003fc8:	e005      	b.n	8003fd6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fca:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0ef      	beq.n	8003fb6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003fdc:	4b05      	ldr	r3, [pc, #20]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	4903      	ldr	r1, [pc, #12]	@ (8003ff4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000

08003ff8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e040      	b.n	800408c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fd fa2a 	bl	8001474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2224      	movs	r2, #36	@ 0x24
 8004024:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0201 	bic.w	r2, r2, #1
 8004034:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fc32 	bl	80048a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f977 	bl	8004338 <UART_SetConfig>
 800404a:	4603      	mov	r3, r0
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e01b      	b.n	800408c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004062:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004072:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fcb1 	bl	80049ec <UART_CheckIdleState>
 800408a:	4603      	mov	r3, r0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	@ 0x28
 8004098:	af02      	add	r7, sp, #8
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040a8:	2b20      	cmp	r3, #32
 80040aa:	d177      	bne.n	800419c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_UART_Transmit+0x24>
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e070      	b.n	800419e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2221      	movs	r2, #33	@ 0x21
 80040c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ca:	f7fd fb83 	bl	80017d4 <HAL_GetTick>
 80040ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	88fa      	ldrh	r2, [r7, #6]
 80040d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	88fa      	ldrh	r2, [r7, #6]
 80040dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e8:	d108      	bne.n	80040fc <HAL_UART_Transmit+0x68>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	e003      	b.n	8004104 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004104:	e02f      	b.n	8004166 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	2180      	movs	r1, #128	@ 0x80
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fd13 	bl	8004b3c <UART_WaitOnFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d004      	beq.n	8004126 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e03b      	b.n	800419e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10b      	bne.n	8004144 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	881a      	ldrh	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004138:	b292      	uxth	r2, r2
 800413a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	3302      	adds	r3, #2
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	e007      	b.n	8004154 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	781a      	ldrb	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	3301      	adds	r3, #1
 8004152:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1c9      	bne.n	8004106 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2200      	movs	r2, #0
 800417a:	2140      	movs	r1, #64	@ 0x40
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fcdd 	bl	8004b3c <UART_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d004      	beq.n	8004192 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e005      	b.n	800419e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e000      	b.n	800419e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800419c:	2302      	movs	r3, #2
  }
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b08a      	sub	sp, #40	@ 0x28
 80041aa:	af02      	add	r7, sp, #8
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	4613      	mov	r3, r2
 80041b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041bc:	2b20      	cmp	r3, #32
 80041be:	f040 80b6 	bne.w	800432e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <HAL_UART_Receive+0x28>
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e0ae      	b.n	8004330 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2222      	movs	r2, #34	@ 0x22
 80041de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041e8:	f7fd faf4 	bl	80017d4 <HAL_GetTick>
 80041ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	88fa      	ldrh	r2, [r7, #6]
 80041f2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	88fa      	ldrh	r2, [r7, #6]
 80041fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004206:	d10e      	bne.n	8004226 <HAL_UART_Receive+0x80>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d105      	bne.n	800421c <HAL_UART_Receive+0x76>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004216:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800421a:	e02d      	b.n	8004278 <HAL_UART_Receive+0xd2>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	22ff      	movs	r2, #255	@ 0xff
 8004220:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004224:	e028      	b.n	8004278 <HAL_UART_Receive+0xd2>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10d      	bne.n	800424a <HAL_UART_Receive+0xa4>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d104      	bne.n	8004240 <HAL_UART_Receive+0x9a>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	22ff      	movs	r2, #255	@ 0xff
 800423a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800423e:	e01b      	b.n	8004278 <HAL_UART_Receive+0xd2>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	227f      	movs	r2, #127	@ 0x7f
 8004244:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004248:	e016      	b.n	8004278 <HAL_UART_Receive+0xd2>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004252:	d10d      	bne.n	8004270 <HAL_UART_Receive+0xca>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d104      	bne.n	8004266 <HAL_UART_Receive+0xc0>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	227f      	movs	r2, #127	@ 0x7f
 8004260:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004264:	e008      	b.n	8004278 <HAL_UART_Receive+0xd2>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	223f      	movs	r2, #63	@ 0x3f
 800426a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800426e:	e003      	b.n	8004278 <HAL_UART_Receive+0xd2>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800427e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004288:	d108      	bne.n	800429c <HAL_UART_Receive+0xf6>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d104      	bne.n	800429c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004292:	2300      	movs	r3, #0
 8004294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	61bb      	str	r3, [r7, #24]
 800429a:	e003      	b.n	80042a4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80042a4:	e037      	b.n	8004316 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2200      	movs	r2, #0
 80042ae:	2120      	movs	r1, #32
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 fc43 	bl	8004b3c <UART_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2220      	movs	r2, #32
 80042c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e033      	b.n	8004330 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10c      	bne.n	80042e8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	8a7b      	ldrh	r3, [r7, #18]
 80042d8:	4013      	ands	r3, r2
 80042da:	b29a      	uxth	r2, r3
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	3302      	adds	r3, #2
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	e00d      	b.n	8004304 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	8a7b      	ldrh	r3, [r7, #18]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	4013      	ands	r3, r2
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	3301      	adds	r3, #1
 8004302:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1c1      	bne.n	80042a6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e000      	b.n	8004330 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800432e:	2302      	movs	r3, #2
  }
}
 8004330:	4618      	mov	r0, r3
 8004332:	3720      	adds	r7, #32
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800433c:	b08a      	sub	sp, #40	@ 0x28
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	431a      	orrs	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	431a      	orrs	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	4313      	orrs	r3, r2
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4ba4      	ldr	r3, [pc, #656]	@ (80045f8 <UART_SetConfig+0x2c0>)
 8004368:	4013      	ands	r3, r2
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004370:	430b      	orrs	r3, r1
 8004372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a99      	ldr	r2, [pc, #612]	@ (80045fc <UART_SetConfig+0x2c4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d004      	beq.n	80043a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043a0:	4313      	orrs	r3, r2
 80043a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b4:	430a      	orrs	r2, r1
 80043b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a90      	ldr	r2, [pc, #576]	@ (8004600 <UART_SetConfig+0x2c8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d126      	bne.n	8004410 <UART_SetConfig+0xd8>
 80043c2:	4b90      	ldr	r3, [pc, #576]	@ (8004604 <UART_SetConfig+0x2cc>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c8:	f003 0303 	and.w	r3, r3, #3
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d81b      	bhi.n	8004408 <UART_SetConfig+0xd0>
 80043d0:	a201      	add	r2, pc, #4	@ (adr r2, 80043d8 <UART_SetConfig+0xa0>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	080043e9 	.word	0x080043e9
 80043dc:	080043f9 	.word	0x080043f9
 80043e0:	080043f1 	.word	0x080043f1
 80043e4:	08004401 	.word	0x08004401
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ee:	e116      	b.n	800461e <UART_SetConfig+0x2e6>
 80043f0:	2302      	movs	r3, #2
 80043f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f6:	e112      	b.n	800461e <UART_SetConfig+0x2e6>
 80043f8:	2304      	movs	r3, #4
 80043fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fe:	e10e      	b.n	800461e <UART_SetConfig+0x2e6>
 8004400:	2308      	movs	r3, #8
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004406:	e10a      	b.n	800461e <UART_SetConfig+0x2e6>
 8004408:	2310      	movs	r3, #16
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440e:	e106      	b.n	800461e <UART_SetConfig+0x2e6>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a7c      	ldr	r2, [pc, #496]	@ (8004608 <UART_SetConfig+0x2d0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d138      	bne.n	800448c <UART_SetConfig+0x154>
 800441a:	4b7a      	ldr	r3, [pc, #488]	@ (8004604 <UART_SetConfig+0x2cc>)
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004420:	f003 030c 	and.w	r3, r3, #12
 8004424:	2b0c      	cmp	r3, #12
 8004426:	d82d      	bhi.n	8004484 <UART_SetConfig+0x14c>
 8004428:	a201      	add	r2, pc, #4	@ (adr r2, 8004430 <UART_SetConfig+0xf8>)
 800442a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442e:	bf00      	nop
 8004430:	08004465 	.word	0x08004465
 8004434:	08004485 	.word	0x08004485
 8004438:	08004485 	.word	0x08004485
 800443c:	08004485 	.word	0x08004485
 8004440:	08004475 	.word	0x08004475
 8004444:	08004485 	.word	0x08004485
 8004448:	08004485 	.word	0x08004485
 800444c:	08004485 	.word	0x08004485
 8004450:	0800446d 	.word	0x0800446d
 8004454:	08004485 	.word	0x08004485
 8004458:	08004485 	.word	0x08004485
 800445c:	08004485 	.word	0x08004485
 8004460:	0800447d 	.word	0x0800447d
 8004464:	2300      	movs	r3, #0
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800446a:	e0d8      	b.n	800461e <UART_SetConfig+0x2e6>
 800446c:	2302      	movs	r3, #2
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004472:	e0d4      	b.n	800461e <UART_SetConfig+0x2e6>
 8004474:	2304      	movs	r3, #4
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800447a:	e0d0      	b.n	800461e <UART_SetConfig+0x2e6>
 800447c:	2308      	movs	r3, #8
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004482:	e0cc      	b.n	800461e <UART_SetConfig+0x2e6>
 8004484:	2310      	movs	r3, #16
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800448a:	e0c8      	b.n	800461e <UART_SetConfig+0x2e6>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a5e      	ldr	r2, [pc, #376]	@ (800460c <UART_SetConfig+0x2d4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d125      	bne.n	80044e2 <UART_SetConfig+0x1aa>
 8004496:	4b5b      	ldr	r3, [pc, #364]	@ (8004604 <UART_SetConfig+0x2cc>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044a0:	2b30      	cmp	r3, #48	@ 0x30
 80044a2:	d016      	beq.n	80044d2 <UART_SetConfig+0x19a>
 80044a4:	2b30      	cmp	r3, #48	@ 0x30
 80044a6:	d818      	bhi.n	80044da <UART_SetConfig+0x1a2>
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d00a      	beq.n	80044c2 <UART_SetConfig+0x18a>
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d814      	bhi.n	80044da <UART_SetConfig+0x1a2>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <UART_SetConfig+0x182>
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d008      	beq.n	80044ca <UART_SetConfig+0x192>
 80044b8:	e00f      	b.n	80044da <UART_SetConfig+0x1a2>
 80044ba:	2300      	movs	r3, #0
 80044bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c0:	e0ad      	b.n	800461e <UART_SetConfig+0x2e6>
 80044c2:	2302      	movs	r3, #2
 80044c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c8:	e0a9      	b.n	800461e <UART_SetConfig+0x2e6>
 80044ca:	2304      	movs	r3, #4
 80044cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044d0:	e0a5      	b.n	800461e <UART_SetConfig+0x2e6>
 80044d2:	2308      	movs	r3, #8
 80044d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044d8:	e0a1      	b.n	800461e <UART_SetConfig+0x2e6>
 80044da:	2310      	movs	r3, #16
 80044dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e0:	e09d      	b.n	800461e <UART_SetConfig+0x2e6>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004610 <UART_SetConfig+0x2d8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d125      	bne.n	8004538 <UART_SetConfig+0x200>
 80044ec:	4b45      	ldr	r3, [pc, #276]	@ (8004604 <UART_SetConfig+0x2cc>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80044f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80044f8:	d016      	beq.n	8004528 <UART_SetConfig+0x1f0>
 80044fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80044fc:	d818      	bhi.n	8004530 <UART_SetConfig+0x1f8>
 80044fe:	2b80      	cmp	r3, #128	@ 0x80
 8004500:	d00a      	beq.n	8004518 <UART_SetConfig+0x1e0>
 8004502:	2b80      	cmp	r3, #128	@ 0x80
 8004504:	d814      	bhi.n	8004530 <UART_SetConfig+0x1f8>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <UART_SetConfig+0x1d8>
 800450a:	2b40      	cmp	r3, #64	@ 0x40
 800450c:	d008      	beq.n	8004520 <UART_SetConfig+0x1e8>
 800450e:	e00f      	b.n	8004530 <UART_SetConfig+0x1f8>
 8004510:	2300      	movs	r3, #0
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004516:	e082      	b.n	800461e <UART_SetConfig+0x2e6>
 8004518:	2302      	movs	r3, #2
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800451e:	e07e      	b.n	800461e <UART_SetConfig+0x2e6>
 8004520:	2304      	movs	r3, #4
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004526:	e07a      	b.n	800461e <UART_SetConfig+0x2e6>
 8004528:	2308      	movs	r3, #8
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800452e:	e076      	b.n	800461e <UART_SetConfig+0x2e6>
 8004530:	2310      	movs	r3, #16
 8004532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004536:	e072      	b.n	800461e <UART_SetConfig+0x2e6>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a35      	ldr	r2, [pc, #212]	@ (8004614 <UART_SetConfig+0x2dc>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d12a      	bne.n	8004598 <UART_SetConfig+0x260>
 8004542:	4b30      	ldr	r3, [pc, #192]	@ (8004604 <UART_SetConfig+0x2cc>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004548:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800454c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004550:	d01a      	beq.n	8004588 <UART_SetConfig+0x250>
 8004552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004556:	d81b      	bhi.n	8004590 <UART_SetConfig+0x258>
 8004558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800455c:	d00c      	beq.n	8004578 <UART_SetConfig+0x240>
 800455e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004562:	d815      	bhi.n	8004590 <UART_SetConfig+0x258>
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <UART_SetConfig+0x238>
 8004568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800456c:	d008      	beq.n	8004580 <UART_SetConfig+0x248>
 800456e:	e00f      	b.n	8004590 <UART_SetConfig+0x258>
 8004570:	2300      	movs	r3, #0
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004576:	e052      	b.n	800461e <UART_SetConfig+0x2e6>
 8004578:	2302      	movs	r3, #2
 800457a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800457e:	e04e      	b.n	800461e <UART_SetConfig+0x2e6>
 8004580:	2304      	movs	r3, #4
 8004582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004586:	e04a      	b.n	800461e <UART_SetConfig+0x2e6>
 8004588:	2308      	movs	r3, #8
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800458e:	e046      	b.n	800461e <UART_SetConfig+0x2e6>
 8004590:	2310      	movs	r3, #16
 8004592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004596:	e042      	b.n	800461e <UART_SetConfig+0x2e6>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a17      	ldr	r2, [pc, #92]	@ (80045fc <UART_SetConfig+0x2c4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d13a      	bne.n	8004618 <UART_SetConfig+0x2e0>
 80045a2:	4b18      	ldr	r3, [pc, #96]	@ (8004604 <UART_SetConfig+0x2cc>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045b0:	d01a      	beq.n	80045e8 <UART_SetConfig+0x2b0>
 80045b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045b6:	d81b      	bhi.n	80045f0 <UART_SetConfig+0x2b8>
 80045b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045bc:	d00c      	beq.n	80045d8 <UART_SetConfig+0x2a0>
 80045be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c2:	d815      	bhi.n	80045f0 <UART_SetConfig+0x2b8>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <UART_SetConfig+0x298>
 80045c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045cc:	d008      	beq.n	80045e0 <UART_SetConfig+0x2a8>
 80045ce:	e00f      	b.n	80045f0 <UART_SetConfig+0x2b8>
 80045d0:	2300      	movs	r3, #0
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d6:	e022      	b.n	800461e <UART_SetConfig+0x2e6>
 80045d8:	2302      	movs	r3, #2
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045de:	e01e      	b.n	800461e <UART_SetConfig+0x2e6>
 80045e0:	2304      	movs	r3, #4
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e6:	e01a      	b.n	800461e <UART_SetConfig+0x2e6>
 80045e8:	2308      	movs	r3, #8
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ee:	e016      	b.n	800461e <UART_SetConfig+0x2e6>
 80045f0:	2310      	movs	r3, #16
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f6:	e012      	b.n	800461e <UART_SetConfig+0x2e6>
 80045f8:	efff69f3 	.word	0xefff69f3
 80045fc:	40008000 	.word	0x40008000
 8004600:	40013800 	.word	0x40013800
 8004604:	40021000 	.word	0x40021000
 8004608:	40004400 	.word	0x40004400
 800460c:	40004800 	.word	0x40004800
 8004610:	40004c00 	.word	0x40004c00
 8004614:	40005000 	.word	0x40005000
 8004618:	2310      	movs	r3, #16
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a9f      	ldr	r2, [pc, #636]	@ (80048a0 <UART_SetConfig+0x568>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d17a      	bne.n	800471e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004628:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800462c:	2b08      	cmp	r3, #8
 800462e:	d824      	bhi.n	800467a <UART_SetConfig+0x342>
 8004630:	a201      	add	r2, pc, #4	@ (adr r2, 8004638 <UART_SetConfig+0x300>)
 8004632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004636:	bf00      	nop
 8004638:	0800465d 	.word	0x0800465d
 800463c:	0800467b 	.word	0x0800467b
 8004640:	08004665 	.word	0x08004665
 8004644:	0800467b 	.word	0x0800467b
 8004648:	0800466b 	.word	0x0800466b
 800464c:	0800467b 	.word	0x0800467b
 8004650:	0800467b 	.word	0x0800467b
 8004654:	0800467b 	.word	0x0800467b
 8004658:	08004673 	.word	0x08004673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800465c:	f7fe ff76 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8004660:	61f8      	str	r0, [r7, #28]
        break;
 8004662:	e010      	b.n	8004686 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004664:	4b8f      	ldr	r3, [pc, #572]	@ (80048a4 <UART_SetConfig+0x56c>)
 8004666:	61fb      	str	r3, [r7, #28]
        break;
 8004668:	e00d      	b.n	8004686 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800466a:	f7fe fed7 	bl	800341c <HAL_RCC_GetSysClockFreq>
 800466e:	61f8      	str	r0, [r7, #28]
        break;
 8004670:	e009      	b.n	8004686 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004676:	61fb      	str	r3, [r7, #28]
        break;
 8004678:	e005      	b.n	8004686 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004684:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80fb 	beq.w	8004884 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	4413      	add	r3, r2
 8004698:	69fa      	ldr	r2, [r7, #28]
 800469a:	429a      	cmp	r2, r3
 800469c:	d305      	bcc.n	80046aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d903      	bls.n	80046b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046b0:	e0e8      	b.n	8004884 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	2200      	movs	r2, #0
 80046b6:	461c      	mov	r4, r3
 80046b8:	4615      	mov	r5, r2
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	022b      	lsls	r3, r5, #8
 80046c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80046c8:	0222      	lsls	r2, r4, #8
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	6849      	ldr	r1, [r1, #4]
 80046ce:	0849      	lsrs	r1, r1, #1
 80046d0:	2000      	movs	r0, #0
 80046d2:	4688      	mov	r8, r1
 80046d4:	4681      	mov	r9, r0
 80046d6:	eb12 0a08 	adds.w	sl, r2, r8
 80046da:	eb43 0b09 	adc.w	fp, r3, r9
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ec:	4650      	mov	r0, sl
 80046ee:	4659      	mov	r1, fp
 80046f0:	f7fb fdd6 	bl	80002a0 <__aeabi_uldivmod>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4613      	mov	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004702:	d308      	bcc.n	8004716 <UART_SetConfig+0x3de>
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800470a:	d204      	bcs.n	8004716 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	60da      	str	r2, [r3, #12]
 8004714:	e0b6      	b.n	8004884 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800471c:	e0b2      	b.n	8004884 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004726:	d15e      	bne.n	80047e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004728:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800472c:	2b08      	cmp	r3, #8
 800472e:	d828      	bhi.n	8004782 <UART_SetConfig+0x44a>
 8004730:	a201      	add	r2, pc, #4	@ (adr r2, 8004738 <UART_SetConfig+0x400>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	0800475d 	.word	0x0800475d
 800473c:	08004765 	.word	0x08004765
 8004740:	0800476d 	.word	0x0800476d
 8004744:	08004783 	.word	0x08004783
 8004748:	08004773 	.word	0x08004773
 800474c:	08004783 	.word	0x08004783
 8004750:	08004783 	.word	0x08004783
 8004754:	08004783 	.word	0x08004783
 8004758:	0800477b 	.word	0x0800477b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800475c:	f7fe fef6 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8004760:	61f8      	str	r0, [r7, #28]
        break;
 8004762:	e014      	b.n	800478e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004764:	f7fe ff08 	bl	8003578 <HAL_RCC_GetPCLK2Freq>
 8004768:	61f8      	str	r0, [r7, #28]
        break;
 800476a:	e010      	b.n	800478e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800476c:	4b4d      	ldr	r3, [pc, #308]	@ (80048a4 <UART_SetConfig+0x56c>)
 800476e:	61fb      	str	r3, [r7, #28]
        break;
 8004770:	e00d      	b.n	800478e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004772:	f7fe fe53 	bl	800341c <HAL_RCC_GetSysClockFreq>
 8004776:	61f8      	str	r0, [r7, #28]
        break;
 8004778:	e009      	b.n	800478e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800477a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800477e:	61fb      	str	r3, [r7, #28]
        break;
 8004780:	e005      	b.n	800478e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800478c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d077      	beq.n	8004884 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	005a      	lsls	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	441a      	add	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b0f      	cmp	r3, #15
 80047ae:	d916      	bls.n	80047de <UART_SetConfig+0x4a6>
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b6:	d212      	bcs.n	80047de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	f023 030f 	bic.w	r3, r3, #15
 80047c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	8afb      	ldrh	r3, [r7, #22]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	8afa      	ldrh	r2, [r7, #22]
 80047da:	60da      	str	r2, [r3, #12]
 80047dc:	e052      	b.n	8004884 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047e4:	e04e      	b.n	8004884 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d827      	bhi.n	800483e <UART_SetConfig+0x506>
 80047ee:	a201      	add	r2, pc, #4	@ (adr r2, 80047f4 <UART_SetConfig+0x4bc>)
 80047f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f4:	08004819 	.word	0x08004819
 80047f8:	08004821 	.word	0x08004821
 80047fc:	08004829 	.word	0x08004829
 8004800:	0800483f 	.word	0x0800483f
 8004804:	0800482f 	.word	0x0800482f
 8004808:	0800483f 	.word	0x0800483f
 800480c:	0800483f 	.word	0x0800483f
 8004810:	0800483f 	.word	0x0800483f
 8004814:	08004837 	.word	0x08004837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004818:	f7fe fe98 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 800481c:	61f8      	str	r0, [r7, #28]
        break;
 800481e:	e014      	b.n	800484a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004820:	f7fe feaa 	bl	8003578 <HAL_RCC_GetPCLK2Freq>
 8004824:	61f8      	str	r0, [r7, #28]
        break;
 8004826:	e010      	b.n	800484a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004828:	4b1e      	ldr	r3, [pc, #120]	@ (80048a4 <UART_SetConfig+0x56c>)
 800482a:	61fb      	str	r3, [r7, #28]
        break;
 800482c:	e00d      	b.n	800484a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800482e:	f7fe fdf5 	bl	800341c <HAL_RCC_GetSysClockFreq>
 8004832:	61f8      	str	r0, [r7, #28]
        break;
 8004834:	e009      	b.n	800484a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800483a:	61fb      	str	r3, [r7, #28]
        break;
 800483c:	e005      	b.n	800484a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004848:	bf00      	nop
    }

    if (pclk != 0U)
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d019      	beq.n	8004884 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	085a      	lsrs	r2, r3, #1
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	441a      	add	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004862:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	2b0f      	cmp	r3, #15
 8004868:	d909      	bls.n	800487e <UART_SetConfig+0x546>
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004870:	d205      	bcs.n	800487e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60da      	str	r2, [r3, #12]
 800487c:	e002      	b.n	8004884 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004890:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004894:	4618      	mov	r0, r3
 8004896:	3728      	adds	r7, #40	@ 0x28
 8004898:	46bd      	mov	sp, r7
 800489a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800489e:	bf00      	nop
 80048a0:	40008000 	.word	0x40008000
 80048a4:	00f42400 	.word	0x00f42400

080048a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01a      	beq.n	80049be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049a6:	d10a      	bne.n	80049be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	605a      	str	r2, [r3, #4]
  }
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b098      	sub	sp, #96	@ 0x60
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049fc:	f7fc feea 	bl	80017d4 <HAL_GetTick>
 8004a00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d12e      	bne.n	8004a6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f88c 	bl	8004b3c <UART_WaitOnFlagUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d021      	beq.n	8004a6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a50:	e841 2300 	strex	r3, r2, [r1]
 8004a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e6      	bne.n	8004a2a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e062      	b.n	8004b34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d149      	bne.n	8004b10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a84:	2200      	movs	r2, #0
 8004a86:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f856 	bl	8004b3c <UART_WaitOnFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d03c      	beq.n	8004b10 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	623b      	str	r3, [r7, #32]
   return(result);
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ab4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e6      	bne.n	8004a96 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3308      	adds	r3, #8
 8004ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ae8:	61fa      	str	r2, [r7, #28]
 8004aea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	69b9      	ldr	r1, [r7, #24]
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	617b      	str	r3, [r7, #20]
   return(result);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e5      	bne.n	8004ac8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e011      	b.n	8004b34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3758      	adds	r7, #88	@ 0x58
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b4c:	e04f      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d04b      	beq.n	8004bee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b56:	f7fc fe3d 	bl	80017d4 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d302      	bcc.n	8004b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e04e      	b.n	8004c0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d037      	beq.n	8004bee <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b80      	cmp	r3, #128	@ 0x80
 8004b82:	d034      	beq.n	8004bee <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b40      	cmp	r3, #64	@ 0x40
 8004b88:	d031      	beq.n	8004bee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d110      	bne.n	8004bba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f838 	bl	8004c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2208      	movs	r2, #8
 8004baa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e029      	b.n	8004c0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bc8:	d111      	bne.n	8004bee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f81e 	bl	8004c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e00f      	b.n	8004c0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d0a0      	beq.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b095      	sub	sp, #84	@ 0x54
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e6      	bne.n	8004c1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f023 0301 	bic.w	r3, r3, #1
 8004c66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e5      	bne.n	8004c50 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d118      	bne.n	8004cbe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f023 0310 	bic.w	r3, r3, #16
 8004ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cae:	6979      	ldr	r1, [r7, #20]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e6      	bne.n	8004c8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004cd2:	bf00      	nop
 8004cd4:	3754      	adds	r7, #84	@ 0x54
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <_vsiprintf_r>:
 8004ce0:	b510      	push	{r4, lr}
 8004ce2:	b09a      	sub	sp, #104	@ 0x68
 8004ce4:	2400      	movs	r4, #0
 8004ce6:	9100      	str	r1, [sp, #0]
 8004ce8:	9104      	str	r1, [sp, #16]
 8004cea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004cee:	9105      	str	r1, [sp, #20]
 8004cf0:	9102      	str	r1, [sp, #8]
 8004cf2:	4905      	ldr	r1, [pc, #20]	@ (8004d08 <_vsiprintf_r+0x28>)
 8004cf4:	9103      	str	r1, [sp, #12]
 8004cf6:	4669      	mov	r1, sp
 8004cf8:	9419      	str	r4, [sp, #100]	@ 0x64
 8004cfa:	f000 f999 	bl	8005030 <_svfiprintf_r>
 8004cfe:	9b00      	ldr	r3, [sp, #0]
 8004d00:	701c      	strb	r4, [r3, #0]
 8004d02:	b01a      	add	sp, #104	@ 0x68
 8004d04:	bd10      	pop	{r4, pc}
 8004d06:	bf00      	nop
 8004d08:	ffff0208 	.word	0xffff0208

08004d0c <vsiprintf>:
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	460a      	mov	r2, r1
 8004d10:	4601      	mov	r1, r0
 8004d12:	4802      	ldr	r0, [pc, #8]	@ (8004d1c <vsiprintf+0x10>)
 8004d14:	6800      	ldr	r0, [r0, #0]
 8004d16:	f7ff bfe3 	b.w	8004ce0 <_vsiprintf_r>
 8004d1a:	bf00      	nop
 8004d1c:	20000038 	.word	0x20000038

08004d20 <memset>:
 8004d20:	4402      	add	r2, r0
 8004d22:	4603      	mov	r3, r0
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d100      	bne.n	8004d2a <memset+0xa>
 8004d28:	4770      	bx	lr
 8004d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d2e:	e7f9      	b.n	8004d24 <memset+0x4>

08004d30 <__errno>:
 8004d30:	4b01      	ldr	r3, [pc, #4]	@ (8004d38 <__errno+0x8>)
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	20000038 	.word	0x20000038

08004d3c <__libc_init_array>:
 8004d3c:	b570      	push	{r4, r5, r6, lr}
 8004d3e:	4d0d      	ldr	r5, [pc, #52]	@ (8004d74 <__libc_init_array+0x38>)
 8004d40:	4c0d      	ldr	r4, [pc, #52]	@ (8004d78 <__libc_init_array+0x3c>)
 8004d42:	1b64      	subs	r4, r4, r5
 8004d44:	10a4      	asrs	r4, r4, #2
 8004d46:	2600      	movs	r6, #0
 8004d48:	42a6      	cmp	r6, r4
 8004d4a:	d109      	bne.n	8004d60 <__libc_init_array+0x24>
 8004d4c:	4d0b      	ldr	r5, [pc, #44]	@ (8004d7c <__libc_init_array+0x40>)
 8004d4e:	4c0c      	ldr	r4, [pc, #48]	@ (8004d80 <__libc_init_array+0x44>)
 8004d50:	f000 fc64 	bl	800561c <_init>
 8004d54:	1b64      	subs	r4, r4, r5
 8004d56:	10a4      	asrs	r4, r4, #2
 8004d58:	2600      	movs	r6, #0
 8004d5a:	42a6      	cmp	r6, r4
 8004d5c:	d105      	bne.n	8004d6a <__libc_init_array+0x2e>
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d64:	4798      	blx	r3
 8004d66:	3601      	adds	r6, #1
 8004d68:	e7ee      	b.n	8004d48 <__libc_init_array+0xc>
 8004d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d6e:	4798      	blx	r3
 8004d70:	3601      	adds	r6, #1
 8004d72:	e7f2      	b.n	8004d5a <__libc_init_array+0x1e>
 8004d74:	08005bc0 	.word	0x08005bc0
 8004d78:	08005bc0 	.word	0x08005bc0
 8004d7c:	08005bc0 	.word	0x08005bc0
 8004d80:	08005bc4 	.word	0x08005bc4

08004d84 <__retarget_lock_acquire_recursive>:
 8004d84:	4770      	bx	lr

08004d86 <__retarget_lock_release_recursive>:
 8004d86:	4770      	bx	lr

08004d88 <_free_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	2900      	cmp	r1, #0
 8004d8e:	d041      	beq.n	8004e14 <_free_r+0x8c>
 8004d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d94:	1f0c      	subs	r4, r1, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bfb8      	it	lt
 8004d9a:	18e4      	addlt	r4, r4, r3
 8004d9c:	f000 f8e0 	bl	8004f60 <__malloc_lock>
 8004da0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e18 <_free_r+0x90>)
 8004da2:	6813      	ldr	r3, [r2, #0]
 8004da4:	b933      	cbnz	r3, 8004db4 <_free_r+0x2c>
 8004da6:	6063      	str	r3, [r4, #4]
 8004da8:	6014      	str	r4, [r2, #0]
 8004daa:	4628      	mov	r0, r5
 8004dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004db0:	f000 b8dc 	b.w	8004f6c <__malloc_unlock>
 8004db4:	42a3      	cmp	r3, r4
 8004db6:	d908      	bls.n	8004dca <_free_r+0x42>
 8004db8:	6820      	ldr	r0, [r4, #0]
 8004dba:	1821      	adds	r1, r4, r0
 8004dbc:	428b      	cmp	r3, r1
 8004dbe:	bf01      	itttt	eq
 8004dc0:	6819      	ldreq	r1, [r3, #0]
 8004dc2:	685b      	ldreq	r3, [r3, #4]
 8004dc4:	1809      	addeq	r1, r1, r0
 8004dc6:	6021      	streq	r1, [r4, #0]
 8004dc8:	e7ed      	b.n	8004da6 <_free_r+0x1e>
 8004dca:	461a      	mov	r2, r3
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	b10b      	cbz	r3, 8004dd4 <_free_r+0x4c>
 8004dd0:	42a3      	cmp	r3, r4
 8004dd2:	d9fa      	bls.n	8004dca <_free_r+0x42>
 8004dd4:	6811      	ldr	r1, [r2, #0]
 8004dd6:	1850      	adds	r0, r2, r1
 8004dd8:	42a0      	cmp	r0, r4
 8004dda:	d10b      	bne.n	8004df4 <_free_r+0x6c>
 8004ddc:	6820      	ldr	r0, [r4, #0]
 8004dde:	4401      	add	r1, r0
 8004de0:	1850      	adds	r0, r2, r1
 8004de2:	4283      	cmp	r3, r0
 8004de4:	6011      	str	r1, [r2, #0]
 8004de6:	d1e0      	bne.n	8004daa <_free_r+0x22>
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	6053      	str	r3, [r2, #4]
 8004dee:	4408      	add	r0, r1
 8004df0:	6010      	str	r0, [r2, #0]
 8004df2:	e7da      	b.n	8004daa <_free_r+0x22>
 8004df4:	d902      	bls.n	8004dfc <_free_r+0x74>
 8004df6:	230c      	movs	r3, #12
 8004df8:	602b      	str	r3, [r5, #0]
 8004dfa:	e7d6      	b.n	8004daa <_free_r+0x22>
 8004dfc:	6820      	ldr	r0, [r4, #0]
 8004dfe:	1821      	adds	r1, r4, r0
 8004e00:	428b      	cmp	r3, r1
 8004e02:	bf04      	itt	eq
 8004e04:	6819      	ldreq	r1, [r3, #0]
 8004e06:	685b      	ldreq	r3, [r3, #4]
 8004e08:	6063      	str	r3, [r4, #4]
 8004e0a:	bf04      	itt	eq
 8004e0c:	1809      	addeq	r1, r1, r0
 8004e0e:	6021      	streq	r1, [r4, #0]
 8004e10:	6054      	str	r4, [r2, #4]
 8004e12:	e7ca      	b.n	8004daa <_free_r+0x22>
 8004e14:	bd38      	pop	{r3, r4, r5, pc}
 8004e16:	bf00      	nop
 8004e18:	200003f0 	.word	0x200003f0

08004e1c <sbrk_aligned>:
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	4e0f      	ldr	r6, [pc, #60]	@ (8004e5c <sbrk_aligned+0x40>)
 8004e20:	460c      	mov	r4, r1
 8004e22:	6831      	ldr	r1, [r6, #0]
 8004e24:	4605      	mov	r5, r0
 8004e26:	b911      	cbnz	r1, 8004e2e <sbrk_aligned+0x12>
 8004e28:	f000 fba4 	bl	8005574 <_sbrk_r>
 8004e2c:	6030      	str	r0, [r6, #0]
 8004e2e:	4621      	mov	r1, r4
 8004e30:	4628      	mov	r0, r5
 8004e32:	f000 fb9f 	bl	8005574 <_sbrk_r>
 8004e36:	1c43      	adds	r3, r0, #1
 8004e38:	d103      	bne.n	8004e42 <sbrk_aligned+0x26>
 8004e3a:	f04f 34ff 	mov.w	r4, #4294967295
 8004e3e:	4620      	mov	r0, r4
 8004e40:	bd70      	pop	{r4, r5, r6, pc}
 8004e42:	1cc4      	adds	r4, r0, #3
 8004e44:	f024 0403 	bic.w	r4, r4, #3
 8004e48:	42a0      	cmp	r0, r4
 8004e4a:	d0f8      	beq.n	8004e3e <sbrk_aligned+0x22>
 8004e4c:	1a21      	subs	r1, r4, r0
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f000 fb90 	bl	8005574 <_sbrk_r>
 8004e54:	3001      	adds	r0, #1
 8004e56:	d1f2      	bne.n	8004e3e <sbrk_aligned+0x22>
 8004e58:	e7ef      	b.n	8004e3a <sbrk_aligned+0x1e>
 8004e5a:	bf00      	nop
 8004e5c:	200003ec 	.word	0x200003ec

08004e60 <_malloc_r>:
 8004e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e64:	1ccd      	adds	r5, r1, #3
 8004e66:	f025 0503 	bic.w	r5, r5, #3
 8004e6a:	3508      	adds	r5, #8
 8004e6c:	2d0c      	cmp	r5, #12
 8004e6e:	bf38      	it	cc
 8004e70:	250c      	movcc	r5, #12
 8004e72:	2d00      	cmp	r5, #0
 8004e74:	4606      	mov	r6, r0
 8004e76:	db01      	blt.n	8004e7c <_malloc_r+0x1c>
 8004e78:	42a9      	cmp	r1, r5
 8004e7a:	d904      	bls.n	8004e86 <_malloc_r+0x26>
 8004e7c:	230c      	movs	r3, #12
 8004e7e:	6033      	str	r3, [r6, #0]
 8004e80:	2000      	movs	r0, #0
 8004e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f5c <_malloc_r+0xfc>
 8004e8a:	f000 f869 	bl	8004f60 <__malloc_lock>
 8004e8e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e92:	461c      	mov	r4, r3
 8004e94:	bb44      	cbnz	r4, 8004ee8 <_malloc_r+0x88>
 8004e96:	4629      	mov	r1, r5
 8004e98:	4630      	mov	r0, r6
 8004e9a:	f7ff ffbf 	bl	8004e1c <sbrk_aligned>
 8004e9e:	1c43      	adds	r3, r0, #1
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	d158      	bne.n	8004f56 <_malloc_r+0xf6>
 8004ea4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ea8:	4627      	mov	r7, r4
 8004eaa:	2f00      	cmp	r7, #0
 8004eac:	d143      	bne.n	8004f36 <_malloc_r+0xd6>
 8004eae:	2c00      	cmp	r4, #0
 8004eb0:	d04b      	beq.n	8004f4a <_malloc_r+0xea>
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	4639      	mov	r1, r7
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	eb04 0903 	add.w	r9, r4, r3
 8004ebc:	f000 fb5a 	bl	8005574 <_sbrk_r>
 8004ec0:	4581      	cmp	r9, r0
 8004ec2:	d142      	bne.n	8004f4a <_malloc_r+0xea>
 8004ec4:	6821      	ldr	r1, [r4, #0]
 8004ec6:	1a6d      	subs	r5, r5, r1
 8004ec8:	4629      	mov	r1, r5
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f7ff ffa6 	bl	8004e1c <sbrk_aligned>
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d03a      	beq.n	8004f4a <_malloc_r+0xea>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	442b      	add	r3, r5
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	f8d8 3000 	ldr.w	r3, [r8]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	bb62      	cbnz	r2, 8004f3c <_malloc_r+0xdc>
 8004ee2:	f8c8 7000 	str.w	r7, [r8]
 8004ee6:	e00f      	b.n	8004f08 <_malloc_r+0xa8>
 8004ee8:	6822      	ldr	r2, [r4, #0]
 8004eea:	1b52      	subs	r2, r2, r5
 8004eec:	d420      	bmi.n	8004f30 <_malloc_r+0xd0>
 8004eee:	2a0b      	cmp	r2, #11
 8004ef0:	d917      	bls.n	8004f22 <_malloc_r+0xc2>
 8004ef2:	1961      	adds	r1, r4, r5
 8004ef4:	42a3      	cmp	r3, r4
 8004ef6:	6025      	str	r5, [r4, #0]
 8004ef8:	bf18      	it	ne
 8004efa:	6059      	strne	r1, [r3, #4]
 8004efc:	6863      	ldr	r3, [r4, #4]
 8004efe:	bf08      	it	eq
 8004f00:	f8c8 1000 	streq.w	r1, [r8]
 8004f04:	5162      	str	r2, [r4, r5]
 8004f06:	604b      	str	r3, [r1, #4]
 8004f08:	4630      	mov	r0, r6
 8004f0a:	f000 f82f 	bl	8004f6c <__malloc_unlock>
 8004f0e:	f104 000b 	add.w	r0, r4, #11
 8004f12:	1d23      	adds	r3, r4, #4
 8004f14:	f020 0007 	bic.w	r0, r0, #7
 8004f18:	1ac2      	subs	r2, r0, r3
 8004f1a:	bf1c      	itt	ne
 8004f1c:	1a1b      	subne	r3, r3, r0
 8004f1e:	50a3      	strne	r3, [r4, r2]
 8004f20:	e7af      	b.n	8004e82 <_malloc_r+0x22>
 8004f22:	6862      	ldr	r2, [r4, #4]
 8004f24:	42a3      	cmp	r3, r4
 8004f26:	bf0c      	ite	eq
 8004f28:	f8c8 2000 	streq.w	r2, [r8]
 8004f2c:	605a      	strne	r2, [r3, #4]
 8004f2e:	e7eb      	b.n	8004f08 <_malloc_r+0xa8>
 8004f30:	4623      	mov	r3, r4
 8004f32:	6864      	ldr	r4, [r4, #4]
 8004f34:	e7ae      	b.n	8004e94 <_malloc_r+0x34>
 8004f36:	463c      	mov	r4, r7
 8004f38:	687f      	ldr	r7, [r7, #4]
 8004f3a:	e7b6      	b.n	8004eaa <_malloc_r+0x4a>
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	42a3      	cmp	r3, r4
 8004f42:	d1fb      	bne.n	8004f3c <_malloc_r+0xdc>
 8004f44:	2300      	movs	r3, #0
 8004f46:	6053      	str	r3, [r2, #4]
 8004f48:	e7de      	b.n	8004f08 <_malloc_r+0xa8>
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	6033      	str	r3, [r6, #0]
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f000 f80c 	bl	8004f6c <__malloc_unlock>
 8004f54:	e794      	b.n	8004e80 <_malloc_r+0x20>
 8004f56:	6005      	str	r5, [r0, #0]
 8004f58:	e7d6      	b.n	8004f08 <_malloc_r+0xa8>
 8004f5a:	bf00      	nop
 8004f5c:	200003f0 	.word	0x200003f0

08004f60 <__malloc_lock>:
 8004f60:	4801      	ldr	r0, [pc, #4]	@ (8004f68 <__malloc_lock+0x8>)
 8004f62:	f7ff bf0f 	b.w	8004d84 <__retarget_lock_acquire_recursive>
 8004f66:	bf00      	nop
 8004f68:	200003e8 	.word	0x200003e8

08004f6c <__malloc_unlock>:
 8004f6c:	4801      	ldr	r0, [pc, #4]	@ (8004f74 <__malloc_unlock+0x8>)
 8004f6e:	f7ff bf0a 	b.w	8004d86 <__retarget_lock_release_recursive>
 8004f72:	bf00      	nop
 8004f74:	200003e8 	.word	0x200003e8

08004f78 <__ssputs_r>:
 8004f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f7c:	688e      	ldr	r6, [r1, #8]
 8004f7e:	461f      	mov	r7, r3
 8004f80:	42be      	cmp	r6, r7
 8004f82:	680b      	ldr	r3, [r1, #0]
 8004f84:	4682      	mov	sl, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	4690      	mov	r8, r2
 8004f8a:	d82d      	bhi.n	8004fe8 <__ssputs_r+0x70>
 8004f8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f94:	d026      	beq.n	8004fe4 <__ssputs_r+0x6c>
 8004f96:	6965      	ldr	r5, [r4, #20]
 8004f98:	6909      	ldr	r1, [r1, #16]
 8004f9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f9e:	eba3 0901 	sub.w	r9, r3, r1
 8004fa2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fa6:	1c7b      	adds	r3, r7, #1
 8004fa8:	444b      	add	r3, r9
 8004faa:	106d      	asrs	r5, r5, #1
 8004fac:	429d      	cmp	r5, r3
 8004fae:	bf38      	it	cc
 8004fb0:	461d      	movcc	r5, r3
 8004fb2:	0553      	lsls	r3, r2, #21
 8004fb4:	d527      	bpl.n	8005006 <__ssputs_r+0x8e>
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	f7ff ff52 	bl	8004e60 <_malloc_r>
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	b360      	cbz	r0, 800501a <__ssputs_r+0xa2>
 8004fc0:	6921      	ldr	r1, [r4, #16]
 8004fc2:	464a      	mov	r2, r9
 8004fc4:	f000 fae6 	bl	8005594 <memcpy>
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd2:	81a3      	strh	r3, [r4, #12]
 8004fd4:	6126      	str	r6, [r4, #16]
 8004fd6:	6165      	str	r5, [r4, #20]
 8004fd8:	444e      	add	r6, r9
 8004fda:	eba5 0509 	sub.w	r5, r5, r9
 8004fde:	6026      	str	r6, [r4, #0]
 8004fe0:	60a5      	str	r5, [r4, #8]
 8004fe2:	463e      	mov	r6, r7
 8004fe4:	42be      	cmp	r6, r7
 8004fe6:	d900      	bls.n	8004fea <__ssputs_r+0x72>
 8004fe8:	463e      	mov	r6, r7
 8004fea:	6820      	ldr	r0, [r4, #0]
 8004fec:	4632      	mov	r2, r6
 8004fee:	4641      	mov	r1, r8
 8004ff0:	f000 faa6 	bl	8005540 <memmove>
 8004ff4:	68a3      	ldr	r3, [r4, #8]
 8004ff6:	1b9b      	subs	r3, r3, r6
 8004ff8:	60a3      	str	r3, [r4, #8]
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	4433      	add	r3, r6
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	2000      	movs	r0, #0
 8005002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005006:	462a      	mov	r2, r5
 8005008:	f000 fad2 	bl	80055b0 <_realloc_r>
 800500c:	4606      	mov	r6, r0
 800500e:	2800      	cmp	r0, #0
 8005010:	d1e0      	bne.n	8004fd4 <__ssputs_r+0x5c>
 8005012:	6921      	ldr	r1, [r4, #16]
 8005014:	4650      	mov	r0, sl
 8005016:	f7ff feb7 	bl	8004d88 <_free_r>
 800501a:	230c      	movs	r3, #12
 800501c:	f8ca 3000 	str.w	r3, [sl]
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005026:	81a3      	strh	r3, [r4, #12]
 8005028:	f04f 30ff 	mov.w	r0, #4294967295
 800502c:	e7e9      	b.n	8005002 <__ssputs_r+0x8a>
	...

08005030 <_svfiprintf_r>:
 8005030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005034:	4698      	mov	r8, r3
 8005036:	898b      	ldrh	r3, [r1, #12]
 8005038:	061b      	lsls	r3, r3, #24
 800503a:	b09d      	sub	sp, #116	@ 0x74
 800503c:	4607      	mov	r7, r0
 800503e:	460d      	mov	r5, r1
 8005040:	4614      	mov	r4, r2
 8005042:	d510      	bpl.n	8005066 <_svfiprintf_r+0x36>
 8005044:	690b      	ldr	r3, [r1, #16]
 8005046:	b973      	cbnz	r3, 8005066 <_svfiprintf_r+0x36>
 8005048:	2140      	movs	r1, #64	@ 0x40
 800504a:	f7ff ff09 	bl	8004e60 <_malloc_r>
 800504e:	6028      	str	r0, [r5, #0]
 8005050:	6128      	str	r0, [r5, #16]
 8005052:	b930      	cbnz	r0, 8005062 <_svfiprintf_r+0x32>
 8005054:	230c      	movs	r3, #12
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	f04f 30ff 	mov.w	r0, #4294967295
 800505c:	b01d      	add	sp, #116	@ 0x74
 800505e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005062:	2340      	movs	r3, #64	@ 0x40
 8005064:	616b      	str	r3, [r5, #20]
 8005066:	2300      	movs	r3, #0
 8005068:	9309      	str	r3, [sp, #36]	@ 0x24
 800506a:	2320      	movs	r3, #32
 800506c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005070:	f8cd 800c 	str.w	r8, [sp, #12]
 8005074:	2330      	movs	r3, #48	@ 0x30
 8005076:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005214 <_svfiprintf_r+0x1e4>
 800507a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800507e:	f04f 0901 	mov.w	r9, #1
 8005082:	4623      	mov	r3, r4
 8005084:	469a      	mov	sl, r3
 8005086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800508a:	b10a      	cbz	r2, 8005090 <_svfiprintf_r+0x60>
 800508c:	2a25      	cmp	r2, #37	@ 0x25
 800508e:	d1f9      	bne.n	8005084 <_svfiprintf_r+0x54>
 8005090:	ebba 0b04 	subs.w	fp, sl, r4
 8005094:	d00b      	beq.n	80050ae <_svfiprintf_r+0x7e>
 8005096:	465b      	mov	r3, fp
 8005098:	4622      	mov	r2, r4
 800509a:	4629      	mov	r1, r5
 800509c:	4638      	mov	r0, r7
 800509e:	f7ff ff6b 	bl	8004f78 <__ssputs_r>
 80050a2:	3001      	adds	r0, #1
 80050a4:	f000 80a7 	beq.w	80051f6 <_svfiprintf_r+0x1c6>
 80050a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050aa:	445a      	add	r2, fp
 80050ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80050ae:	f89a 3000 	ldrb.w	r3, [sl]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 809f 	beq.w	80051f6 <_svfiprintf_r+0x1c6>
 80050b8:	2300      	movs	r3, #0
 80050ba:	f04f 32ff 	mov.w	r2, #4294967295
 80050be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050c2:	f10a 0a01 	add.w	sl, sl, #1
 80050c6:	9304      	str	r3, [sp, #16]
 80050c8:	9307      	str	r3, [sp, #28]
 80050ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80050d0:	4654      	mov	r4, sl
 80050d2:	2205      	movs	r2, #5
 80050d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d8:	484e      	ldr	r0, [pc, #312]	@ (8005214 <_svfiprintf_r+0x1e4>)
 80050da:	f7fb f891 	bl	8000200 <memchr>
 80050de:	9a04      	ldr	r2, [sp, #16]
 80050e0:	b9d8      	cbnz	r0, 800511a <_svfiprintf_r+0xea>
 80050e2:	06d0      	lsls	r0, r2, #27
 80050e4:	bf44      	itt	mi
 80050e6:	2320      	movmi	r3, #32
 80050e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050ec:	0711      	lsls	r1, r2, #28
 80050ee:	bf44      	itt	mi
 80050f0:	232b      	movmi	r3, #43	@ 0x2b
 80050f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050f6:	f89a 3000 	ldrb.w	r3, [sl]
 80050fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80050fc:	d015      	beq.n	800512a <_svfiprintf_r+0xfa>
 80050fe:	9a07      	ldr	r2, [sp, #28]
 8005100:	4654      	mov	r4, sl
 8005102:	2000      	movs	r0, #0
 8005104:	f04f 0c0a 	mov.w	ip, #10
 8005108:	4621      	mov	r1, r4
 800510a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800510e:	3b30      	subs	r3, #48	@ 0x30
 8005110:	2b09      	cmp	r3, #9
 8005112:	d94b      	bls.n	80051ac <_svfiprintf_r+0x17c>
 8005114:	b1b0      	cbz	r0, 8005144 <_svfiprintf_r+0x114>
 8005116:	9207      	str	r2, [sp, #28]
 8005118:	e014      	b.n	8005144 <_svfiprintf_r+0x114>
 800511a:	eba0 0308 	sub.w	r3, r0, r8
 800511e:	fa09 f303 	lsl.w	r3, r9, r3
 8005122:	4313      	orrs	r3, r2
 8005124:	9304      	str	r3, [sp, #16]
 8005126:	46a2      	mov	sl, r4
 8005128:	e7d2      	b.n	80050d0 <_svfiprintf_r+0xa0>
 800512a:	9b03      	ldr	r3, [sp, #12]
 800512c:	1d19      	adds	r1, r3, #4
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	9103      	str	r1, [sp, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	bfbb      	ittet	lt
 8005136:	425b      	neglt	r3, r3
 8005138:	f042 0202 	orrlt.w	r2, r2, #2
 800513c:	9307      	strge	r3, [sp, #28]
 800513e:	9307      	strlt	r3, [sp, #28]
 8005140:	bfb8      	it	lt
 8005142:	9204      	strlt	r2, [sp, #16]
 8005144:	7823      	ldrb	r3, [r4, #0]
 8005146:	2b2e      	cmp	r3, #46	@ 0x2e
 8005148:	d10a      	bne.n	8005160 <_svfiprintf_r+0x130>
 800514a:	7863      	ldrb	r3, [r4, #1]
 800514c:	2b2a      	cmp	r3, #42	@ 0x2a
 800514e:	d132      	bne.n	80051b6 <_svfiprintf_r+0x186>
 8005150:	9b03      	ldr	r3, [sp, #12]
 8005152:	1d1a      	adds	r2, r3, #4
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	9203      	str	r2, [sp, #12]
 8005158:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800515c:	3402      	adds	r4, #2
 800515e:	9305      	str	r3, [sp, #20]
 8005160:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005224 <_svfiprintf_r+0x1f4>
 8005164:	7821      	ldrb	r1, [r4, #0]
 8005166:	2203      	movs	r2, #3
 8005168:	4650      	mov	r0, sl
 800516a:	f7fb f849 	bl	8000200 <memchr>
 800516e:	b138      	cbz	r0, 8005180 <_svfiprintf_r+0x150>
 8005170:	9b04      	ldr	r3, [sp, #16]
 8005172:	eba0 000a 	sub.w	r0, r0, sl
 8005176:	2240      	movs	r2, #64	@ 0x40
 8005178:	4082      	lsls	r2, r0
 800517a:	4313      	orrs	r3, r2
 800517c:	3401      	adds	r4, #1
 800517e:	9304      	str	r3, [sp, #16]
 8005180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005184:	4824      	ldr	r0, [pc, #144]	@ (8005218 <_svfiprintf_r+0x1e8>)
 8005186:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800518a:	2206      	movs	r2, #6
 800518c:	f7fb f838 	bl	8000200 <memchr>
 8005190:	2800      	cmp	r0, #0
 8005192:	d036      	beq.n	8005202 <_svfiprintf_r+0x1d2>
 8005194:	4b21      	ldr	r3, [pc, #132]	@ (800521c <_svfiprintf_r+0x1ec>)
 8005196:	bb1b      	cbnz	r3, 80051e0 <_svfiprintf_r+0x1b0>
 8005198:	9b03      	ldr	r3, [sp, #12]
 800519a:	3307      	adds	r3, #7
 800519c:	f023 0307 	bic.w	r3, r3, #7
 80051a0:	3308      	adds	r3, #8
 80051a2:	9303      	str	r3, [sp, #12]
 80051a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a6:	4433      	add	r3, r6
 80051a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80051aa:	e76a      	b.n	8005082 <_svfiprintf_r+0x52>
 80051ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80051b0:	460c      	mov	r4, r1
 80051b2:	2001      	movs	r0, #1
 80051b4:	e7a8      	b.n	8005108 <_svfiprintf_r+0xd8>
 80051b6:	2300      	movs	r3, #0
 80051b8:	3401      	adds	r4, #1
 80051ba:	9305      	str	r3, [sp, #20]
 80051bc:	4619      	mov	r1, r3
 80051be:	f04f 0c0a 	mov.w	ip, #10
 80051c2:	4620      	mov	r0, r4
 80051c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051c8:	3a30      	subs	r2, #48	@ 0x30
 80051ca:	2a09      	cmp	r2, #9
 80051cc:	d903      	bls.n	80051d6 <_svfiprintf_r+0x1a6>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0c6      	beq.n	8005160 <_svfiprintf_r+0x130>
 80051d2:	9105      	str	r1, [sp, #20]
 80051d4:	e7c4      	b.n	8005160 <_svfiprintf_r+0x130>
 80051d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80051da:	4604      	mov	r4, r0
 80051dc:	2301      	movs	r3, #1
 80051de:	e7f0      	b.n	80051c2 <_svfiprintf_r+0x192>
 80051e0:	ab03      	add	r3, sp, #12
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	462a      	mov	r2, r5
 80051e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005220 <_svfiprintf_r+0x1f0>)
 80051e8:	a904      	add	r1, sp, #16
 80051ea:	4638      	mov	r0, r7
 80051ec:	f3af 8000 	nop.w
 80051f0:	1c42      	adds	r2, r0, #1
 80051f2:	4606      	mov	r6, r0
 80051f4:	d1d6      	bne.n	80051a4 <_svfiprintf_r+0x174>
 80051f6:	89ab      	ldrh	r3, [r5, #12]
 80051f8:	065b      	lsls	r3, r3, #25
 80051fa:	f53f af2d 	bmi.w	8005058 <_svfiprintf_r+0x28>
 80051fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005200:	e72c      	b.n	800505c <_svfiprintf_r+0x2c>
 8005202:	ab03      	add	r3, sp, #12
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	462a      	mov	r2, r5
 8005208:	4b05      	ldr	r3, [pc, #20]	@ (8005220 <_svfiprintf_r+0x1f0>)
 800520a:	a904      	add	r1, sp, #16
 800520c:	4638      	mov	r0, r7
 800520e:	f000 f879 	bl	8005304 <_printf_i>
 8005212:	e7ed      	b.n	80051f0 <_svfiprintf_r+0x1c0>
 8005214:	08005b84 	.word	0x08005b84
 8005218:	08005b8e 	.word	0x08005b8e
 800521c:	00000000 	.word	0x00000000
 8005220:	08004f79 	.word	0x08004f79
 8005224:	08005b8a 	.word	0x08005b8a

08005228 <_printf_common>:
 8005228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800522c:	4616      	mov	r6, r2
 800522e:	4698      	mov	r8, r3
 8005230:	688a      	ldr	r2, [r1, #8]
 8005232:	690b      	ldr	r3, [r1, #16]
 8005234:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005238:	4293      	cmp	r3, r2
 800523a:	bfb8      	it	lt
 800523c:	4613      	movlt	r3, r2
 800523e:	6033      	str	r3, [r6, #0]
 8005240:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005244:	4607      	mov	r7, r0
 8005246:	460c      	mov	r4, r1
 8005248:	b10a      	cbz	r2, 800524e <_printf_common+0x26>
 800524a:	3301      	adds	r3, #1
 800524c:	6033      	str	r3, [r6, #0]
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	0699      	lsls	r1, r3, #26
 8005252:	bf42      	ittt	mi
 8005254:	6833      	ldrmi	r3, [r6, #0]
 8005256:	3302      	addmi	r3, #2
 8005258:	6033      	strmi	r3, [r6, #0]
 800525a:	6825      	ldr	r5, [r4, #0]
 800525c:	f015 0506 	ands.w	r5, r5, #6
 8005260:	d106      	bne.n	8005270 <_printf_common+0x48>
 8005262:	f104 0a19 	add.w	sl, r4, #25
 8005266:	68e3      	ldr	r3, [r4, #12]
 8005268:	6832      	ldr	r2, [r6, #0]
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	42ab      	cmp	r3, r5
 800526e:	dc26      	bgt.n	80052be <_printf_common+0x96>
 8005270:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005274:	6822      	ldr	r2, [r4, #0]
 8005276:	3b00      	subs	r3, #0
 8005278:	bf18      	it	ne
 800527a:	2301      	movne	r3, #1
 800527c:	0692      	lsls	r2, r2, #26
 800527e:	d42b      	bmi.n	80052d8 <_printf_common+0xb0>
 8005280:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005284:	4641      	mov	r1, r8
 8005286:	4638      	mov	r0, r7
 8005288:	47c8      	blx	r9
 800528a:	3001      	adds	r0, #1
 800528c:	d01e      	beq.n	80052cc <_printf_common+0xa4>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	6922      	ldr	r2, [r4, #16]
 8005292:	f003 0306 	and.w	r3, r3, #6
 8005296:	2b04      	cmp	r3, #4
 8005298:	bf02      	ittt	eq
 800529a:	68e5      	ldreq	r5, [r4, #12]
 800529c:	6833      	ldreq	r3, [r6, #0]
 800529e:	1aed      	subeq	r5, r5, r3
 80052a0:	68a3      	ldr	r3, [r4, #8]
 80052a2:	bf0c      	ite	eq
 80052a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052a8:	2500      	movne	r5, #0
 80052aa:	4293      	cmp	r3, r2
 80052ac:	bfc4      	itt	gt
 80052ae:	1a9b      	subgt	r3, r3, r2
 80052b0:	18ed      	addgt	r5, r5, r3
 80052b2:	2600      	movs	r6, #0
 80052b4:	341a      	adds	r4, #26
 80052b6:	42b5      	cmp	r5, r6
 80052b8:	d11a      	bne.n	80052f0 <_printf_common+0xc8>
 80052ba:	2000      	movs	r0, #0
 80052bc:	e008      	b.n	80052d0 <_printf_common+0xa8>
 80052be:	2301      	movs	r3, #1
 80052c0:	4652      	mov	r2, sl
 80052c2:	4641      	mov	r1, r8
 80052c4:	4638      	mov	r0, r7
 80052c6:	47c8      	blx	r9
 80052c8:	3001      	adds	r0, #1
 80052ca:	d103      	bne.n	80052d4 <_printf_common+0xac>
 80052cc:	f04f 30ff 	mov.w	r0, #4294967295
 80052d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d4:	3501      	adds	r5, #1
 80052d6:	e7c6      	b.n	8005266 <_printf_common+0x3e>
 80052d8:	18e1      	adds	r1, r4, r3
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	2030      	movs	r0, #48	@ 0x30
 80052de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052e2:	4422      	add	r2, r4
 80052e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052ec:	3302      	adds	r3, #2
 80052ee:	e7c7      	b.n	8005280 <_printf_common+0x58>
 80052f0:	2301      	movs	r3, #1
 80052f2:	4622      	mov	r2, r4
 80052f4:	4641      	mov	r1, r8
 80052f6:	4638      	mov	r0, r7
 80052f8:	47c8      	blx	r9
 80052fa:	3001      	adds	r0, #1
 80052fc:	d0e6      	beq.n	80052cc <_printf_common+0xa4>
 80052fe:	3601      	adds	r6, #1
 8005300:	e7d9      	b.n	80052b6 <_printf_common+0x8e>
	...

08005304 <_printf_i>:
 8005304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	7e0f      	ldrb	r7, [r1, #24]
 800530a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800530c:	2f78      	cmp	r7, #120	@ 0x78
 800530e:	4691      	mov	r9, r2
 8005310:	4680      	mov	r8, r0
 8005312:	460c      	mov	r4, r1
 8005314:	469a      	mov	sl, r3
 8005316:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800531a:	d807      	bhi.n	800532c <_printf_i+0x28>
 800531c:	2f62      	cmp	r7, #98	@ 0x62
 800531e:	d80a      	bhi.n	8005336 <_printf_i+0x32>
 8005320:	2f00      	cmp	r7, #0
 8005322:	f000 80d1 	beq.w	80054c8 <_printf_i+0x1c4>
 8005326:	2f58      	cmp	r7, #88	@ 0x58
 8005328:	f000 80b8 	beq.w	800549c <_printf_i+0x198>
 800532c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005330:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005334:	e03a      	b.n	80053ac <_printf_i+0xa8>
 8005336:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800533a:	2b15      	cmp	r3, #21
 800533c:	d8f6      	bhi.n	800532c <_printf_i+0x28>
 800533e:	a101      	add	r1, pc, #4	@ (adr r1, 8005344 <_printf_i+0x40>)
 8005340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005344:	0800539d 	.word	0x0800539d
 8005348:	080053b1 	.word	0x080053b1
 800534c:	0800532d 	.word	0x0800532d
 8005350:	0800532d 	.word	0x0800532d
 8005354:	0800532d 	.word	0x0800532d
 8005358:	0800532d 	.word	0x0800532d
 800535c:	080053b1 	.word	0x080053b1
 8005360:	0800532d 	.word	0x0800532d
 8005364:	0800532d 	.word	0x0800532d
 8005368:	0800532d 	.word	0x0800532d
 800536c:	0800532d 	.word	0x0800532d
 8005370:	080054af 	.word	0x080054af
 8005374:	080053db 	.word	0x080053db
 8005378:	08005469 	.word	0x08005469
 800537c:	0800532d 	.word	0x0800532d
 8005380:	0800532d 	.word	0x0800532d
 8005384:	080054d1 	.word	0x080054d1
 8005388:	0800532d 	.word	0x0800532d
 800538c:	080053db 	.word	0x080053db
 8005390:	0800532d 	.word	0x0800532d
 8005394:	0800532d 	.word	0x0800532d
 8005398:	08005471 	.word	0x08005471
 800539c:	6833      	ldr	r3, [r6, #0]
 800539e:	1d1a      	adds	r2, r3, #4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6032      	str	r2, [r6, #0]
 80053a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053ac:	2301      	movs	r3, #1
 80053ae:	e09c      	b.n	80054ea <_printf_i+0x1e6>
 80053b0:	6833      	ldr	r3, [r6, #0]
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	1d19      	adds	r1, r3, #4
 80053b6:	6031      	str	r1, [r6, #0]
 80053b8:	0606      	lsls	r6, r0, #24
 80053ba:	d501      	bpl.n	80053c0 <_printf_i+0xbc>
 80053bc:	681d      	ldr	r5, [r3, #0]
 80053be:	e003      	b.n	80053c8 <_printf_i+0xc4>
 80053c0:	0645      	lsls	r5, r0, #25
 80053c2:	d5fb      	bpl.n	80053bc <_printf_i+0xb8>
 80053c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053c8:	2d00      	cmp	r5, #0
 80053ca:	da03      	bge.n	80053d4 <_printf_i+0xd0>
 80053cc:	232d      	movs	r3, #45	@ 0x2d
 80053ce:	426d      	negs	r5, r5
 80053d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053d4:	4858      	ldr	r0, [pc, #352]	@ (8005538 <_printf_i+0x234>)
 80053d6:	230a      	movs	r3, #10
 80053d8:	e011      	b.n	80053fe <_printf_i+0xfa>
 80053da:	6821      	ldr	r1, [r4, #0]
 80053dc:	6833      	ldr	r3, [r6, #0]
 80053de:	0608      	lsls	r0, r1, #24
 80053e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80053e4:	d402      	bmi.n	80053ec <_printf_i+0xe8>
 80053e6:	0649      	lsls	r1, r1, #25
 80053e8:	bf48      	it	mi
 80053ea:	b2ad      	uxthmi	r5, r5
 80053ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80053ee:	4852      	ldr	r0, [pc, #328]	@ (8005538 <_printf_i+0x234>)
 80053f0:	6033      	str	r3, [r6, #0]
 80053f2:	bf14      	ite	ne
 80053f4:	230a      	movne	r3, #10
 80053f6:	2308      	moveq	r3, #8
 80053f8:	2100      	movs	r1, #0
 80053fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053fe:	6866      	ldr	r6, [r4, #4]
 8005400:	60a6      	str	r6, [r4, #8]
 8005402:	2e00      	cmp	r6, #0
 8005404:	db05      	blt.n	8005412 <_printf_i+0x10e>
 8005406:	6821      	ldr	r1, [r4, #0]
 8005408:	432e      	orrs	r6, r5
 800540a:	f021 0104 	bic.w	r1, r1, #4
 800540e:	6021      	str	r1, [r4, #0]
 8005410:	d04b      	beq.n	80054aa <_printf_i+0x1a6>
 8005412:	4616      	mov	r6, r2
 8005414:	fbb5 f1f3 	udiv	r1, r5, r3
 8005418:	fb03 5711 	mls	r7, r3, r1, r5
 800541c:	5dc7      	ldrb	r7, [r0, r7]
 800541e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005422:	462f      	mov	r7, r5
 8005424:	42bb      	cmp	r3, r7
 8005426:	460d      	mov	r5, r1
 8005428:	d9f4      	bls.n	8005414 <_printf_i+0x110>
 800542a:	2b08      	cmp	r3, #8
 800542c:	d10b      	bne.n	8005446 <_printf_i+0x142>
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	07df      	lsls	r7, r3, #31
 8005432:	d508      	bpl.n	8005446 <_printf_i+0x142>
 8005434:	6923      	ldr	r3, [r4, #16]
 8005436:	6861      	ldr	r1, [r4, #4]
 8005438:	4299      	cmp	r1, r3
 800543a:	bfde      	ittt	le
 800543c:	2330      	movle	r3, #48	@ 0x30
 800543e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005442:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005446:	1b92      	subs	r2, r2, r6
 8005448:	6122      	str	r2, [r4, #16]
 800544a:	f8cd a000 	str.w	sl, [sp]
 800544e:	464b      	mov	r3, r9
 8005450:	aa03      	add	r2, sp, #12
 8005452:	4621      	mov	r1, r4
 8005454:	4640      	mov	r0, r8
 8005456:	f7ff fee7 	bl	8005228 <_printf_common>
 800545a:	3001      	adds	r0, #1
 800545c:	d14a      	bne.n	80054f4 <_printf_i+0x1f0>
 800545e:	f04f 30ff 	mov.w	r0, #4294967295
 8005462:	b004      	add	sp, #16
 8005464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	f043 0320 	orr.w	r3, r3, #32
 800546e:	6023      	str	r3, [r4, #0]
 8005470:	4832      	ldr	r0, [pc, #200]	@ (800553c <_printf_i+0x238>)
 8005472:	2778      	movs	r7, #120	@ 0x78
 8005474:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	6831      	ldr	r1, [r6, #0]
 800547c:	061f      	lsls	r7, r3, #24
 800547e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005482:	d402      	bmi.n	800548a <_printf_i+0x186>
 8005484:	065f      	lsls	r7, r3, #25
 8005486:	bf48      	it	mi
 8005488:	b2ad      	uxthmi	r5, r5
 800548a:	6031      	str	r1, [r6, #0]
 800548c:	07d9      	lsls	r1, r3, #31
 800548e:	bf44      	itt	mi
 8005490:	f043 0320 	orrmi.w	r3, r3, #32
 8005494:	6023      	strmi	r3, [r4, #0]
 8005496:	b11d      	cbz	r5, 80054a0 <_printf_i+0x19c>
 8005498:	2310      	movs	r3, #16
 800549a:	e7ad      	b.n	80053f8 <_printf_i+0xf4>
 800549c:	4826      	ldr	r0, [pc, #152]	@ (8005538 <_printf_i+0x234>)
 800549e:	e7e9      	b.n	8005474 <_printf_i+0x170>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	f023 0320 	bic.w	r3, r3, #32
 80054a6:	6023      	str	r3, [r4, #0]
 80054a8:	e7f6      	b.n	8005498 <_printf_i+0x194>
 80054aa:	4616      	mov	r6, r2
 80054ac:	e7bd      	b.n	800542a <_printf_i+0x126>
 80054ae:	6833      	ldr	r3, [r6, #0]
 80054b0:	6825      	ldr	r5, [r4, #0]
 80054b2:	6961      	ldr	r1, [r4, #20]
 80054b4:	1d18      	adds	r0, r3, #4
 80054b6:	6030      	str	r0, [r6, #0]
 80054b8:	062e      	lsls	r6, r5, #24
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	d501      	bpl.n	80054c2 <_printf_i+0x1be>
 80054be:	6019      	str	r1, [r3, #0]
 80054c0:	e002      	b.n	80054c8 <_printf_i+0x1c4>
 80054c2:	0668      	lsls	r0, r5, #25
 80054c4:	d5fb      	bpl.n	80054be <_printf_i+0x1ba>
 80054c6:	8019      	strh	r1, [r3, #0]
 80054c8:	2300      	movs	r3, #0
 80054ca:	6123      	str	r3, [r4, #16]
 80054cc:	4616      	mov	r6, r2
 80054ce:	e7bc      	b.n	800544a <_printf_i+0x146>
 80054d0:	6833      	ldr	r3, [r6, #0]
 80054d2:	1d1a      	adds	r2, r3, #4
 80054d4:	6032      	str	r2, [r6, #0]
 80054d6:	681e      	ldr	r6, [r3, #0]
 80054d8:	6862      	ldr	r2, [r4, #4]
 80054da:	2100      	movs	r1, #0
 80054dc:	4630      	mov	r0, r6
 80054de:	f7fa fe8f 	bl	8000200 <memchr>
 80054e2:	b108      	cbz	r0, 80054e8 <_printf_i+0x1e4>
 80054e4:	1b80      	subs	r0, r0, r6
 80054e6:	6060      	str	r0, [r4, #4]
 80054e8:	6863      	ldr	r3, [r4, #4]
 80054ea:	6123      	str	r3, [r4, #16]
 80054ec:	2300      	movs	r3, #0
 80054ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054f2:	e7aa      	b.n	800544a <_printf_i+0x146>
 80054f4:	6923      	ldr	r3, [r4, #16]
 80054f6:	4632      	mov	r2, r6
 80054f8:	4649      	mov	r1, r9
 80054fa:	4640      	mov	r0, r8
 80054fc:	47d0      	blx	sl
 80054fe:	3001      	adds	r0, #1
 8005500:	d0ad      	beq.n	800545e <_printf_i+0x15a>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	079b      	lsls	r3, r3, #30
 8005506:	d413      	bmi.n	8005530 <_printf_i+0x22c>
 8005508:	68e0      	ldr	r0, [r4, #12]
 800550a:	9b03      	ldr	r3, [sp, #12]
 800550c:	4298      	cmp	r0, r3
 800550e:	bfb8      	it	lt
 8005510:	4618      	movlt	r0, r3
 8005512:	e7a6      	b.n	8005462 <_printf_i+0x15e>
 8005514:	2301      	movs	r3, #1
 8005516:	4632      	mov	r2, r6
 8005518:	4649      	mov	r1, r9
 800551a:	4640      	mov	r0, r8
 800551c:	47d0      	blx	sl
 800551e:	3001      	adds	r0, #1
 8005520:	d09d      	beq.n	800545e <_printf_i+0x15a>
 8005522:	3501      	adds	r5, #1
 8005524:	68e3      	ldr	r3, [r4, #12]
 8005526:	9903      	ldr	r1, [sp, #12]
 8005528:	1a5b      	subs	r3, r3, r1
 800552a:	42ab      	cmp	r3, r5
 800552c:	dcf2      	bgt.n	8005514 <_printf_i+0x210>
 800552e:	e7eb      	b.n	8005508 <_printf_i+0x204>
 8005530:	2500      	movs	r5, #0
 8005532:	f104 0619 	add.w	r6, r4, #25
 8005536:	e7f5      	b.n	8005524 <_printf_i+0x220>
 8005538:	08005b95 	.word	0x08005b95
 800553c:	08005ba6 	.word	0x08005ba6

08005540 <memmove>:
 8005540:	4288      	cmp	r0, r1
 8005542:	b510      	push	{r4, lr}
 8005544:	eb01 0402 	add.w	r4, r1, r2
 8005548:	d902      	bls.n	8005550 <memmove+0x10>
 800554a:	4284      	cmp	r4, r0
 800554c:	4623      	mov	r3, r4
 800554e:	d807      	bhi.n	8005560 <memmove+0x20>
 8005550:	1e43      	subs	r3, r0, #1
 8005552:	42a1      	cmp	r1, r4
 8005554:	d008      	beq.n	8005568 <memmove+0x28>
 8005556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800555a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800555e:	e7f8      	b.n	8005552 <memmove+0x12>
 8005560:	4402      	add	r2, r0
 8005562:	4601      	mov	r1, r0
 8005564:	428a      	cmp	r2, r1
 8005566:	d100      	bne.n	800556a <memmove+0x2a>
 8005568:	bd10      	pop	{r4, pc}
 800556a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800556e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005572:	e7f7      	b.n	8005564 <memmove+0x24>

08005574 <_sbrk_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4d06      	ldr	r5, [pc, #24]	@ (8005590 <_sbrk_r+0x1c>)
 8005578:	2300      	movs	r3, #0
 800557a:	4604      	mov	r4, r0
 800557c:	4608      	mov	r0, r1
 800557e:	602b      	str	r3, [r5, #0]
 8005580:	f7fc f84e 	bl	8001620 <_sbrk>
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	d102      	bne.n	800558e <_sbrk_r+0x1a>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	b103      	cbz	r3, 800558e <_sbrk_r+0x1a>
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	bd38      	pop	{r3, r4, r5, pc}
 8005590:	200003e4 	.word	0x200003e4

08005594 <memcpy>:
 8005594:	440a      	add	r2, r1
 8005596:	4291      	cmp	r1, r2
 8005598:	f100 33ff 	add.w	r3, r0, #4294967295
 800559c:	d100      	bne.n	80055a0 <memcpy+0xc>
 800559e:	4770      	bx	lr
 80055a0:	b510      	push	{r4, lr}
 80055a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055aa:	4291      	cmp	r1, r2
 80055ac:	d1f9      	bne.n	80055a2 <memcpy+0xe>
 80055ae:	bd10      	pop	{r4, pc}

080055b0 <_realloc_r>:
 80055b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b4:	4607      	mov	r7, r0
 80055b6:	4614      	mov	r4, r2
 80055b8:	460d      	mov	r5, r1
 80055ba:	b921      	cbnz	r1, 80055c6 <_realloc_r+0x16>
 80055bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055c0:	4611      	mov	r1, r2
 80055c2:	f7ff bc4d 	b.w	8004e60 <_malloc_r>
 80055c6:	b92a      	cbnz	r2, 80055d4 <_realloc_r+0x24>
 80055c8:	f7ff fbde 	bl	8004d88 <_free_r>
 80055cc:	4625      	mov	r5, r4
 80055ce:	4628      	mov	r0, r5
 80055d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d4:	f000 f81a 	bl	800560c <_malloc_usable_size_r>
 80055d8:	4284      	cmp	r4, r0
 80055da:	4606      	mov	r6, r0
 80055dc:	d802      	bhi.n	80055e4 <_realloc_r+0x34>
 80055de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055e2:	d8f4      	bhi.n	80055ce <_realloc_r+0x1e>
 80055e4:	4621      	mov	r1, r4
 80055e6:	4638      	mov	r0, r7
 80055e8:	f7ff fc3a 	bl	8004e60 <_malloc_r>
 80055ec:	4680      	mov	r8, r0
 80055ee:	b908      	cbnz	r0, 80055f4 <_realloc_r+0x44>
 80055f0:	4645      	mov	r5, r8
 80055f2:	e7ec      	b.n	80055ce <_realloc_r+0x1e>
 80055f4:	42b4      	cmp	r4, r6
 80055f6:	4622      	mov	r2, r4
 80055f8:	4629      	mov	r1, r5
 80055fa:	bf28      	it	cs
 80055fc:	4632      	movcs	r2, r6
 80055fe:	f7ff ffc9 	bl	8005594 <memcpy>
 8005602:	4629      	mov	r1, r5
 8005604:	4638      	mov	r0, r7
 8005606:	f7ff fbbf 	bl	8004d88 <_free_r>
 800560a:	e7f1      	b.n	80055f0 <_realloc_r+0x40>

0800560c <_malloc_usable_size_r>:
 800560c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005610:	1f18      	subs	r0, r3, #4
 8005612:	2b00      	cmp	r3, #0
 8005614:	bfbc      	itt	lt
 8005616:	580b      	ldrlt	r3, [r1, r0]
 8005618:	18c0      	addlt	r0, r0, r3
 800561a:	4770      	bx	lr

0800561c <_init>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	bf00      	nop
 8005620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005622:	bc08      	pop	{r3}
 8005624:	469e      	mov	lr, r3
 8005626:	4770      	bx	lr

08005628 <_fini>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr
