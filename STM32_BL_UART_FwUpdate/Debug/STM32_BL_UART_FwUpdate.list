
STM32_BL_UART_FwUpdate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054ac  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800565c  0800565c  0000665c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c78  08005c78  00007088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c78  08005c78  00006c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c80  08005c80  00007088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c80  08005c80  00006c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c84  08005c84  00006c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08005c88  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000088  08005d10  00007088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08005d10  000073f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce8f  00000000  00000000  000070b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223d  00000000  00000000  00013f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00016188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ec  00000000  00000000  00016d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd7  00000000  00000000  0001760c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6be  00000000  00000000  000403e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7ab0  00000000  00000000  0004eaa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146551  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000337c  00000000  00000000  00146594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00149910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005644 	.word	0x08005644

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08005644 	.word	0x08005644

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f001 f8aa 	bl	800172a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f85f 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f92f 	bl	800083c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005de:	f000 f8d1 	bl	8000784 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f8fb 	bl	80007dc <MX_USART2_UART_Init>
  MX_CRC_Init();
 80005e6:	f000 f8ab 	bl	8000740 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /*Initially active bank is set as FLASH_ACTIVE_BANK1 as factory setup. TODO: Write protect and other necessary operations*/
  update_active_bank_number(FLASH_ACTIVE_BANK2);
 80005ea:	2002      	movs	r0, #2
 80005ec:	f000 fec6 	bl	800137c <update_active_bank_number>

  /*Fetch the bank no. which has to be activated*/
  active_bank_number = fetch_active_bank_number();
 80005f0:	f000 fef8 	bl	80013e4 <fetch_active_bank_number>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <main+0xa8>)
 80005fa:	701a      	strb	r2, [r3, #0]
  printmsg("BL_DEBUG_MSG: Active Bank: %d \n\r", active_bank_number);
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <main+0xa8>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	481d      	ldr	r0, [pc, #116]	@ (8000678 <main+0xac>)
 8000604:	f000 f9c0 	bl	8000988 <printmsg>


  /*If button is pressed*/
  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8000608:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800060c:	481b      	ldr	r0, [pc, #108]	@ (800067c <main+0xb0>)
 800060e:	f002 f95b 	bl	80028c8 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d126      	bne.n	8000666 <main+0x9a>
  {
	  printmsg("BL_DEBUG_MSG: Button pressed. Checking for firmware updates.\n\r");
 8000618:	4819      	ldr	r0, [pc, #100]	@ (8000680 <main+0xb4>)
 800061a:	f000 f9b5 	bl	8000988 <printmsg>
	  /* Function to return the version available on the host application */
	  //uint8_t available_version = fetch_available_firmware_version(); TODO: Fix Flow Logic
	  //printmsg("BL_DEBUG_MSG: Fetched version: %d \n\r", available_version);

	  /* Check if the user needs to update firmware, get input via Debug UART */
	  printmsg("BL_DEBUG_MSG: Update Firmware? Y/n \n\r");
 800061e:	4819      	ldr	r0, [pc, #100]	@ (8000684 <main+0xb8>)
 8000620:	f000 f9b2 	bl	8000988 <printmsg>
	  uint8_t update_option;
	  HAL_UART_Receive(D_UART, &update_option, 1, HAL_MAX_DELAY);
 8000624:	1df9      	adds	r1, r7, #7
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	2201      	movs	r2, #1
 800062c:	4816      	ldr	r0, [pc, #88]	@ (8000688 <main+0xbc>)
 800062e:	f003 fdce 	bl	80041ce <HAL_UART_Receive>
	  if(update_option == 'Y' || update_option == 'y')
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b59      	cmp	r3, #89	@ 0x59
 8000636:	d002      	beq.n	800063e <main+0x72>
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	2b79      	cmp	r3, #121	@ 0x79
 800063c:	d102      	bne.n	8000644 <main+0x78>
	  {
		  /*User requires a firmware update */
		  handle_firmware_update();
 800063e:	f000 fe45 	bl	80012cc <handle_firmware_update>
 8000642:	e015      	b.n	8000670 <main+0xa4>

	  }else if(update_option == 'N' || update_option == 'n')
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b4e      	cmp	r3, #78	@ 0x4e
 8000648:	d002      	beq.n	8000650 <main+0x84>
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b6e      	cmp	r3, #110	@ 0x6e
 800064e:	d105      	bne.n	800065c <main+0x90>
	  {
		  /*User does not requires a firmware update, go to custom boot loader*/
		  printmsg("BL_DEBUG_MSG: Update not required, entering bootloader mode \n\r");
 8000650:	480e      	ldr	r0, [pc, #56]	@ (800068c <main+0xc0>)
 8000652:	f000 f999 	bl	8000988 <printmsg>

		  /*Continuously check for user inputs to the boot loader*/
		  bootloader_uart_read_data();
 8000656:	f000 fa11 	bl	8000a7c <bootloader_uart_read_data>
 800065a:	e009      	b.n	8000670 <main+0xa4>

	  }else{
		  printmsg("BL_DEBUG_MSG: Invalid option. Please reset the board. \n\r");
 800065c:	480c      	ldr	r0, [pc, #48]	@ (8000690 <main+0xc4>)
 800065e:	f000 f993 	bl	8000988 <printmsg>
		  while(1);
 8000662:	bf00      	nop
 8000664:	e7fd      	b.n	8000662 <main+0x96>
	  }

  }else{

	  printmsg("BL_DEBUG_MSG: Button not pressed. Executing user application\n\r");
 8000666:	480b      	ldr	r0, [pc, #44]	@ (8000694 <main+0xc8>)
 8000668:	f000 f98e 	bl	8000988 <printmsg>

	  bootloader_jump_to_active_bank(); /*Jump to the active bank binaries*/
 800066c:	f000 f9b2 	bl	80009d4 <bootloader_jump_to_active_bank>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <main+0xa4>
 8000674:	200002a0 	.word	0x200002a0
 8000678:	0800565c 	.word	0x0800565c
 800067c:	48000800 	.word	0x48000800
 8000680:	08005680 	.word	0x08005680
 8000684:	080056c0 	.word	0x080056c0
 8000688:	200000c8 	.word	0x200000c8
 800068c:	080056e8 	.word	0x080056e8
 8000690:	08005728 	.word	0x08005728
 8000694:	08005764 	.word	0x08005764

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b096      	sub	sp, #88	@ 0x58
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2244      	movs	r2, #68	@ 0x44
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 fb4e 	bl	8004d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006be:	f002 f941 	bl	8002944 <HAL_PWREx_ControlVoltageScaling>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c8:	f000 fe9e 	bl	8001408 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006cc:	2310      	movs	r3, #16
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d8:	2360      	movs	r3, #96	@ 0x60
 80006da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006e0:	2301      	movs	r3, #1
 80006e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006e8:	2328      	movs	r3, #40	@ 0x28
 80006ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 f987 	bl	8002a10 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000708:	f000 fe7e 	bl	8001408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2303      	movs	r3, #3
 8000712:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000718:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800071c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	2104      	movs	r1, #4
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fd8c 	bl	8003244 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000732:	f000 fe69 	bl	8001408 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3758      	adds	r7, #88	@ 0x58
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000744:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <MX_CRC_Init+0x3c>)
 8000746:	4a0e      	ldr	r2, [pc, #56]	@ (8000780 <MX_CRC_Init+0x40>)
 8000748:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_CRC_Init+0x3c>)
 800074c:	2200      	movs	r2, #0
 800074e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <MX_CRC_Init+0x3c>)
 8000752:	2200      	movs	r2, #0
 8000754:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_CRC_Init+0x3c>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <MX_CRC_Init+0x3c>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_CRC_Init+0x3c>)
 8000764:	2203      	movs	r2, #3
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_CRC_Init+0x3c>)
 800076a:	f001 f939 	bl	80019e0 <HAL_CRC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000774:	f000 fe48 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000a4 	.word	0x200000a4
 8000780:	40023000 	.word	0x40023000

08000784 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000788:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 800078a:	4a13      	ldr	r2, [pc, #76]	@ (80007d8 <MX_LPUART1_UART_Init+0x54>)
 800078c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <MX_LPUART1_UART_Init+0x50>)
 80007c2:	f003 fc2d 	bl	8004020 <HAL_UART_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f000 fe1c 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000c8 	.word	0x200000c8
 80007d8:	40008000 	.word	0x40008000

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007e2:	4a15      	ldr	r2, [pc, #84]	@ (8000838 <MX_USART2_UART_Init+0x5c>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000820:	f003 fbfe 	bl	8004020 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800082a:	f000 fded 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000150 	.word	0x20000150
 8000838:	40004400 	.word	0x40004400

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	@ 0x30
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b49      	ldr	r3, [pc, #292]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a48      	ldr	r2, [pc, #288]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b46      	ldr	r3, [pc, #280]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086a:	4b43      	ldr	r3, [pc, #268]	@ (8000978 <MX_GPIO_Init+0x13c>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a42      	ldr	r2, [pc, #264]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b40      	ldr	r3, [pc, #256]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b3d      	ldr	r3, [pc, #244]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a3c      	ldr	r2, [pc, #240]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b3a      	ldr	r3, [pc, #232]	@ (8000978 <MX_GPIO_Init+0x13c>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089a:	4b37      	ldr	r3, [pc, #220]	@ (8000978 <MX_GPIO_Init+0x13c>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a36      	ldr	r2, [pc, #216]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b34      	ldr	r3, [pc, #208]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80008b2:	f002 f89d 	bl	80029f0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b30      	ldr	r3, [pc, #192]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	4a29      	ldr	r2, [pc, #164]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008da:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <MX_GPIO_Init+0x13c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80008ec:	4823      	ldr	r0, [pc, #140]	@ (800097c <MX_GPIO_Init+0x140>)
 80008ee:	f002 f803 	bl	80028f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 5131 	mov.w	r1, #11328	@ 0x2c40
 80008f8:	4821      	ldr	r0, [pc, #132]	@ (8000980 <MX_GPIO_Init+0x144>)
 80008fa:	f001 fffd 	bl	80028f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000904:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	481b      	ldr	r0, [pc, #108]	@ (8000984 <MX_GPIO_Init+0x148>)
 8000916:	f001 fe45 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800091a:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4812      	ldr	r0, [pc, #72]	@ (800097c <MX_GPIO_Init+0x140>)
 8000934:	f001 fe36 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 8000938:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <MX_GPIO_Init+0x144>)
 800094e:	f001 fe29 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 8000952:	f44f 5331 	mov.w	r3, #11328	@ 0x2c40
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_GPIO_Init+0x144>)
 800096c:	f001 fe1a 	bl	80025a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000970:	bf00      	nop
 8000972:	3730      	adds	r7, #48	@ 0x30
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40021000 	.word	0x40021000
 800097c:	48000400 	.word	0x48000400
 8000980:	48001800 	.word	0x48001800
 8000984:	48000800 	.word	0x48000800

08000988 <printmsg>:

/* USER CODE BEGIN 4 */

void printmsg(char *format, ...){/* The ... (ellipsis) means that more arguments can follow */
 8000988:	b40f      	push	{r0, r1, r2, r3}
 800098a:	b580      	push	{r7, lr}
 800098c:	b096      	sub	sp, #88	@ 0x58
 800098e:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN

	char str[80];
	/*Extract the argument list using C VA APIs*/
	va_list args;
	va_start(args, format);
 8000990:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000994:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800099e:	4618      	mov	r0, r3
 80009a0:	f004 f9c8 	bl	8004d34 <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fc21 	bl	80001f0 <strlen>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	f107 0108 	add.w	r1, r7, #8
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <printmsg+0x48>)
 80009bc:	f003 fb7e 	bl	80040bc <HAL_UART_Transmit>
	va_end(args);
#endif
}
 80009c0:	bf00      	nop
 80009c2:	3758      	adds	r7, #88	@ 0x58
 80009c4:	46bd      	mov	sp, r7
 80009c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009ca:	b004      	add	sp, #16
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	200000c8 	.word	0x200000c8

080009d4 <bootloader_jump_to_active_bank>:

void bootloader_jump_to_active_bank()
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
	 * 2. Redirects interrupts by re-mapping VTOR.
	 * 3. Fetches the application’s Reset_Handler address.
	 * 4. Calls it, effectively jumping to the user application.
	 */

	printmsg("BL_DEBUG_MSG: bootloader_jump_to_user_app\n\r");
 80009da:	481e      	ldr	r0, [pc, #120]	@ (8000a54 <bootloader_jump_to_active_bank+0x80>)
 80009dc:	f7ff ffd4 	bl	8000988 <printmsg>
	/*1. Configure the Main Stack Pointer (MSP) by reading the value form the flash base address of desired sector*/
	/* Check which firmware bank is active and run active firmware bank*/

	uint32_t resethandler_address;

	if(active_bank_number == FLASH_ACTIVE_BANK1)
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <bootloader_jump_to_active_bank+0x84>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d112      	bne.n	8000a0e <bootloader_jump_to_active_bank+0x3a>
	{

		printmsg("BL_DEBUG_MSG: Firmware Bank 1 Active. \n\r");
 80009e8:	481c      	ldr	r0, [pc, #112]	@ (8000a5c <bootloader_jump_to_active_bank+0x88>)
 80009ea:	f7ff ffcd 	bl	8000988 <printmsg>

		uint32_t msp_value = *(volatile uint32_t*)FLASH_FIRMWARE1;
 80009ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <bootloader_jump_to_active_bank+0x8c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f383 8808 	msr	MSP, r3
}
 80009fe:	bf00      	nop

		/* Set MSP function from CMSIS*/
		__set_MSP(msp_value);

		/* Re-map vector table to user application base address */
		SCB->VTOR = FLASH_FIRMWARE1; /* System Control Block - Vector Table Offset Register */
 8000a00:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <bootloader_jump_to_active_bank+0x90>)
 8000a02:	4a17      	ldr	r2, [pc, #92]	@ (8000a60 <bootloader_jump_to_active_bank+0x8c>)
 8000a04:	609a      	str	r2, [r3, #8]

		/* Fetch the reset handler address of the user application
		* from the location FIRMWARE_BASE_ADDRESS + 4 (32bits) */
		resethandler_address = *(volatile uint32_t*)(FLASH_FIRMWARE1 + 4);
 8000a06:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <bootloader_jump_to_active_bank+0x94>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e019      	b.n	8000a42 <bootloader_jump_to_active_bank+0x6e>

	}else if(active_bank_number == FLASH_ACTIVE_BANK2){
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <bootloader_jump_to_active_bank+0x84>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d112      	bne.n	8000a3c <bootloader_jump_to_active_bank+0x68>

		printmsg("BL_DEBUG_MSG: Firmware Bank 2 Active. \n\r");
 8000a16:	4815      	ldr	r0, [pc, #84]	@ (8000a6c <bootloader_jump_to_active_bank+0x98>)
 8000a18:	f7ff ffb6 	bl	8000988 <printmsg>

		uint32_t msp_value = *(volatile uint32_t*)FLASH_FIRMWARE2;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <bootloader_jump_to_active_bank+0x9c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	f383 8808 	msr	MSP, r3
}
 8000a2c:	bf00      	nop

		__set_MSP(msp_value);

		SCB->VTOR = FLASH_FIRMWARE2;
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <bootloader_jump_to_active_bank+0x90>)
 8000a30:	4a0f      	ldr	r2, [pc, #60]	@ (8000a70 <bootloader_jump_to_active_bank+0x9c>)
 8000a32:	609a      	str	r2, [r3, #8]

		resethandler_address = *(volatile uint32_t*)(FLASH_FIRMWARE2 + 4);
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <bootloader_jump_to_active_bank+0xa0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	e002      	b.n	8000a42 <bootloader_jump_to_active_bank+0x6e>
	}
	else{
		/*If values fetched from FLASH Meta data page is not 0 or 1*/
		printmsg("BL_DEBUG_MSG: Firmware Bank Error! \n\r");
 8000a3c:	480e      	ldr	r0, [pc, #56]	@ (8000a78 <bootloader_jump_to_active_bank+0xa4>)
 8000a3e:	f7ff ffa3 	bl	8000988 <printmsg>
	}

	void (*app_reset_handler)(void); /*A function pointer to hold the address of reset handler*/
	app_reset_handler = (void*) resethandler_address;
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	60bb      	str	r3, [r7, #8]

	/*3. Jumping to the reset handler of user application - Now this address will be loaded into the Program Counter*/
	app_reset_handler();
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	4798      	blx	r3

}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	080057a4 	.word	0x080057a4
 8000a58:	200002a0 	.word	0x200002a0
 8000a5c:	080057d0 	.word	0x080057d0
 8000a60:	08008000 	.word	0x08008000
 8000a64:	e000ed00 	.word	0xe000ed00
 8000a68:	08008004 	.word	0x08008004
 8000a6c:	080057fc 	.word	0x080057fc
 8000a70:	08080000 	.word	0x08080000
 8000a74:	08080004 	.word	0x08080004
 8000a78:	08005828 	.word	0x08005828

08000a7c <bootloader_uart_read_data>:

void bootloader_uart_read_data()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer, 0, BL_RX_LEN);
 8000a86:	22c8      	movs	r2, #200	@ 0xc8
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4832      	ldr	r0, [pc, #200]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000a8c:	f004 f95c 	bl	8004d48 <memset>

		/*First read only one byte, which is the length. Then read the other bytes from UART */
		HAL_UART_Receive(C_UART, (uint8_t*)&bl_rx_buffer, 1, HAL_MAX_DELAY);
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	2201      	movs	r2, #1
 8000a96:	492f      	ldr	r1, [pc, #188]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000a98:	482f      	ldr	r0, [pc, #188]	@ (8000b58 <bootloader_uart_read_data+0xdc>)
 8000a9a:	f003 fb98 	bl	80041ce <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	71fb      	strb	r3, [r7, #7]
		/*Receive the command*/
		HAL_UART_Receive(C_UART, (uint8_t*)&bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	492b      	ldr	r1, [pc, #172]	@ (8000b5c <bootloader_uart_read_data+0xe0>)
 8000aae:	482a      	ldr	r0, [pc, #168]	@ (8000b58 <bootloader_uart_read_data+0xdc>)
 8000ab0:	f003 fb8d 	bl	80041ce <HAL_UART_Receive>

		switch(bl_rx_buffer[1]) /* To check for command codes */
 8000ab4:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000ab6:	785b      	ldrb	r3, [r3, #1]
 8000ab8:	3b51      	subs	r3, #81	@ 0x51
 8000aba:	2b0f      	cmp	r3, #15
 8000abc:	d845      	bhi.n	8000b4a <bootloader_uart_read_data+0xce>
 8000abe:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac4 <bootloader_uart_read_data+0x48>)
 8000ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac4:	08000b05 	.word	0x08000b05
 8000ac8:	08000b0d 	.word	0x08000b0d
 8000acc:	08000b15 	.word	0x08000b15
 8000ad0:	08000b1d 	.word	0x08000b1d
 8000ad4:	08000b4b 	.word	0x08000b4b
 8000ad8:	08000b25 	.word	0x08000b25
 8000adc:	08000b2d 	.word	0x08000b2d
 8000ae0:	08000b35 	.word	0x08000b35
 8000ae4:	08000b4b 	.word	0x08000b4b
 8000ae8:	08000b4b 	.word	0x08000b4b
 8000aec:	08000b4b 	.word	0x08000b4b
 8000af0:	08000b3d 	.word	0x08000b3d
 8000af4:	08000b4b 	.word	0x08000b4b
 8000af8:	08000b4b 	.word	0x08000b4b
 8000afc:	08000b4b 	.word	0x08000b4b
 8000b00:	08000b45 	.word	0x08000b45
		{
		case BL_GET_VER:
			bootloader_handle_getver_cmd(bl_rx_buffer);
 8000b04:	4813      	ldr	r0, [pc, #76]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b06:	f000 f82d 	bl	8000b64 <bootloader_handle_getver_cmd>
			break;
 8000b0a:	e022      	b.n	8000b52 <bootloader_uart_read_data+0xd6>
		case BL_GET_HELP:
			bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000b0c:	4811      	ldr	r0, [pc, #68]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b0e:	f000 f86d 	bl	8000bec <bootloader_handle_gethelp_cmd>
			break;
 8000b12:	e01e      	b.n	8000b52 <bootloader_uart_read_data+0xd6>
		case BL_GET_CID:
			bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000b14:	480f      	ldr	r0, [pc, #60]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b16:	f000 f8a1 	bl	8000c5c <bootloader_handle_getcid_cmd>
			break;
 8000b1a:	e01a      	b.n	8000b52 <bootloader_uart_read_data+0xd6>
		case BL_GET_RDP_STATUS:
			bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000b1c:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b1e:	f000 f8e3 	bl	8000ce8 <bootloader_handle_getrdp_cmd>
			break;
 8000b22:	e016      	b.n	8000b52 <bootloader_uart_read_data+0xd6>
		case BL_FLASH_ERASE:
			bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000b24:	480b      	ldr	r0, [pc, #44]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b26:	f000 f925 	bl	8000d74 <bootloader_handle_flash_erase_cmd>
			break;
 8000b2a:	e012      	b.n	8000b52 <bootloader_uart_read_data+0xd6>
		case BL_MEM_WRITE:
			bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000b2c:	4809      	ldr	r0, [pc, #36]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b2e:	f000 f98d 	bl	8000e4c <bootloader_handle_mem_write_cmd>
			break;
 8000b32:	e00e      	b.n	8000b52 <bootloader_uart_read_data+0xd6>
		case BL_EN_RW_PROTECT:
			bootloader_handle_en_rw_protect(bl_rx_buffer);
 8000b34:	4807      	ldr	r0, [pc, #28]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b36:	f000 f9ff 	bl	8000f38 <bootloader_handle_en_rw_protect>
			break;
 8000b3a:	e00a      	b.n	8000b52 <bootloader_uart_read_data+0xd6>
		case BL_DIS_R_W_PROTECT:
			bootloader_handle_dis_rw_protect(bl_rx_buffer);
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b3e:	f000 fa05 	bl	8000f4c <bootloader_handle_dis_rw_protect>
			break;
 8000b42:	e006      	b.n	8000b52 <bootloader_uart_read_data+0xd6>
		case BL_SHOW_ACTIVE_BANK:
			bootloader_show_active_bank(bl_rx_buffer);
 8000b44:	4803      	ldr	r0, [pc, #12]	@ (8000b54 <bootloader_uart_read_data+0xd8>)
 8000b46:	f000 fc0b 	bl	8001360 <bootloader_show_active_bank>
		default:
			printmsg("BL_DEBUG_MSG:Invalid command code received from host \n\r");
 8000b4a:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <bootloader_uart_read_data+0xe4>)
 8000b4c:	f7ff ff1c 	bl	8000988 <printmsg>
			break;
 8000b50:	bf00      	nop
		memset(bl_rx_buffer, 0, BL_RX_LEN);
 8000b52:	e798      	b.n	8000a86 <bootloader_uart_read_data+0xa>
 8000b54:	200001d8 	.word	0x200001d8
 8000b58:	20000150 	.word	0x20000150
 8000b5c:	200001d9 	.word	0x200001d9
 8000b60:	08005850 	.word	0x08005850

08000b64 <bootloader_handle_getver_cmd>:
}

/******************* Boot loader handler functions *******************/

void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    /* Handle "Get Version" command */
	uint8_t bl_version;

	uint32_t command_packet_len = bl_rx_buffer[0] + 1; /*Length to follow + First byte*/
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]

	/*Extract the 4 bytes of CRC32 sent by the host*/
	uint32_t host_crc = *((uint32_t*)(bl_rx_buffer + command_packet_len - 4)); /* CRC is always 32 bits (4 bytes) here */
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	3b04      	subs	r3, #4
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	613b      	str	r3, [r7, #16]

	/*Verify checksum*/
	printmsg("BL_DEBUG_MSG: bootloader_handle_getver_cmd\n\r");
 8000b80:	4816      	ldr	r0, [pc, #88]	@ (8000bdc <bootloader_handle_getver_cmd+0x78>)
 8000b82:	f7ff ff01 	bl	8000988 <printmsg>
	if(! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3b04      	subs	r3, #4
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 fa10 	bl	8000fb4 <bootloader_verify_crc>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d117      	bne.n	8000bca <bootloader_handle_getver_cmd+0x66>
	{
		/*Checksum is correct*/
		printmsg("BL_DEBUG_MSG: Checksum success...!\n\r");
 8000b9a:	4811      	ldr	r0, [pc, #68]	@ (8000be0 <bootloader_handle_getver_cmd+0x7c>)
 8000b9c:	f7ff fef4 	bl	8000988 <printmsg>
		bootloader_send_ack(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f000 f9ef 	bl	8000f84 <bootloader_send_ack>
		bl_version = get_bootloader_version();
 8000ba6:	f000 fa4d 	bl	8001044 <get_bootloader_version>
 8000baa:	4603      	mov	r3, r0
 8000bac:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG: BL_VER: %d &#x\n\r", bl_version, bl_version);
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	480b      	ldr	r0, [pc, #44]	@ (8000be4 <bootloader_handle_getver_cmd+0x80>)
 8000bb8:	f7ff fee6 	bl	8000988 <printmsg>
		bootloader_uart_write_data(&bl_version, 1); /* Sends data back to the HOST */
 8000bbc:	f107 030f 	add.w	r3, r7, #15
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fa2a 	bl	800101c <bootloader_uart_write_data>
		printmsg("BL_DEBUG_MSG: Checksum failed...!\n\r");
		bootloader_send_nack();

	}

}
 8000bc8:	e004      	b.n	8000bd4 <bootloader_handle_getver_cmd+0x70>
		printmsg("BL_DEBUG_MSG: Checksum failed...!\n\r");
 8000bca:	4807      	ldr	r0, [pc, #28]	@ (8000be8 <bootloader_handle_getver_cmd+0x84>)
 8000bcc:	f7ff fedc 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000bd0:	f000 f9c6 	bl	8000f60 <bootloader_send_nack>
}
 8000bd4:	bf00      	nop
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	08005888 	.word	0x08005888
 8000be0:	080058b8 	.word	0x080058b8
 8000be4:	080058e0 	.word	0x080058e0
 8000be8:	08005900 	.word	0x08005900

08000bec <bootloader_handle_gethelp_cmd>:

void bootloader_handle_gethelp_cmd(uint8_t *bl_rx_buffer)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    /* Handle "Get Help" command */
	printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n\r");
 8000bf4:	4815      	ldr	r0, [pc, #84]	@ (8000c4c <bootloader_handle_gethelp_cmd+0x60>)
 8000bf6:	f7ff fec7 	bl	8000988 <printmsg>

	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]

	uint32_t host_crc = *((uint32_t*)(bl_rx_buffer + command_packet_len - 4));
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	3b04      	subs	r3, #4
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60bb      	str	r3, [r7, #8]

	if(! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3b04      	subs	r3, #4
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	4619      	mov	r1, r3
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f9cc 	bl	8000fb4 <bootloader_verify_crc>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d10a      	bne.n	8000c38 <bootloader_handle_gethelp_cmd+0x4c>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\n\r");
 8000c22:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <bootloader_handle_gethelp_cmd+0x64>)
 8000c24:	f7ff feb0 	bl	8000988 <printmsg>
		bootloader_send_ack(sizeof(supported_commands));
 8000c28:	2009      	movs	r0, #9
 8000c2a:	f000 f9ab 	bl	8000f84 <bootloader_send_ack>
		bootloader_uart_write_data(supported_commands, sizeof(supported_commands));
 8000c2e:	2109      	movs	r1, #9
 8000c30:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <bootloader_handle_gethelp_cmd+0x68>)
 8000c32:	f000 f9f3 	bl	800101c <bootloader_uart_write_data>

	}else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
		bootloader_send_nack();
	}
}
 8000c36:	e004      	b.n	8000c42 <bootloader_handle_gethelp_cmd+0x56>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
 8000c38:	4807      	ldr	r0, [pc, #28]	@ (8000c58 <bootloader_handle_gethelp_cmd+0x6c>)
 8000c3a:	f7ff fea5 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000c3e:	f000 f98f 	bl	8000f60 <bootloader_send_nack>
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	08005924 	.word	0x08005924
 8000c50:	08005954 	.word	0x08005954
 8000c54:	20000000 	.word	0x20000000
 8000c58:	08005978 	.word	0x08005978

08000c5c <bootloader_handle_getcid_cmd>:

void bootloader_handle_getcid_cmd(uint8_t *bl_rx_buffer)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    /* Handle "Get Chip ID" command */
	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n\r");
 8000c64:	481c      	ldr	r0, [pc, #112]	@ (8000cd8 <bootloader_handle_getcid_cmd+0x7c>)
 8000c66:	f7ff fe8f 	bl	8000988 <printmsg>

	uint16_t bl_cid_num = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	81fb      	strh	r3, [r7, #14]

	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]

	uint32_t host_crc = *((uint32_t*)(bl_rx_buffer + command_packet_len - 4));
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3b04      	subs	r3, #4
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	613b      	str	r3, [r7, #16]

	if(! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3b04      	subs	r3, #4
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f992 	bl	8000fb4 <bootloader_verify_crc>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d117      	bne.n	8000cc6 <bootloader_handle_getcid_cmd+0x6a>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\n\r");
 8000c96:	4811      	ldr	r0, [pc, #68]	@ (8000cdc <bootloader_handle_getcid_cmd+0x80>)
 8000c98:	f7ff fe76 	bl	8000988 <printmsg>
		bootloader_send_ack(2);
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f000 f971 	bl	8000f84 <bootloader_send_ack>
		bl_cid_num = get_mcu_chip_id();
 8000ca2:	f000 f9d7 	bl	8001054 <get_mcu_chip_id>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	81fb      	strh	r3, [r7, #14]
		printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n\r",bl_cid_num, bl_cid_num);
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	4619      	mov	r1, r3
 8000cae:	89fb      	ldrh	r3, [r7, #14]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	480b      	ldr	r0, [pc, #44]	@ (8000ce0 <bootloader_handle_getcid_cmd+0x84>)
 8000cb4:	f7ff fe68 	bl	8000988 <printmsg>
		bootloader_uart_write_data((uint8_t*)&bl_cid_num, 2);
 8000cb8:	f107 030e 	add.w	r3, r7, #14
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f9ac 	bl	800101c <bootloader_uart_write_data>
	}else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
		bootloader_send_nack();
	}
}
 8000cc4:	e004      	b.n	8000cd0 <bootloader_handle_getcid_cmd+0x74>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
 8000cc6:	4807      	ldr	r0, [pc, #28]	@ (8000ce4 <bootloader_handle_getcid_cmd+0x88>)
 8000cc8:	f7ff fe5e 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000ccc:	f000 f948 	bl	8000f60 <bootloader_send_nack>
}
 8000cd0:	bf00      	nop
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	08005998 	.word	0x08005998
 8000cdc:	08005954 	.word	0x08005954
 8000ce0:	080059c4 	.word	0x080059c4
 8000ce4:	08005978 	.word	0x08005978

08000ce8 <bootloader_handle_getrdp_cmd>:

void bootloader_handle_getrdp_cmd(uint8_t *bl_rx_buffer)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
    /* Handle "Get Read Protection Level" command */
	printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n\r");
 8000cf0:	481c      	ldr	r0, [pc, #112]	@ (8000d64 <bootloader_handle_getrdp_cmd+0x7c>)
 8000cf2:	f7ff fe49 	bl	8000988 <printmsg>

	uint8_t rdp_level = 0x00;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3b04      	subs	r3, #4
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3b04      	subs	r3, #4
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4619      	mov	r1, r3
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f94c 	bl	8000fb4 <bootloader_verify_crc>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d117      	bne.n	8000d52 <bootloader_handle_getrdp_cmd+0x6a>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\n\r");
 8000d22:	4811      	ldr	r0, [pc, #68]	@ (8000d68 <bootloader_handle_getrdp_cmd+0x80>)
 8000d24:	f7ff fe30 	bl	8000988 <printmsg>
		bootloader_send_ack(1);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f000 f92b 	bl	8000f84 <bootloader_send_ack>
		rdp_level = get_flash_rdp_level();
 8000d2e:	f000 f9a3 	bl	8001078 <get_flash_rdp_level>
 8000d32:	4603      	mov	r3, r0
 8000d34:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG:RDP level: %d %#x\n\r",rdp_level, rdp_level);
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	480b      	ldr	r0, [pc, #44]	@ (8000d6c <bootloader_handle_getrdp_cmd+0x84>)
 8000d40:	f7ff fe22 	bl	8000988 <printmsg>
		bootloader_uart_write_data(&rdp_level, 1);
 8000d44:	f107 030f 	add.w	r3, r7, #15
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f966 	bl	800101c <bootloader_uart_write_data>

	}else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
		bootloader_send_nack();
	}
}
 8000d50:	e004      	b.n	8000d5c <bootloader_handle_getrdp_cmd+0x74>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
 8000d52:	4807      	ldr	r0, [pc, #28]	@ (8000d70 <bootloader_handle_getrdp_cmd+0x88>)
 8000d54:	f7ff fe18 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000d58:	f000 f902 	bl	8000f60 <bootloader_send_nack>
}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	080059e8 	.word	0x080059e8
 8000d68:	08005954 	.word	0x08005954
 8000d6c:	08005a14 	.word	0x08005a14
 8000d70:	08005978 	.word	0x08005978

08000d74 <bootloader_handle_flash_erase_cmd>:

void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
    uint8_t erase_status = 0x00;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]
    uint32_t command_packet_len;
    uint32_t host_crc;

    printmsg("BL_DEBUG_MSG: bootloader_handle_flash_erase_cmd\n\r");
 8000d80:	482b      	ldr	r0, [pc, #172]	@ (8000e30 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000d82:	f7ff fe01 	bl	8000988 <printmsg>

    /* Get total command length and host CRC */
    command_packet_len = bl_rx_buffer[0] + 1;
 8000d86:	4b2b      	ldr	r3, [pc, #172]	@ (8000e34 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
    host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len - 4));
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	3b04      	subs	r3, #4
 8000d92:	4a28      	ldr	r2, [pc, #160]	@ (8000e34 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000d94:	4413      	add	r3, r2
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	617b      	str	r3, [r7, #20]

    /* Verify CRC */
    if (!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	3b04      	subs	r3, #4
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4619      	mov	r1, r3
 8000da2:	4824      	ldr	r0, [pc, #144]	@ (8000e34 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000da4:	f000 f906 	bl	8000fb4 <bootloader_verify_crc>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d136      	bne.n	8000e1c <bootloader_handle_flash_erase_cmd+0xa8>
    {
        printmsg("BL_DEBUG_MSG: CRC check success.\n\r");
 8000dae:	4822      	ldr	r0, [pc, #136]	@ (8000e38 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000db0:	f7ff fdea 	bl	8000988 <printmsg>
        bootloader_send_ack(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f000 f8e5 	bl	8000f84 <bootloader_send_ack>

        uint32_t page_number     = pBuffer[2];
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	61fb      	str	r3, [r7, #28]
        uint32_t number_of_pages = pBuffer[3];
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3303      	adds	r3, #3
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	613b      	str	r3, [r7, #16]

        printmsg("BL_DEBUG_MSG: page_number=%ld  number_of_pages=%ld\n\r", page_number, number_of_pages);
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	69f9      	ldr	r1, [r7, #28]
 8000dce:	481b      	ldr	r0, [pc, #108]	@ (8000e3c <bootloader_handle_flash_erase_cmd+0xc8>)
 8000dd0:	f7ff fdda 	bl	8000988 <printmsg>

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dda:	4819      	ldr	r0, [pc, #100]	@ (8000e40 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000ddc:	f001 fd8c 	bl	80028f8 <HAL_GPIO_WritePin>

        /* Mass erase check */
        if (page_number == 0xFF)
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	2bff      	cmp	r3, #255	@ 0xff
 8000de4:	d102      	bne.n	8000dec <bootloader_handle_flash_erase_cmd+0x78>
        {
            /* Convert to sentinel value used in execute_flash_erase() */
            page_number = 0xFFFFFFFFU;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	61fb      	str	r3, [r7, #28]
        }

        erase_status = execute_flash_erase(page_number, number_of_pages);
 8000dec:	6939      	ldr	r1, [r7, #16]
 8000dee:	69f8      	ldr	r0, [r7, #28]
 8000df0:	f000 f984 	bl	80010fc <execute_flash_erase>
 8000df4:	4603      	mov	r3, r0
 8000df6:	73fb      	strb	r3, [r7, #15]

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dfe:	4810      	ldr	r0, [pc, #64]	@ (8000e40 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000e00:	f001 fd7a 	bl	80028f8 <HAL_GPIO_WritePin>

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n\r", erase_status);
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	4619      	mov	r1, r3
 8000e08:	480e      	ldr	r0, [pc, #56]	@ (8000e44 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000e0a:	f7ff fdbd 	bl	8000988 <printmsg>

        /* Send erase result to host */
        bootloader_uart_write_data(&erase_status, 1);
 8000e0e:	f107 030f 	add.w	r3, r7, #15
 8000e12:	2101      	movs	r1, #1
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 f901 	bl	800101c <bootloader_uart_write_data>
    else
    {
        printmsg("BL_DEBUG_MSG: CRC check failed!\n\r");
        bootloader_send_nack();
    }
}
 8000e1a:	e004      	b.n	8000e26 <bootloader_handle_flash_erase_cmd+0xb2>
        printmsg("BL_DEBUG_MSG: CRC check failed!\n\r");
 8000e1c:	480a      	ldr	r0, [pc, #40]	@ (8000e48 <bootloader_handle_flash_erase_cmd+0xd4>)
 8000e1e:	f7ff fdb3 	bl	8000988 <printmsg>
        bootloader_send_nack();
 8000e22:	f000 f89d 	bl	8000f60 <bootloader_send_nack>
}
 8000e26:	bf00      	nop
 8000e28:	3720      	adds	r7, #32
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	08005a38 	.word	0x08005a38
 8000e34:	200001d8 	.word	0x200001d8
 8000e38:	08005a6c 	.word	0x08005a6c
 8000e3c:	08005a90 	.word	0x08005a90
 8000e40:	48000400 	.word	0x48000400
 8000e44:	08005ac8 	.word	0x08005ac8
 8000e48:	08005af0 	.word	0x08005af0

08000e4c <bootloader_handle_mem_write_cmd>:



void bootloader_handle_mem_write_cmd(uint8_t *bl_rx_buffer)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	/* Handle "Memory Write" command */

	printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n\r");
 8000e54:	4831      	ldr	r0, [pc, #196]	@ (8000f1c <bootloader_handle_mem_write_cmd+0xd0>)
 8000e56:	f7ff fd97 	bl	8000988 <printmsg>

	uint8_t write_status = 0x00;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73fb      	strb	r3, [r7, #15]
	uint8_t payload_len = bl_rx_buffer[6];
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	799b      	ldrb	r3, [r3, #6]
 8000e62:	77fb      	strb	r3, [r7, #31]

	uint32_t mem_addr = *((uint32_t*)(&bl_rx_buffer[2]));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000e6a:	61bb      	str	r3, [r7, #24]

	uint32_t command_packet_len = bl_rx_buffer[0] + 1 ;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer + command_packet_len - 4));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3b04      	subs	r3, #4
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	613b      	str	r3, [r7, #16]

	if(! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len -4, host_crc))
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3b04      	subs	r3, #4
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4619      	mov	r1, r3
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 f893 	bl	8000fb4 <bootloader_verify_crc>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d13a      	bne.n	8000f0a <bootloader_handle_mem_write_cmd+0xbe>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\n\r");
 8000e94:	4822      	ldr	r0, [pc, #136]	@ (8000f20 <bootloader_handle_mem_write_cmd+0xd4>)
 8000e96:	f7ff fd77 	bl	8000988 <printmsg>
		bootloader_send_ack(1);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f000 f872 	bl	8000f84 <bootloader_send_ack>
		printmsg("BL_DEBUG_MSG: mem write address : %#x\n\r",mem_addr);
 8000ea0:	69b9      	ldr	r1, [r7, #24]
 8000ea2:	4820      	ldr	r0, [pc, #128]	@ (8000f24 <bootloader_handle_mem_write_cmd+0xd8>)
 8000ea4:	f7ff fd70 	bl	8000988 <printmsg>

		if( verify_address(mem_addr) == ADDR_VALID ) {
 8000ea8:	69b8      	ldr	r0, [r7, #24]
 8000eaa:	f000 f8f9 	bl	80010a0 <verify_address>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d11e      	bne.n	8000ef2 <bootloader_handle_mem_write_cmd+0xa6>


			printmsg("BL_DEBUG_MSG: valid mem write address\n\r");
 8000eb4:	481c      	ldr	r0, [pc, #112]	@ (8000f28 <bootloader_handle_mem_write_cmd+0xdc>)
 8000eb6:	f7ff fd67 	bl	8000988 <printmsg>

			//glow the led to indicate bootloader is currently writing to memory
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ec0:	481a      	ldr	r0, [pc, #104]	@ (8000f2c <bootloader_handle_mem_write_cmd+0xe0>)
 8000ec2:	f001 fd19 	bl	80028f8 <HAL_GPIO_WritePin>

			/* Execute memory write*/
			write_status = execute_mem_write(&bl_rx_buffer[7], mem_addr, payload_len);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3307      	adds	r3, #7
 8000eca:	7ffa      	ldrb	r2, [r7, #31]
 8000ecc:	69b9      	ldr	r1, [r7, #24]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f958 	bl	8001184 <execute_mem_write>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	73fb      	strb	r3, [r7, #15]

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ede:	4813      	ldr	r0, [pc, #76]	@ (8000f2c <bootloader_handle_mem_write_cmd+0xe0>)
 8000ee0:	f001 fd0a 	bl	80028f8 <HAL_GPIO_WritePin>

			//inform host about the status
			bootloader_uart_write_data(&write_status,1);
 8000ee4:	f107 030f 	add.w	r3, r7, #15
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f896 	bl	800101c <bootloader_uart_write_data>
		}
	}else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
		bootloader_send_nack();
	}
}
 8000ef0:	e010      	b.n	8000f14 <bootloader_handle_mem_write_cmd+0xc8>
			printmsg("BL_DEBUG_MSG: invalid mem write address\n\r");
 8000ef2:	480f      	ldr	r0, [pc, #60]	@ (8000f30 <bootloader_handle_mem_write_cmd+0xe4>)
 8000ef4:	f7ff fd48 	bl	8000988 <printmsg>
			write_status = ADDR_INVALID;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
			bootloader_uart_write_data(&write_status,1);
 8000efc:	f107 030f 	add.w	r3, r7, #15
 8000f00:	2101      	movs	r1, #1
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f88a 	bl	800101c <bootloader_uart_write_data>
}
 8000f08:	e004      	b.n	8000f14 <bootloader_handle_mem_write_cmd+0xc8>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n\r");
 8000f0a:	480a      	ldr	r0, [pc, #40]	@ (8000f34 <bootloader_handle_mem_write_cmd+0xe8>)
 8000f0c:	f7ff fd3c 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000f10:	f000 f826 	bl	8000f60 <bootloader_send_nack>
}
 8000f14:	bf00      	nop
 8000f16:	3720      	adds	r7, #32
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	08005b14 	.word	0x08005b14
 8000f20:	08005954 	.word	0x08005954
 8000f24:	08005b44 	.word	0x08005b44
 8000f28:	08005b6c 	.word	0x08005b6c
 8000f2c:	48000400 	.word	0x48000400
 8000f30:	08005b94 	.word	0x08005b94
 8000f34:	08005978 	.word	0x08005978

08000f38 <bootloader_handle_en_rw_protect>:


void bootloader_handle_en_rw_protect(uint8_t *bl_rx_buffer)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    /* Handle "Enable Read/Write Protection" command */
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <bootloader_handle_dis_rw_protect>:

void bootloader_handle_dis_rw_protect(uint8_t *bl_rx_buffer)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    /* Handle "Disable Read/Write Protection" command */
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <bootloader_send_nack>:

void bootloader_send_nack(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000f66:	237f      	movs	r3, #127	@ 0x7f
 8000f68:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART, (uint8_t*)&nack, 1, HAL_MAX_DELAY);
 8000f6a:	1df9      	adds	r1, r7, #7
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	2201      	movs	r2, #1
 8000f72:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <bootloader_send_nack+0x20>)
 8000f74:	f003 f8a2 	bl	80040bc <HAL_UART_Transmit>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000150 	.word	0x20000150

08000f84 <bootloader_send_ack>:

void bootloader_send_ack(uint8_t follow_len)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	/* 2 Bytes are sent, first byte is ACK and second is the length value */
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8000f8e:	23a5      	movs	r3, #165	@ 0xa5
 8000f90:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART, (uint8_t*)&ack_buf, 2, HAL_MAX_DELAY);
 8000f96:	f107 010c 	add.w	r1, r7, #12
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	4803      	ldr	r0, [pc, #12]	@ (8000fb0 <bootloader_send_ack+0x2c>)
 8000fa2:	f003 f88b 	bl	80040bc <HAL_UART_Transmit>

}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000150 	.word	0x20000150

08000fb4 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc(uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xff;
 8000fc0:	23ff      	movs	r3, #255	@ 0xff
 8000fc2:	61fb      	str	r3, [r7, #28]

	for(int i=0; i<len; i++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	e00f      	b.n	8000fea <bootloader_verify_crc+0x36>
	{
		uint32_t i_data = pData[i];
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480e      	ldr	r0, [pc, #56]	@ (8001018 <bootloader_verify_crc+0x64>)
 8000fde:	f000 fd63 	bl	8001aa8 <HAL_CRC_Accumulate>
 8000fe2:	61f8      	str	r0, [r7, #28]
	for(int i=0; i<len; i++)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d8eb      	bhi.n	8000fca <bootloader_verify_crc+0x16>
	}

	/* Reset CRC Calculation Unit */
	__HAL_CRC_DR_RESET(&hcrc);
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <bootloader_verify_crc+0x64>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <bootloader_verify_crc+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f042 0201 	orr.w	r2, r2, #1
 8001000:	609a      	str	r2, [r3, #8]

	if(uwCRCValue == crc_host)
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	d101      	bne.n	800100e <bootloader_verify_crc+0x5a>
		return VERIFY_CRC_SUCCESS;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <bootloader_verify_crc+0x5c>
	return VERIFY_CRC_FAIL;
 800100e:	2301      	movs	r3, #1

}
 8001010:	4618      	mov	r0, r3
 8001012:	3720      	adds	r7, #32
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200000a4 	.word	0x200000a4

0800101c <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(C_UART, pBuffer, len, HAL_MAX_DELAY);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b29a      	uxth	r2, r3
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4803      	ldr	r0, [pc, #12]	@ (8001040 <bootloader_uart_write_data+0x24>)
 8001032:	f003 f843 	bl	80040bc <HAL_UART_Transmit>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000150 	.word	0x20000150

08001044 <get_bootloader_version>:

uint8_t get_bootloader_version()
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 8001048:	2310      	movs	r3, #16
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
	   the user software. It is even accessible while the MCU is under system reset.
	 */

	uint16_t cid;
	/* Reading the register and masking the unnecessary bits */
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <get_mcu_chip_id+0x20>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001064:	80fb      	strh	r3, [r7, #6]
	return cid;
 8001066:	88fb      	ldrh	r3, [r7, #6]
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e0042000 	.word	0xe0042000

08001078 <get_flash_rdp_level>:

uint8_t get_flash_rdp_level(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	@ 0x30
 800107c:	af00      	add	r7, sp, #0
	 *
	 * When decreased from 'Level 1 to Level 0', the FLASH goes into MASS ERASE.
	 *
	 * */
	/*HAL Implementation*/
	uint8_t rdp_status = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	FLASH_OBProgramInitTypeDef ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4618      	mov	r0, r3
 8001088:	f001 f896 	bl	80021b8 <HAL_FLASHEx_OBGetConfig>
	rdp_status = (uint8_t)ob_handle.RDPLevel;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	return rdp_status;
 8001092:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001096:	4618      	mov	r0, r3
 8001098:	3730      	adds	r7, #48	@ 0x30
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <verify_address>:


uint8_t verify_address(uint32_t go_address)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	/*Jump to FLASH, System Memory, SRAM1, SRAM2, Backup SRAM allowed,
	 * others such as peripheral memory not allowed*/

	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END) {
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010ae:	d305      	bcc.n	80010bc <verify_address+0x1c>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a10      	ldr	r2, [pc, #64]	@ (80010f4 <verify_address+0x54>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d801      	bhi.n	80010bc <verify_address+0x1c>

		return ADDR_VALID;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e014      	b.n	80010e6 <verify_address+0x46>
	} else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80010c2:	d305      	bcc.n	80010d0 <verify_address+0x30>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a0c      	ldr	r2, [pc, #48]	@ (80010f8 <verify_address+0x58>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d801      	bhi.n	80010d0 <verify_address+0x30>

		return ADDR_VALID;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e00a      	b.n	80010e6 <verify_address+0x46>
	} else if ( go_address >= FLASH_BASE && go_address <= FLASH_END) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80010d6:	d305      	bcc.n	80010e4 <verify_address+0x44>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80010de:	d201      	bcs.n	80010e4 <verify_address+0x44>

		return ADDR_VALID;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e000      	b.n	80010e6 <verify_address+0x46>
	}else
	return ADDR_INVALID;
 80010e4:	2301      	movs	r3, #1
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20040000 	.word	0x20040000
 80010f8:	10010000 	.word	0x10010000

080010fc <execute_flash_erase>:

uint8_t execute_flash_erase(uint32_t page_number, uint32_t number_of_pages)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef flashErase_handle;
    uint32_t sectorError;
    HAL_StatusTypeDef status;

    /* Validate page range */
    if ((page_number >= 512U) || ((page_number + number_of_pages) > 512U))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800110c:	d205      	bcs.n	800111a <execute_flash_erase+0x1e>
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	4413      	add	r3, r2
 8001114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001118:	d901      	bls.n	800111e <execute_flash_erase+0x22>
        return INVALID_SECTOR;
 800111a:	2304      	movs	r3, #4
 800111c:	e02e      	b.n	800117c <execute_flash_erase+0x80>

    HAL_FLASH_Unlock();
 800111e:	f000 fecb 	bl	8001eb8 <HAL_FLASH_Unlock>

    if (page_number == 0xFFFFFFFFU)   /* Mass Erase */
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d104      	bne.n	8001134 <execute_flash_erase+0x38>
    {
        flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 800112a:	2301      	movs	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
        flashErase_handle.Banks = FLASH_BANK_BOTH;   /* erase both banks */
 800112e:	2303      	movs	r3, #3
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	e011      	b.n	8001158 <execute_flash_erase+0x5c>
    }
    else
    {
        flashErase_handle.TypeErase = FLASH_TYPEERASE_PAGES;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]

        if (page_number < 256U)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2bff      	cmp	r3, #255	@ 0xff
 800113c:	d804      	bhi.n	8001148 <execute_flash_erase+0x4c>
        {
            flashErase_handle.Banks = FLASH_BANK_1;
 800113e:	2301      	movs	r3, #1
 8001140:	613b      	str	r3, [r7, #16]
            flashErase_handle.Page  = page_number;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	e005      	b.n	8001154 <execute_flash_erase+0x58>
        }
        else
        {
            flashErase_handle.Banks = FLASH_BANK_2;
 8001148:	2302      	movs	r3, #2
 800114a:	613b      	str	r3, [r7, #16]
            flashErase_handle.Page  = page_number - 256U;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001152:	617b      	str	r3, [r7, #20]
        }

        flashErase_handle.NbPages = number_of_pages;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	61bb      	str	r3, [r7, #24]
    }

    status = HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8001158:	f107 0208 	add.w	r2, r7, #8
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f000 ff8c 	bl	8002080 <HAL_FLASHEx_Erase>
 8001168:	4603      	mov	r3, r0
 800116a:	77fb      	strb	r3, [r7, #31]
    HAL_FLASH_Lock();
 800116c:	f000 fec6 	bl	8001efc <HAL_FLASH_Lock>

    if (status != HAL_OK)
 8001170:	7ffb      	ldrb	r3, [r7, #31]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <execute_flash_erase+0x7e>
        return ERASE_FAILED;
 8001176:	2311      	movs	r3, #17
 8001178:	e000      	b.n	800117c <execute_flash_erase+0x80>

    return ERASE_SUCCESS;
 800117a:	2322      	movs	r3, #34	@ 0x22
}
 800117c:	4618      	mov	r0, r3
 800117e:	3720      	adds	r7, #32
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <execute_mem_write>:


uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 8001184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001188:	b091      	sub	sp, #68	@ 0x44
 800118a:	af00      	add	r7, sp, #0
 800118c:	61f8      	str	r0, [r7, #28]
 800118e:	61b9      	str	r1, [r7, #24]
 8001190:	617a      	str	r2, [r7, #20]
	/* Below code is for FLASH_TYPEPROGRAM_DOUBLEWORD logic - host application sends single word */

    HAL_StatusTypeDef status = HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    if ((mem_address & 0x7U) != 0U) return (uint8_t)HAL_ERROR; /* must be 8-byte aligned */
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <execute_mem_write+0x22>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e08c      	b.n	80012c0 <execute_mem_write+0x13c>
    if (len == 0U) return (uint8_t)HAL_OK;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <execute_mem_write+0x2c>
 80011ac:	2300      	movs	r3, #0
 80011ae:	e087      	b.n	80012c0 <execute_mem_write+0x13c>

    HAL_FLASH_Unlock();
 80011b0:	f000 fe82 	bl	8001eb8 <HAL_FLASH_Unlock>

    for (uint32_t offset = 0; offset < len; offset += 8U) {
 80011b4:	2300      	movs	r3, #0
 80011b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011b8:	e078      	b.n	80012ac <execute_mem_write+0x128>
        uint64_t data64 = 0ULL;
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	f04f 0300 	mov.w	r3, #0
 80011c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        uint32_t chunk = ((len - offset) >= 8U) ? 8U : (len - offset);
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	bf28      	it	cs
 80011d0:	2308      	movcs	r3, #8
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* pack available bytes (little-endian) */
        for (uint32_t b = 0U; b < chunk; ++b) {
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011d8:	e027      	b.n	800122a <execute_mem_write+0xa6>
            data64 |= ((uint64_t)pBuffer[offset + b]) << (8U * b);
 80011da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011de:	4413      	add	r3, r2
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	4413      	add	r3, r2
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2200      	movs	r2, #0
 80011ea:	469a      	mov	sl, r3
 80011ec:	4693      	mov	fp, r2
 80011ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	f1a3 0120 	sub.w	r1, r3, #32
 80011f6:	f1c3 0220 	rsb	r2, r3, #32
 80011fa:	fa0b f503 	lsl.w	r5, fp, r3
 80011fe:	fa0a f101 	lsl.w	r1, sl, r1
 8001202:	430d      	orrs	r5, r1
 8001204:	fa2a f202 	lsr.w	r2, sl, r2
 8001208:	4315      	orrs	r5, r2
 800120a:	fa0a f403 	lsl.w	r4, sl, r3
 800120e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001212:	ea42 0104 	orr.w	r1, r2, r4
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	432b      	orrs	r3, r5
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001220:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for (uint32_t b = 0U; b < chunk; ++b) {
 8001224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001226:	3301      	adds	r3, #1
 8001228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800122a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122e:	429a      	cmp	r2, r3
 8001230:	d3d3      	bcc.n	80011da <execute_mem_write+0x56>
        }
        /* pad remaining bytes with 0xFF if needed */
        for (uint32_t b = chunk; b < 8U; ++b) {
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001236:	e024      	b.n	8001282 <execute_mem_write+0xfe>
            data64 |= ((uint64_t)0xFFU) << (8U * b);
 8001238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800123a:	00d8      	lsls	r0, r3, #3
 800123c:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	f1a0 0620 	sub.w	r6, r0, #32
 8001248:	f1c0 0120 	rsb	r1, r0, #32
 800124c:	fa03 f900 	lsl.w	r9, r3, r0
 8001250:	fa02 f606 	lsl.w	r6, r2, r6
 8001254:	ea49 0906 	orr.w	r9, r9, r6
 8001258:	fa22 f101 	lsr.w	r1, r2, r1
 800125c:	ea49 0901 	orr.w	r9, r9, r1
 8001260:	fa02 f800 	lsl.w	r8, r2, r0
 8001264:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001268:	ea42 0108 	orr.w	r1, r2, r8
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	ea43 0309 	orr.w	r3, r3, r9
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001278:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for (uint32_t b = chunk; b < 8U; ++b) {
 800127c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800127e:	3301      	adds	r3, #1
 8001280:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001284:	2b07      	cmp	r3, #7
 8001286:	d9d7      	bls.n	8001238 <execute_mem_write+0xb4>
        }

        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, mem_address + offset, data64);
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800128c:	18d1      	adds	r1, r2, r3
 800128e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001292:	2000      	movs	r0, #0
 8001294:	f000 fda4 	bl	8001de0 <HAL_FLASH_Program>
 8001298:	4603      	mov	r3, r0
 800129a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (status != HAL_OK) break;
 800129e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d107      	bne.n	80012b6 <execute_mem_write+0x132>
    for (uint32_t offset = 0; offset < len; offset += 8U) {
 80012a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012a8:	3308      	adds	r3, #8
 80012aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d382      	bcc.n	80011ba <execute_mem_write+0x36>
 80012b4:	e000      	b.n	80012b8 <execute_mem_write+0x134>
        if (status != HAL_OK) break;
 80012b6:	bf00      	nop
    }

    HAL_FLASH_Lock();
 80012b8:	f000 fe20 	bl	8001efc <HAL_FLASH_Lock>
    return (uint8_t)status; /* 0 = HAL_OK */
 80012bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3744      	adds	r7, #68	@ 0x44
 80012c4:	46bd      	mov	sp, r7
 80012c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080012cc <handle_firmware_update>:
	/*TODO: Add CRC verification for the received function*/
	return available_version;
}

uint8_t handle_firmware_update(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
	/* Find the inactive bank address and corresponding page numbers*/
	uint32_t inactive_bank_adress = (active_bank_number == FLASH_ACTIVE_BANK1) ? FLASH_FIRMWARE2 : FLASH_FIRMWARE1;
 80012d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <handle_firmware_update+0x7c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d101      	bne.n	80012de <handle_firmware_update+0x12>
 80012da:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <handle_firmware_update+0x80>)
 80012dc:	e000      	b.n	80012e0 <handle_firmware_update+0x14>
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <handle_firmware_update+0x84>)
 80012e0:	60fb      	str	r3, [r7, #12]
	uint32_t inactive_page_number = (active_bank_number == FLASH_ACTIVE_BANK1) ? 256 : 16;
 80012e2:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <handle_firmware_update+0x7c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d102      	bne.n	80012f0 <handle_firmware_update+0x24>
 80012ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012ee:	e000      	b.n	80012f2 <handle_firmware_update+0x26>
 80012f0:	2310      	movs	r3, #16
 80012f2:	60bb      	str	r3, [r7, #8]
	uint8_t inactive_bank_number = (active_bank_number == FLASH_ACTIVE_BANK1) ? FLASH_ACTIVE_BANK2 : FLASH_ACTIVE_BANK1;
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <handle_firmware_update+0x7c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <handle_firmware_update+0x34>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e000      	b.n	8001302 <handle_firmware_update+0x36>
 8001300:	2301      	movs	r3, #1
 8001302:	71fb      	strb	r3, [r7, #7]

	printmsg("BL_DEBUG_MSG: Downloading binaries to inactive bank: %d \n\r", inactive_bank_number);
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	4619      	mov	r1, r3
 8001308:	4812      	ldr	r0, [pc, #72]	@ (8001354 <handle_firmware_update+0x88>)
 800130a:	f7ff fb3d 	bl	8000988 <printmsg>

	uint8_t update_request = BL_FW_UPDATE_REQUIRED;
 800130e:	2388      	movs	r3, #136	@ 0x88
 8001310:	713b      	strb	r3, [r7, #4]
	bootloader_uart_write_data(&update_request, 1);
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2101      	movs	r1, #1
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fe80 	bl	800101c <bootloader_uart_write_data>

	/* Get the length and check if new firmware fit into the banks, <= 480KB (in terms of words) TODO: Add size check, verification, roll back, other features*/
	// uint8_t write_status = 0x00;
	uint8_t payload_len = bl_rx_buffer[6];
 800131c:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <handle_firmware_update+0x8c>)
 800131e:	799b      	ldrb	r3, [r3, #6]
 8001320:	71bb      	strb	r3, [r7, #6]

	/* Erase the Inactive bank */
	//execute_flash_erase(inactive_page_number , 240);

	/* Download onto Inactive bank */
	execute_mem_write(&bl_rx_buffer[7], inactive_bank_adress, payload_len);
 8001322:	79bb      	ldrb	r3, [r7, #6]
 8001324:	461a      	mov	r2, r3
 8001326:	68f9      	ldr	r1, [r7, #12]
 8001328:	480c      	ldr	r0, [pc, #48]	@ (800135c <handle_firmware_update+0x90>)
 800132a:	f7ff ff2b 	bl	8001184 <execute_mem_write>

	/*Update the active bank number in FLASH */
	uint8_t num_status = update_active_bank_number(inactive_bank_adress);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f822 	bl	800137c <update_active_bank_number>
 8001338:	4603      	mov	r3, r0
 800133a:	717b      	strb	r3, [r7, #5]

	return num_status;
 800133c:	797b      	ldrb	r3, [r7, #5]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200002a0 	.word	0x200002a0
 800134c:	08080000 	.word	0x08080000
 8001350:	08008000 	.word	0x08008000
 8001354:	08005bc0 	.word	0x08005bc0
 8001358:	200001d8 	.word	0x200001d8
 800135c:	200001df 	.word	0x200001df

08001360 <bootloader_show_active_bank>:

void bootloader_show_active_bank(uint8_t *pBuffer)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	/* Variable to store the active firmware bank number - To be preserved even after powering off
	 * One method: one dedicated page (2KB) in FLASH for configuration data - meta-data*/
	bootloader_uart_write_data((uint8_t*)&pBuffer[1], 1);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3301      	adds	r3, #1
 800136c:	2101      	movs	r1, #1
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fe54 	bl	800101c <bootloader_uart_write_data>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <update_active_bank_number>:

uint8_t update_active_bank_number(uint8_t active_bank)
{
 800137c:	b5b0      	push	{r4, r5, r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]

	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t pageError;
	HAL_StatusTypeDef status;

	HAL_FLASH_Unlock();
 8001386:	f000 fd97 	bl	8001eb8 <HAL_FLASH_Unlock>

	flashErase_handle.Banks = FLASH_BANK_2;
 800138a:	2302      	movs	r3, #2
 800138c:	613b      	str	r3, [r7, #16]
	flashErase_handle.NbPages = 1;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
	flashErase_handle.Page = FLASH_METADATA_PAGE;
 8001392:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8001396:	617b      	str	r3, [r7, #20]
	flashErase_handle.TypeErase = FLASH_TYPEERASE_PAGES;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]

	status = HAL_FLASHEx_Erase(&flashErase_handle, &pageError);
 800139c:	f107 0208 	add.w	r2, r7, #8
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	4611      	mov	r1, r2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fe6a 	bl	8002080 <HAL_FLASHEx_Erase>
 80013ac:	4603      	mov	r3, r0
 80013ae:	77fb      	strb	r3, [r7, #31]
	if (status == HAL_ERROR) return HAL_ERROR;
 80013b0:	7ffb      	ldrb	r3, [r7, #31]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d101      	bne.n	80013ba <update_active_bank_number+0x3e>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00e      	b.n	80013d8 <update_active_bank_number+0x5c>

	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_METADATA_BASEADDR, (uint64_t)active_bank);
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2200      	movs	r2, #0
 80013be:	461c      	mov	r4, r3
 80013c0:	4615      	mov	r5, r2
 80013c2:	4622      	mov	r2, r4
 80013c4:	462b      	mov	r3, r5
 80013c6:	4906      	ldr	r1, [pc, #24]	@ (80013e0 <update_active_bank_number+0x64>)
 80013c8:	2000      	movs	r0, #0
 80013ca:	f000 fd09 	bl	8001de0 <HAL_FLASH_Program>
 80013ce:	4603      	mov	r3, r0
 80013d0:	77fb      	strb	r3, [r7, #31]

	HAL_FLASH_Lock();
 80013d2:	f000 fd93 	bl	8001efc <HAL_FLASH_Lock>

	return status;
 80013d6:	7ffb      	ldrb	r3, [r7, #31]

}
 80013d8:	4618      	mov	r0, r3
 80013da:	3720      	adds	r7, #32
 80013dc:	46bd      	mov	sp, r7
 80013de:	bdb0      	pop	{r4, r5, r7, pc}
 80013e0:	080ff800 	.word	0x080ff800

080013e4 <fetch_active_bank_number>:

uint8_t fetch_active_bank_number(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
	/*Fetch the active bank details from dedicated FLASH meta data page*/
	uint64_t retrieved_data;
	retrieved_data = *(const uint64_t*) FLASH_METADATA_BASEADDR;
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <fetch_active_bank_number+0x20>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	e9c7 2300 	strd	r2, r3, [r7]

	return (uint8_t)retrieved_data;
 80013f4:	783b      	ldrb	r3, [r7, #0]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	080ff800 	.word	0x080ff800

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
}
 800140e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <Error_Handler+0x8>

08001414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <HAL_MspInit+0x44>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141e:	4a0e      	ldr	r2, [pc, #56]	@ (8001458 <HAL_MspInit+0x44>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6613      	str	r3, [r2, #96]	@ 0x60
 8001426:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <HAL_MspInit+0x44>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <HAL_MspInit+0x44>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001436:	4a08      	ldr	r2, [pc, #32]	@ (8001458 <HAL_MspInit+0x44>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143c:	6593      	str	r3, [r2, #88]	@ 0x58
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_MspInit+0x44>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <HAL_CRC_MspInit+0x38>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d10b      	bne.n	8001486 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_CRC_MspInit+0x3c>)
 8001470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001472:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <HAL_CRC_MspInit+0x3c>)
 8001474:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001478:	6493      	str	r3, [r2, #72]	@ 0x48
 800147a:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <HAL_CRC_MspInit+0x3c>)
 800147c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40023000 	.word	0x40023000
 8001498:	40021000 	.word	0x40021000

0800149c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b0ae      	sub	sp, #184	@ 0xb8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	228c      	movs	r2, #140	@ 0x8c
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 fc43 	bl	8004d48 <memset>
  if(huart->Instance==LPUART1)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a43      	ldr	r2, [pc, #268]	@ (80015d4 <HAL_UART_MspInit+0x138>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d13e      	bne.n	800154a <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80014cc:	2320      	movs	r3, #32
 80014ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 f8d7 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e4:	f7ff ff90 	bl	8001408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80014e8:	4b3b      	ldr	r3, [pc, #236]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 80014ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ec:	4a3a      	ldr	r2, [pc, #232]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80014f4:	4b38      	ldr	r3, [pc, #224]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 80014f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001500:	4b35      	ldr	r3, [pc, #212]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001504:	4a34      	ldr	r2, [pc, #208]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 8001506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800150a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150c:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001518:	f001 fa6a 	bl	80029f0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800151c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001520:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001536:	2308      	movs	r3, #8
 8001538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800153c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001540:	4619      	mov	r1, r3
 8001542:	4826      	ldr	r0, [pc, #152]	@ (80015dc <HAL_UART_MspInit+0x140>)
 8001544:	f001 f82e 	bl	80025a4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001548:	e03f      	b.n	80015ca <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a24      	ldr	r2, [pc, #144]	@ (80015e0 <HAL_UART_MspInit+0x144>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d13a      	bne.n	80015ca <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001558:	2300      	movs	r3, #0
 800155a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155c:	f107 0318 	add.w	r3, r7, #24
 8001560:	4618      	mov	r0, r3
 8001562:	f002 f893 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800156c:	f7ff ff4c 	bl	8001408 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001570:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001574:	4a18      	ldr	r2, [pc, #96]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 8001576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800157a:	6593      	str	r3, [r2, #88]	@ 0x58
 800157c:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 800157e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158c:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 800158e:	f043 0308 	orr.w	r3, r3, #8
 8001592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001594:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <HAL_UART_MspInit+0x13c>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015a0:	2360      	movs	r3, #96	@ 0x60
 80015a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b8:	2307      	movs	r3, #7
 80015ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015be:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015c2:	4619      	mov	r1, r3
 80015c4:	4807      	ldr	r0, [pc, #28]	@ (80015e4 <HAL_UART_MspInit+0x148>)
 80015c6:	f000 ffed 	bl	80025a4 <HAL_GPIO_Init>
}
 80015ca:	bf00      	nop
 80015cc:	37b8      	adds	r7, #184	@ 0xb8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40008000 	.word	0x40008000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	48001800 	.word	0x48001800
 80015e0:	40004400 	.word	0x40004400
 80015e4:	48000c00 	.word	0x48000c00

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <NMI_Handler+0x4>

080015f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <MemManage_Handler+0x4>

08001600 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <UsageFault_Handler+0x4>

08001610 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163e:	f000 f8c9 	bl	80017d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001650:	4a14      	ldr	r2, [pc, #80]	@ (80016a4 <_sbrk+0x5c>)
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <_sbrk+0x60>)
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800165c:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <_sbrk+0x64>)
 8001666:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d207      	bcs.n	8001688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001678:	f003 fb6e 	bl	8004d58 <__errno>
 800167c:	4603      	mov	r3, r0
 800167e:	220c      	movs	r2, #12
 8001680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	e009      	b.n	800169c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001688:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168e:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <_sbrk+0x64>)
 8001698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20040000 	.word	0x20040000
 80016a8:	00000400 	.word	0x00000400
 80016ac:	200002a4 	.word	0x200002a4
 80016b0:	200003f8 	.word	0x200003f8

080016b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <SystemInit+0x20>)
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016be:	4a05      	ldr	r2, [pc, #20]	@ (80016d4 <SystemInit+0x20>)
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001710 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016dc:	f7ff ffea 	bl	80016b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e0:	480c      	ldr	r0, [pc, #48]	@ (8001714 <LoopForever+0x6>)
  ldr r1, =_edata
 80016e2:	490d      	ldr	r1, [pc, #52]	@ (8001718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e4:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <LoopForever+0xe>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e8:	e002      	b.n	80016f0 <LoopCopyDataInit>

080016ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ee:	3304      	adds	r3, #4

080016f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f4:	d3f9      	bcc.n	80016ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001724 <LoopForever+0x16>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016fc:	e001      	b.n	8001702 <LoopFillZerobss>

080016fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001700:	3204      	adds	r2, #4

08001702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001704:	d3fb      	bcc.n	80016fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001706:	f003 fb2d 	bl	8004d64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800170a:	f7fe ff5f 	bl	80005cc <main>

0800170e <LoopForever>:

LoopForever:
    b LoopForever
 800170e:	e7fe      	b.n	800170e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001710:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800171c:	08005c88 	.word	0x08005c88
  ldr r2, =_sbss
 8001720:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001724:	200003f4 	.word	0x200003f4

08001728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC1_2_IRQHandler>

0800172a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f91f 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800173a:	2000      	movs	r0, #0
 800173c:	f000 f80e 	bl	800175c <HAL_InitTick>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	71fb      	strb	r3, [r7, #7]
 800174a:	e001      	b.n	8001750 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800174c:	f7ff fe62 	bl	8001414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001750:	79fb      	ldrb	r3, [r7, #7]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001768:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <HAL_InitTick+0x6c>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d023      	beq.n	80017b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001770:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <HAL_InitTick+0x70>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <HAL_InitTick+0x6c>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f91d 	bl	80019c6 <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b0f      	cmp	r3, #15
 8001796:	d809      	bhi.n	80017ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001798:	2200      	movs	r2, #0
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f000 f8f5 	bl	800198e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a4:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <HAL_InitTick+0x74>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e007      	b.n	80017bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e004      	b.n	80017bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	e001      	b.n	80017bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000014 	.word	0x20000014
 80017cc:	2000000c 	.word	0x2000000c
 80017d0:	20000010 	.word	0x20000010

080017d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_IncTick+0x20>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_IncTick+0x24>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <HAL_IncTick+0x24>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000014 	.word	0x20000014
 80017f8:	200002a8 	.word	0x200002a8

080017fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b03      	ldr	r3, [pc, #12]	@ (8001810 <HAL_GetTick+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	200002a8 	.word	0x200002a8

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	@ (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	6039      	str	r1, [r7, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	db0a      	blt.n	80018a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	490c      	ldr	r1, [pc, #48]	@ (80018c4 <__NVIC_SetPriority+0x4c>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	0112      	lsls	r2, r2, #4
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	440b      	add	r3, r1
 800189c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a0:	e00a      	b.n	80018b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4908      	ldr	r1, [pc, #32]	@ (80018c8 <__NVIC_SetPriority+0x50>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	3b04      	subs	r3, #4
 80018b0:	0112      	lsls	r2, r2, #4
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	440b      	add	r3, r1
 80018b6:	761a      	strb	r2, [r3, #24]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000e100 	.word	0xe000e100
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b089      	sub	sp, #36	@ 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f1c3 0307 	rsb	r3, r3, #7
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	bf28      	it	cs
 80018ea:	2304      	movcs	r3, #4
 80018ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3304      	adds	r3, #4
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d902      	bls.n	80018fc <NVIC_EncodePriority+0x30>
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3b03      	subs	r3, #3
 80018fa:	e000      	b.n	80018fe <NVIC_EncodePriority+0x32>
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	f04f 32ff 	mov.w	r2, #4294967295
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	401a      	ands	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001914:	f04f 31ff 	mov.w	r1, #4294967295
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	43d9      	mvns	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	4313      	orrs	r3, r2
         );
}
 8001926:	4618      	mov	r0, r3
 8001928:	3724      	adds	r7, #36	@ 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001944:	d301      	bcc.n	800194a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001946:	2301      	movs	r3, #1
 8001948:	e00f      	b.n	800196a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194a:	4a0a      	ldr	r2, [pc, #40]	@ (8001974 <SysTick_Config+0x40>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001952:	210f      	movs	r1, #15
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f7ff ff8e 	bl	8001878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <SysTick_Config+0x40>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <SysTick_Config+0x40>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	e000e010 	.word	0xe000e010

08001978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff47 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a0:	f7ff ff5c 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ff8e 	bl	80018cc <NVIC_EncodePriority>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff5d 	bl	8001878 <__NVIC_SetPriority>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffb0 	bl	8001934 <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e054      	b.n	8001a9c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7f5b      	ldrb	r3, [r3, #29]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d105      	bne.n	8001a08 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fd2a 	bl	800145c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	791b      	ldrb	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a22      	ldr	r2, [pc, #136]	@ (8001aa4 <HAL_CRC_Init+0xc4>)
 8001a1c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0218 	bic.w	r2, r2, #24
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	e00c      	b.n	8001a4a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6899      	ldr	r1, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f942 	bl	8001cc4 <HAL_CRCEx_Polynomial_Set>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e028      	b.n	8001a9c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	795b      	ldrb	r3, [r3, #5]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5a:	611a      	str	r2, [r3, #16]
 8001a5c:	e004      	b.n	8001a68 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6912      	ldr	r2, [r2, #16]
 8001a66:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699a      	ldr	r2, [r3, #24]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	04c11db7 	.word	0x04c11db7

08001aa8 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2202      	movs	r2, #2
 8001abc:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d006      	beq.n	8001ad4 <HAL_CRC_Accumulate+0x2c>
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d829      	bhi.n	8001b1e <HAL_CRC_Accumulate+0x76>
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d019      	beq.n	8001b02 <HAL_CRC_Accumulate+0x5a>
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d01e      	beq.n	8001b10 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8001ad2:	e024      	b.n	8001b1e <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	e00a      	b.n	8001af0 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	441a      	add	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d3f0      	bcc.n	8001ada <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	613b      	str	r3, [r7, #16]
      break;
 8001b00:	e00e      	b.n	8001b20 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f812 	bl	8001b30 <CRC_Handle_8>
 8001b0c:	6138      	str	r0, [r7, #16]
      break;
 8001b0e:	e007      	b.n	8001b20 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f89b 	bl	8001c50 <CRC_Handle_16>
 8001b1a:	6138      	str	r0, [r7, #16]
      break;
 8001b1c:	e000      	b.n	8001b20 <HAL_CRC_Accumulate+0x78>
      break;
 8001b1e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2201      	movs	r2, #1
 8001b24:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001b26:	693b      	ldr	r3, [r7, #16]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
 8001b40:	e023      	b.n	8001b8a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	4413      	add	r3, r2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	3301      	adds	r3, #1
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	440b      	add	r3, r1
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b5c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	3302      	adds	r3, #2
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	440b      	add	r3, r1
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001b6c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	3303      	adds	r3, #3
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	440b      	add	r3, r1
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001b80:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	3301      	adds	r3, #1
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d6      	bcc.n	8001b42 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d04f      	beq.n	8001c3e <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d107      	bne.n	8001bb8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	4413      	add	r3, r2
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d117      	bne.n	8001bf2 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	4413      	add	r3, r2
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	b21a      	sxth	r2, r3
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	440b      	add	r3, r1
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	8b7a      	ldrh	r2, [r7, #26]
 8001bf0:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d120      	bne.n	8001c3e <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	4413      	add	r3, r2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	3301      	adds	r3, #1
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	440b      	add	r3, r1
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	8b7a      	ldrh	r2, [r7, #26]
 8001c2a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	3302      	adds	r3, #2
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	4413      	add	r3, r2
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3724      	adds	r7, #36	@ 0x24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e013      	b.n	8001c8a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	4413      	add	r3, r2
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	041a      	lsls	r2, r3, #16
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	440b      	add	r3, r1
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d3e6      	bcc.n	8001c62 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d009      	beq.n	8001cb2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	4413      	add	r3, r2
 8001cac:	881a      	ldrh	r2, [r3, #0]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001cd4:	231f      	movs	r3, #31
 8001cd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	75fb      	strb	r3, [r7, #23]
 8001ce6:	e063      	b.n	8001db0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001ce8:	bf00      	nop
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1e5a      	subs	r2, r3, #1
 8001cee:	613a      	str	r2, [r7, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d009      	beq.n	8001d08 <HAL_CRCEx_Polynomial_Set+0x44>
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b18      	cmp	r3, #24
 8001d0c:	d846      	bhi.n	8001d9c <HAL_CRCEx_Polynomial_Set+0xd8>
 8001d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d14 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d14:	08001da3 	.word	0x08001da3
 8001d18:	08001d9d 	.word	0x08001d9d
 8001d1c:	08001d9d 	.word	0x08001d9d
 8001d20:	08001d9d 	.word	0x08001d9d
 8001d24:	08001d9d 	.word	0x08001d9d
 8001d28:	08001d9d 	.word	0x08001d9d
 8001d2c:	08001d9d 	.word	0x08001d9d
 8001d30:	08001d9d 	.word	0x08001d9d
 8001d34:	08001d91 	.word	0x08001d91
 8001d38:	08001d9d 	.word	0x08001d9d
 8001d3c:	08001d9d 	.word	0x08001d9d
 8001d40:	08001d9d 	.word	0x08001d9d
 8001d44:	08001d9d 	.word	0x08001d9d
 8001d48:	08001d9d 	.word	0x08001d9d
 8001d4c:	08001d9d 	.word	0x08001d9d
 8001d50:	08001d9d 	.word	0x08001d9d
 8001d54:	08001d85 	.word	0x08001d85
 8001d58:	08001d9d 	.word	0x08001d9d
 8001d5c:	08001d9d 	.word	0x08001d9d
 8001d60:	08001d9d 	.word	0x08001d9d
 8001d64:	08001d9d 	.word	0x08001d9d
 8001d68:	08001d9d 	.word	0x08001d9d
 8001d6c:	08001d9d 	.word	0x08001d9d
 8001d70:	08001d9d 	.word	0x08001d9d
 8001d74:	08001d79 	.word	0x08001d79
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d913      	bls.n	8001da6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001d82:	e010      	b.n	8001da6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2b07      	cmp	r3, #7
 8001d88:	d90f      	bls.n	8001daa <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001d8e:	e00c      	b.n	8001daa <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b0f      	cmp	r3, #15
 8001d94:	d90b      	bls.n	8001dae <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001d9a:	e008      	b.n	8001dae <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	75fb      	strb	r3, [r7, #23]
        break;
 8001da0:	e006      	b.n	8001db0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001da2:	bf00      	nop
 8001da4:	e004      	b.n	8001db0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001da6:	bf00      	nop
 8001da8:	e002      	b.n	8001db0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001daa:	bf00      	nop
 8001dac:	e000      	b.n	8001db0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001dae:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10d      	bne.n	8001dd2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f023 0118 	bic.w	r1, r3, #24
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001df2:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb0 <HAL_FLASH_Program+0xd0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_FLASH_Program+0x1e>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e053      	b.n	8001ea6 <HAL_FLASH_Program+0xc6>
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8001eb0 <HAL_FLASH_Program+0xd0>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e04:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001e08:	f000 f888 	bl	8001f1c <FLASH_WaitForLastOperation>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d143      	bne.n	8001e9e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e16:	4b26      	ldr	r3, [pc, #152]	@ (8001eb0 <HAL_FLASH_Program+0xd0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001e1c:	4b25      	ldr	r3, [pc, #148]	@ (8001eb4 <HAL_FLASH_Program+0xd4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d009      	beq.n	8001e3c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001e28:	4b22      	ldr	r3, [pc, #136]	@ (8001eb4 <HAL_FLASH_Program+0xd4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a21      	ldr	r2, [pc, #132]	@ (8001eb4 <HAL_FLASH_Program+0xd4>)
 8001e2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e32:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001e34:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <HAL_FLASH_Program+0xd0>)
 8001e36:	2202      	movs	r2, #2
 8001e38:	771a      	strb	r2, [r3, #28]
 8001e3a:	e002      	b.n	8001e42 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb0 <HAL_FLASH_Program+0xd0>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d107      	bne.n	8001e58 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e4c:	68b8      	ldr	r0, [r7, #8]
 8001e4e:	f000 f8bb 	bl	8001fc8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001e52:	2301      	movs	r3, #1
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	e010      	b.n	8001e7a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d002      	beq.n	8001e64 <HAL_FLASH_Program+0x84>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d10a      	bne.n	8001e7a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4619      	mov	r1, r3
 8001e68:	68b8      	ldr	r0, [r7, #8]
 8001e6a:	f000 f8d3 	bl	8002014 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d102      	bne.n	8001e7a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001e74:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001e78:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e7a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001e7e:	f000 f84d 	bl	8001f1c <FLASH_WaitForLastOperation>
 8001e82:	4603      	mov	r3, r0
 8001e84:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001e8c:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <HAL_FLASH_Program+0xd4>)
 8001e8e:	695a      	ldr	r2, [r3, #20]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	4907      	ldr	r1, [pc, #28]	@ (8001eb4 <HAL_FLASH_Program+0xd4>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001e9a:	f000 fa39 	bl	8002310 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e9e:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <HAL_FLASH_Program+0xd0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]

  return status;
 8001ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000018 	.word	0x20000018
 8001eb4:	40022000 	.word	0x40022000

08001eb8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <HAL_FLASH_Unlock+0x38>)
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	da0b      	bge.n	8001ee2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001eca:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <HAL_FLASH_Unlock+0x38>)
 8001ecc:	4a09      	ldr	r2, [pc, #36]	@ (8001ef4 <HAL_FLASH_Unlock+0x3c>)
 8001ece:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ed0:	4b07      	ldr	r3, [pc, #28]	@ (8001ef0 <HAL_FLASH_Unlock+0x38>)
 8001ed2:	4a09      	ldr	r2, [pc, #36]	@ (8001ef8 <HAL_FLASH_Unlock+0x40>)
 8001ed4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_FLASH_Unlock+0x38>)
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	da01      	bge.n	8001ee2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40022000 	.word	0x40022000
 8001ef4:	45670123 	.word	0x45670123
 8001ef8:	cdef89ab 	.word	0xcdef89ab

08001efc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_FLASH_Lock+0x1c>)
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <HAL_FLASH_Lock+0x1c>)
 8001f06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f0a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40022000 	.word	0x40022000

08001f1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001f24:	f7ff fc6a 	bl	80017fc <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001f2a:	e00d      	b.n	8001f48 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f32:	d009      	beq.n	8001f48 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001f34:	f7ff fc62 	bl	80017fc <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d801      	bhi.n	8001f48 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e036      	b.n	8001fb6 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001f48:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <FLASH_WaitForLastOperation+0xa4>)
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1eb      	bne.n	8001f2c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001f54:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <FLASH_WaitForLastOperation+0xa4>)
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d01d      	beq.n	8001fa2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001f66:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <FLASH_WaitForLastOperation+0xa8>)
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	4a15      	ldr	r2, [pc, #84]	@ (8001fc4 <FLASH_WaitForLastOperation+0xa8>)
 8001f70:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f78:	d307      	bcc.n	8001f8a <FLASH_WaitForLastOperation+0x6e>
 8001f7a:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <FLASH_WaitForLastOperation+0xa4>)
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8001f84:	490e      	ldr	r1, [pc, #56]	@ (8001fc0 <FLASH_WaitForLastOperation+0xa4>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	618b      	str	r3, [r1, #24]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <FLASH_WaitForLastOperation+0x82>
 8001f94:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <FLASH_WaitForLastOperation+0xa4>)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001f9c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e009      	b.n	8001fb6 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001fa2:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <FLASH_WaitForLastOperation+0xa4>)
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001fae:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <FLASH_WaitForLastOperation+0xa4>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40022000 	.word	0x40022000
 8001fc4:	20000018 	.word	0x20000018

08001fc8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <FLASH_Program_DoubleWord+0x48>)
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002010 <FLASH_Program_DoubleWord+0x48>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001fe6:	f3bf 8f6f 	isb	sy
}
 8001fea:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001fec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	000a      	movs	r2, r1
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	68f9      	ldr	r1, [r7, #12]
 8001ffe:	3104      	adds	r1, #4
 8002000:	4613      	mov	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	40022000 	.word	0x40022000

08002014 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	@ 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800201e:	2340      	movs	r3, #64	@ 0x40
 8002020:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <FLASH_Program_Fast+0x68>)
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	4a13      	ldr	r2, [pc, #76]	@ (800207c <FLASH_Program_Fast+0x68>)
 8002030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002034:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002036:	f3ef 8310 	mrs	r3, PRIMASK
 800203a:	60fb      	str	r3, [r7, #12]
  return(result);
 800203c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800203e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002040:	b672      	cpsid	i
}
 8002042:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	3304      	adds	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3304      	adds	r3, #4
 8002056:	617b      	str	r3, [r7, #20]
    row_index--;
 8002058:	7ffb      	ldrb	r3, [r7, #31]
 800205a:	3b01      	subs	r3, #1
 800205c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800205e:	7ffb      	ldrb	r3, [r7, #31]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ef      	bne.n	8002044 <FLASH_Program_Fast+0x30>
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f383 8810 	msr	PRIMASK, r3
}
 800206e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8002070:	bf00      	nop
 8002072:	3724      	adds	r7, #36	@ 0x24
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40022000 	.word	0x40022000

08002080 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800208a:	4b49      	ldr	r3, [pc, #292]	@ (80021b0 <HAL_FLASHEx_Erase+0x130>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_FLASHEx_Erase+0x16>
 8002092:	2302      	movs	r3, #2
 8002094:	e087      	b.n	80021a6 <HAL_FLASHEx_Erase+0x126>
 8002096:	4b46      	ldr	r3, [pc, #280]	@ (80021b0 <HAL_FLASHEx_Erase+0x130>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800209c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80020a0:	f7ff ff3c 	bl	8001f1c <FLASH_WaitForLastOperation>
 80020a4:	4603      	mov	r3, r0
 80020a6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d177      	bne.n	800219e <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020ae:	4b40      	ldr	r3, [pc, #256]	@ (80021b0 <HAL_FLASHEx_Erase+0x130>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80020b4:	4b3f      	ldr	r3, [pc, #252]	@ (80021b4 <HAL_FLASHEx_Erase+0x134>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80020c0:	4b3c      	ldr	r3, [pc, #240]	@ (80021b4 <HAL_FLASHEx_Erase+0x134>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d009      	beq.n	80020e0 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80020cc:	4b39      	ldr	r3, [pc, #228]	@ (80021b4 <HAL_FLASHEx_Erase+0x134>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a38      	ldr	r2, [pc, #224]	@ (80021b4 <HAL_FLASHEx_Erase+0x134>)
 80020d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80020d6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80020d8:	4b35      	ldr	r3, [pc, #212]	@ (80021b0 <HAL_FLASHEx_Erase+0x130>)
 80020da:	2203      	movs	r2, #3
 80020dc:	771a      	strb	r2, [r3, #28]
 80020de:	e016      	b.n	800210e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80020e0:	4b33      	ldr	r3, [pc, #204]	@ (80021b0 <HAL_FLASHEx_Erase+0x130>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	771a      	strb	r2, [r3, #28]
 80020e6:	e012      	b.n	800210e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80020e8:	4b32      	ldr	r3, [pc, #200]	@ (80021b4 <HAL_FLASHEx_Erase+0x134>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d009      	beq.n	8002108 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80020f4:	4b2f      	ldr	r3, [pc, #188]	@ (80021b4 <HAL_FLASHEx_Erase+0x134>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a2e      	ldr	r2, [pc, #184]	@ (80021b4 <HAL_FLASHEx_Erase+0x134>)
 80020fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80020fe:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002100:	4b2b      	ldr	r3, [pc, #172]	@ (80021b0 <HAL_FLASHEx_Erase+0x130>)
 8002102:	2202      	movs	r2, #2
 8002104:	771a      	strb	r2, [r3, #28]
 8002106:	e002      	b.n	800210e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002108:	4b29      	ldr	r3, [pc, #164]	@ (80021b0 <HAL_FLASHEx_Erase+0x130>)
 800210a:	2200      	movs	r2, #0
 800210c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d113      	bne.n	800213e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f89a 	bl	8002254 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002120:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002124:	f7ff fefa 	bl	8001f1c <FLASH_WaitForLastOperation>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800212c:	4b21      	ldr	r3, [pc, #132]	@ (80021b4 <HAL_FLASHEx_Erase+0x134>)
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	4a20      	ldr	r2, [pc, #128]	@ (80021b4 <HAL_FLASHEx_Erase+0x134>)
 8002132:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002136:	f023 0304 	bic.w	r3, r3, #4
 800213a:	6153      	str	r3, [r2, #20]
 800213c:	e02d      	b.n	800219a <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	e01d      	b.n	800218a <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4619      	mov	r1, r3
 8002154:	68b8      	ldr	r0, [r7, #8]
 8002156:	f000 f8a5 	bl	80022a4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800215a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800215e:	f7ff fedd 	bl	8001f1c <FLASH_WaitForLastOperation>
 8002162:	4603      	mov	r3, r0
 8002164:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002166:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <HAL_FLASHEx_Erase+0x134>)
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	4a12      	ldr	r2, [pc, #72]	@ (80021b4 <HAL_FLASHEx_Erase+0x134>)
 800216c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002170:	f023 0302 	bic.w	r3, r3, #2
 8002174:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	601a      	str	r2, [r3, #0]
          break;
 8002182:	e00a      	b.n	800219a <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	3301      	adds	r3, #1
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	4413      	add	r3, r2
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	429a      	cmp	r2, r3
 8002198:	d3d9      	bcc.n	800214e <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800219a:	f000 f8b9 	bl	8002310 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800219e:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <HAL_FLASHEx_Erase+0x130>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]

  return status;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000018 	.word	0x20000018
 80021b4:	40022000 	.word	0x40022000

080021b8 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2206      	movs	r2, #6
 80021c4:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_FLASHEx_OBGetConfig+0x2e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d007      	beq.n	80021e6 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d003      	beq.n	80021e6 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d10f      	bne.n	8002206 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f043 0201 	orr.w	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6858      	ldr	r0, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f103 0108 	add.w	r1, r3, #8
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	330c      	adds	r3, #12
 8002200:	461a      	mov	r2, r3
 8002202:	f000 f8cf 	bl	80023a4 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8002206:	f000 f917 	bl	8002438 <FLASH_OB_GetRDP>
 800220a:	4602      	mov	r2, r0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8002210:	f000 f92c 	bl	800246c <FLASH_OB_GetUser>
 8002214:	4602      	mov	r2, r0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d003      	beq.n	800222a <HAL_FLASHEx_OBGetConfig+0x72>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d110      	bne.n	800224c <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f043 0208 	orr.w	r2, r3, #8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f103 001c 	add.w	r0, r3, #28
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f103 0120 	add.w	r1, r3, #32
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3324      	adds	r3, #36	@ 0x24
 8002246:	461a      	mov	r2, r3
 8002248:	f000 f924 	bl	8002494 <FLASH_OB_GetPCROP>
  }
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002266:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <FLASH_MassErase+0x4c>)
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	4a0d      	ldr	r2, [pc, #52]	@ (80022a0 <FLASH_MassErase+0x4c>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800227c:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <FLASH_MassErase+0x4c>)
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	4a07      	ldr	r2, [pc, #28]	@ (80022a0 <FLASH_MassErase+0x4c>)
 8002282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002286:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002288:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <FLASH_MassErase+0x4c>)
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	4a04      	ldr	r2, [pc, #16]	@ (80022a0 <FLASH_MassErase+0x4c>)
 800228e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002292:	6153      	str	r3, [r2, #20]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40022000 	.word	0x40022000

080022a4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80022b8:	4b14      	ldr	r3, [pc, #80]	@ (800230c <FLASH_PageErase+0x68>)
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	4a13      	ldr	r2, [pc, #76]	@ (800230c <FLASH_PageErase+0x68>)
 80022be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022c2:	6153      	str	r3, [r2, #20]
 80022c4:	e005      	b.n	80022d2 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80022c6:	4b11      	ldr	r3, [pc, #68]	@ (800230c <FLASH_PageErase+0x68>)
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	4a10      	ldr	r2, [pc, #64]	@ (800230c <FLASH_PageErase+0x68>)
 80022cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022d0:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80022d2:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <FLASH_PageErase+0x68>)
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 80022e2:	490a      	ldr	r1, [pc, #40]	@ (800230c <FLASH_PageErase+0x68>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80022e8:	4b08      	ldr	r3, [pc, #32]	@ (800230c <FLASH_PageErase+0x68>)
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	4a07      	ldr	r2, [pc, #28]	@ (800230c <FLASH_PageErase+0x68>)
 80022ee:	f043 0302 	orr.w	r3, r3, #2
 80022f2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80022f4:	4b05      	ldr	r3, [pc, #20]	@ (800230c <FLASH_PageErase+0x68>)
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	4a04      	ldr	r2, [pc, #16]	@ (800230c <FLASH_PageErase+0x68>)
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022fe:	6153      	str	r3, [r2, #20]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	40022000 	.word	0x40022000

08002310 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002316:	4b21      	ldr	r3, [pc, #132]	@ (800239c <FLASH_FlushCaches+0x8c>)
 8002318:	7f1b      	ldrb	r3, [r3, #28]
 800231a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d002      	beq.n	8002328 <FLASH_FlushCaches+0x18>
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d117      	bne.n	8002358 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002328:	4b1d      	ldr	r3, [pc, #116]	@ (80023a0 <FLASH_FlushCaches+0x90>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1c      	ldr	r2, [pc, #112]	@ (80023a0 <FLASH_FlushCaches+0x90>)
 800232e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002332:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002334:	4b1a      	ldr	r3, [pc, #104]	@ (80023a0 <FLASH_FlushCaches+0x90>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a19      	ldr	r2, [pc, #100]	@ (80023a0 <FLASH_FlushCaches+0x90>)
 800233a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <FLASH_FlushCaches+0x90>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a16      	ldr	r2, [pc, #88]	@ (80023a0 <FLASH_FlushCaches+0x90>)
 8002346:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800234a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800234c:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <FLASH_FlushCaches+0x90>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a13      	ldr	r2, [pc, #76]	@ (80023a0 <FLASH_FlushCaches+0x90>)
 8002352:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002356:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d002      	beq.n	8002364 <FLASH_FlushCaches+0x54>
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d111      	bne.n	8002388 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002364:	4b0e      	ldr	r3, [pc, #56]	@ (80023a0 <FLASH_FlushCaches+0x90>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0d      	ldr	r2, [pc, #52]	@ (80023a0 <FLASH_FlushCaches+0x90>)
 800236a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <FLASH_FlushCaches+0x90>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <FLASH_FlushCaches+0x90>)
 8002376:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800237a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <FLASH_FlushCaches+0x90>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a07      	ldr	r2, [pc, #28]	@ (80023a0 <FLASH_FlushCaches+0x90>)
 8002382:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002386:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002388:	4b04      	ldr	r3, [pc, #16]	@ (800239c <FLASH_FlushCaches+0x8c>)
 800238a:	2200      	movs	r2, #0
 800238c:	771a      	strb	r2, [r3, #28]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000018 	.word	0x20000018
 80023a0:	40022000 	.word	0x40022000

080023a4 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10b      	bne.n	80023ce <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 80023b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002434 <FLASH_OB_GetWRP+0x90>)
 80023b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 80023c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002434 <FLASH_OB_GetWRP+0x90>)
 80023c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 80023cc:	e02b      	b.n	8002426 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d10b      	bne.n	80023ec <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 80023d4:	4b17      	ldr	r3, [pc, #92]	@ (8002434 <FLASH_OB_GetWRP+0x90>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 80023de:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <FLASH_OB_GetWRP+0x90>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	0c1b      	lsrs	r3, r3, #16
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]
}
 80023ea:	e01c      	b.n	8002426 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d10b      	bne.n	800240a <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 80023f2:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <FLASH_OB_GetWRP+0x90>)
 80023f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 80023fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002434 <FLASH_OB_GetWRP+0x90>)
 80023fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002400:	0c1b      	lsrs	r3, r3, #16
 8002402:	b2da      	uxtb	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	601a      	str	r2, [r3, #0]
}
 8002408:	e00d      	b.n	8002426 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b04      	cmp	r3, #4
 800240e:	d10a      	bne.n	8002426 <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8002410:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <FLASH_OB_GetWRP+0x90>)
 8002412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002414:	b2da      	uxtb	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 800241a:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <FLASH_OB_GetWRP+0x90>)
 800241c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800241e:	0c1b      	lsrs	r3, r3, #16
 8002420:	b2da      	uxtb	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	601a      	str	r2, [r3, #0]
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40022000 	.word	0x40022000

08002438 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800243e:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <FLASH_OB_GetRDP+0x30>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2baa      	cmp	r3, #170	@ 0xaa
 800244a:	d004      	beq.n	8002456 <FLASH_OB_GetRDP+0x1e>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2bcc      	cmp	r3, #204	@ 0xcc
 8002450:	d001      	beq.n	8002456 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 8002452:	23bb      	movs	r3, #187	@ 0xbb
 8002454:	e002      	b.n	800245c <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 8002456:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <FLASH_OB_GetRDP+0x30>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	b2db      	uxtb	r3, r3
  }
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40022000 	.word	0x40022000

0800246c <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8002472:	4b07      	ldr	r3, [pc, #28]	@ (8002490 <FLASH_OB_GetUser+0x24>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800247e:	607b      	str	r3, [r7, #4]

  return user_config;
 8002480:	687b      	ldr	r3, [r7, #4]
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40022000 	.word	0x40022000

08002494 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	@ 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 80024a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002590 <FLASH_OB_GetPCROP+0xfc>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d115      	bne.n	80024d8 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 80024ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80024b0:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80024b2:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <FLASH_OB_GetPCROP+0x100>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024bc:	4293      	cmp	r3, r2
 80024be:	d008      	beq.n	80024d2 <FLASH_OB_GetPCROP+0x3e>
 80024c0:	4b34      	ldr	r3, [pc, #208]	@ (8002594 <FLASH_OB_GetPCROP+0x100>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	029b      	lsls	r3, r3, #10
 80024c6:	085a      	lsrs	r2, r3, #1
 80024c8:	4b33      	ldr	r3, [pc, #204]	@ (8002598 <FLASH_OB_GetPCROP+0x104>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80024d0:	e000      	b.n	80024d4 <FLASH_OB_GetPCROP+0x40>
 80024d2:	4b32      	ldr	r3, [pc, #200]	@ (800259c <FLASH_OB_GetPCROP+0x108>)
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	e014      	b.n	8002502 <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80024d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002594 <FLASH_OB_GetPCROP+0x100>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d008      	beq.n	80024f8 <FLASH_OB_GetPCROP+0x64>
 80024e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002594 <FLASH_OB_GetPCROP+0x100>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	029b      	lsls	r3, r3, #10
 80024ec:	085a      	lsrs	r2, r3, #1
 80024ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002598 <FLASH_OB_GetPCROP+0x104>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80024f6:	e000      	b.n	80024fa <FLASH_OB_GetPCROP+0x66>
 80024f8:	4b28      	ldr	r3, [pc, #160]	@ (800259c <FLASH_OB_GetPCROP+0x108>)
 80024fa:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 80024fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002500:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b01      	cmp	r3, #1
 800250c:	d115      	bne.n	800253a <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800250e:	4b24      	ldr	r3, [pc, #144]	@ (80025a0 <FLASH_OB_GetPCROP+0x10c>)
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	b29b      	uxth	r3, r3
 8002514:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	00da      	lsls	r2, r3, #3
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	441a      	add	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8002522:	4b1f      	ldr	r3, [pc, #124]	@ (80025a0 <FLASH_OB_GetPCROP+0x10c>)
 8002524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002526:	b29b      	uxth	r3, r3
 8002528:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	00da      	lsls	r2, r3, #3
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	4413      	add	r3, r2
 8002532:	1dda      	adds	r2, r3, #7
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	e01a      	b.n	8002570 <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d114      	bne.n	8002570 <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8002546:	4b16      	ldr	r3, [pc, #88]	@ (80025a0 <FLASH_OB_GetPCROP+0x10c>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	b29b      	uxth	r3, r3
 800254c:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	00da      	lsls	r2, r3, #3
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	441a      	add	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 800255a:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <FLASH_OB_GetPCROP+0x10c>)
 800255c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800255e:	b29b      	uxth	r3, r3
 8002560:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	00da      	lsls	r2, r3, #3
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4413      	add	r3, r2
 800256a:	1dda      	adds	r2, r3, #7
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <FLASH_OB_GetPCROP+0x10c>)
 8002572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002574:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	431a      	orrs	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	601a      	str	r2, [r3, #0]
}
 8002582:	bf00      	nop
 8002584:	3724      	adds	r7, #36	@ 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40010000 	.word	0x40010000
 8002594:	1fff75e0 	.word	0x1fff75e0
 8002598:	01fffe00 	.word	0x01fffe00
 800259c:	08080000 	.word	0x08080000
 80025a0:	40022000 	.word	0x40022000

080025a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b2:	e166      	b.n	8002882 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	2101      	movs	r1, #1
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8158 	beq.w	800287c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d005      	beq.n	80025e4 <HAL_GPIO_Init+0x40>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d130      	bne.n	8002646 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800261a:	2201      	movs	r2, #1
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f003 0201 	and.w	r2, r3, #1
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b03      	cmp	r3, #3
 8002650:	d017      	beq.n	8002682 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d123      	bne.n	80026d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	08da      	lsrs	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3208      	adds	r2, #8
 8002696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	08da      	lsrs	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3208      	adds	r2, #8
 80026d0:	6939      	ldr	r1, [r7, #16]
 80026d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0203 	and.w	r2, r3, #3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80b2 	beq.w	800287c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002718:	4b61      	ldr	r3, [pc, #388]	@ (80028a0 <HAL_GPIO_Init+0x2fc>)
 800271a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271c:	4a60      	ldr	r2, [pc, #384]	@ (80028a0 <HAL_GPIO_Init+0x2fc>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6613      	str	r3, [r2, #96]	@ 0x60
 8002724:	4b5e      	ldr	r3, [pc, #376]	@ (80028a0 <HAL_GPIO_Init+0x2fc>)
 8002726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002730:	4a5c      	ldr	r2, [pc, #368]	@ (80028a4 <HAL_GPIO_Init+0x300>)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	3302      	adds	r3, #2
 8002738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	220f      	movs	r2, #15
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800275a:	d02b      	beq.n	80027b4 <HAL_GPIO_Init+0x210>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a52      	ldr	r2, [pc, #328]	@ (80028a8 <HAL_GPIO_Init+0x304>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d025      	beq.n	80027b0 <HAL_GPIO_Init+0x20c>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a51      	ldr	r2, [pc, #324]	@ (80028ac <HAL_GPIO_Init+0x308>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d01f      	beq.n	80027ac <HAL_GPIO_Init+0x208>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a50      	ldr	r2, [pc, #320]	@ (80028b0 <HAL_GPIO_Init+0x30c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d019      	beq.n	80027a8 <HAL_GPIO_Init+0x204>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a4f      	ldr	r2, [pc, #316]	@ (80028b4 <HAL_GPIO_Init+0x310>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d013      	beq.n	80027a4 <HAL_GPIO_Init+0x200>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a4e      	ldr	r2, [pc, #312]	@ (80028b8 <HAL_GPIO_Init+0x314>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d00d      	beq.n	80027a0 <HAL_GPIO_Init+0x1fc>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a4d      	ldr	r2, [pc, #308]	@ (80028bc <HAL_GPIO_Init+0x318>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d007      	beq.n	800279c <HAL_GPIO_Init+0x1f8>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a4c      	ldr	r2, [pc, #304]	@ (80028c0 <HAL_GPIO_Init+0x31c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d101      	bne.n	8002798 <HAL_GPIO_Init+0x1f4>
 8002794:	2307      	movs	r3, #7
 8002796:	e00e      	b.n	80027b6 <HAL_GPIO_Init+0x212>
 8002798:	2308      	movs	r3, #8
 800279a:	e00c      	b.n	80027b6 <HAL_GPIO_Init+0x212>
 800279c:	2306      	movs	r3, #6
 800279e:	e00a      	b.n	80027b6 <HAL_GPIO_Init+0x212>
 80027a0:	2305      	movs	r3, #5
 80027a2:	e008      	b.n	80027b6 <HAL_GPIO_Init+0x212>
 80027a4:	2304      	movs	r3, #4
 80027a6:	e006      	b.n	80027b6 <HAL_GPIO_Init+0x212>
 80027a8:	2303      	movs	r3, #3
 80027aa:	e004      	b.n	80027b6 <HAL_GPIO_Init+0x212>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e002      	b.n	80027b6 <HAL_GPIO_Init+0x212>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_GPIO_Init+0x212>
 80027b4:	2300      	movs	r3, #0
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	f002 0203 	and.w	r2, r2, #3
 80027bc:	0092      	lsls	r2, r2, #2
 80027be:	4093      	lsls	r3, r2
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027c6:	4937      	ldr	r1, [pc, #220]	@ (80028a4 <HAL_GPIO_Init+0x300>)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	089b      	lsrs	r3, r3, #2
 80027cc:	3302      	adds	r3, #2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027d4:	4b3b      	ldr	r3, [pc, #236]	@ (80028c4 <HAL_GPIO_Init+0x320>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	43db      	mvns	r3, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027f8:	4a32      	ldr	r2, [pc, #200]	@ (80028c4 <HAL_GPIO_Init+0x320>)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027fe:	4b31      	ldr	r3, [pc, #196]	@ (80028c4 <HAL_GPIO_Init+0x320>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	43db      	mvns	r3, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4013      	ands	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002822:	4a28      	ldr	r2, [pc, #160]	@ (80028c4 <HAL_GPIO_Init+0x320>)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002828:	4b26      	ldr	r3, [pc, #152]	@ (80028c4 <HAL_GPIO_Init+0x320>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	43db      	mvns	r3, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800284c:	4a1d      	ldr	r2, [pc, #116]	@ (80028c4 <HAL_GPIO_Init+0x320>)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002852:	4b1c      	ldr	r3, [pc, #112]	@ (80028c4 <HAL_GPIO_Init+0x320>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	43db      	mvns	r3, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4013      	ands	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002876:	4a13      	ldr	r2, [pc, #76]	@ (80028c4 <HAL_GPIO_Init+0x320>)
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3301      	adds	r3, #1
 8002880:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	f47f ae91 	bne.w	80025b4 <HAL_GPIO_Init+0x10>
  }
}
 8002892:	bf00      	nop
 8002894:	bf00      	nop
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40010000 	.word	0x40010000
 80028a8:	48000400 	.word	0x48000400
 80028ac:	48000800 	.word	0x48000800
 80028b0:	48000c00 	.word	0x48000c00
 80028b4:	48001000 	.word	0x48001000
 80028b8:	48001400 	.word	0x48001400
 80028bc:	48001800 	.word	0x48001800
 80028c0:	48001c00 	.word	0x48001c00
 80028c4:	40010400 	.word	0x40010400

080028c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	887b      	ldrh	r3, [r7, #2]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
 80028e4:	e001      	b.n	80028ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
 8002904:	4613      	mov	r3, r2
 8002906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002908:	787b      	ldrb	r3, [r7, #1]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002914:	e002      	b.n	800291c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800292c:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <HAL_PWREx_GetVoltageRange+0x18>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40007000 	.word	0x40007000

08002944 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002952:	d130      	bne.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002954:	4b23      	ldr	r3, [pc, #140]	@ (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800295c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002960:	d038      	beq.n	80029d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002962:	4b20      	ldr	r3, [pc, #128]	@ (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800296a:	4a1e      	ldr	r2, [pc, #120]	@ (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002970:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002972:	4b1d      	ldr	r3, [pc, #116]	@ (80029e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2232      	movs	r2, #50	@ 0x32
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	4a1b      	ldr	r2, [pc, #108]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	0c9b      	lsrs	r3, r3, #18
 8002984:	3301      	adds	r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002988:	e002      	b.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3b01      	subs	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002990:	4b14      	ldr	r3, [pc, #80]	@ (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299c:	d102      	bne.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f2      	bne.n	800298a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029a4:	4b0f      	ldr	r3, [pc, #60]	@ (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029b0:	d110      	bne.n	80029d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e00f      	b.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029b6:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029c2:	d007      	beq.n	80029d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029c4:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029cc:	4a05      	ldr	r2, [pc, #20]	@ (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40007000 	.word	0x40007000
 80029e8:	2000000c 	.word	0x2000000c
 80029ec:	431bde83 	.word	0x431bde83

080029f0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80029f4:	4b05      	ldr	r3, [pc, #20]	@ (8002a0c <HAL_PWREx_EnableVddIO2+0x1c>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a04      	ldr	r2, [pc, #16]	@ (8002a0c <HAL_PWREx_EnableVddIO2+0x1c>)
 80029fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029fe:	6053      	str	r3, [r2, #4]
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40007000 	.word	0x40007000

08002a10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d102      	bne.n	8002a24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f000 bc08 	b.w	8003234 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a24:	4b96      	ldr	r3, [pc, #600]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a2e:	4b94      	ldr	r3, [pc, #592]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80e4 	beq.w	8002c0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <HAL_RCC_OscConfig+0x4c>
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	f040 808b 	bne.w	8002b6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	f040 8087 	bne.w	8002b6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a5c:	4b88      	ldr	r3, [pc, #544]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_OscConfig+0x64>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e3df      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1a      	ldr	r2, [r3, #32]
 8002a78:	4b81      	ldr	r3, [pc, #516]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <HAL_RCC_OscConfig+0x7e>
 8002a84:	4b7e      	ldr	r3, [pc, #504]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a8c:	e005      	b.n	8002a9a <HAL_RCC_OscConfig+0x8a>
 8002a8e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d223      	bcs.n	8002ae6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fd92 	bl	80035cc <RCC_SetFlashLatencyFromMSIRange>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e3c0      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab2:	4b73      	ldr	r3, [pc, #460]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a72      	ldr	r2, [pc, #456]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	f043 0308 	orr.w	r3, r3, #8
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b70      	ldr	r3, [pc, #448]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	496d      	ldr	r1, [pc, #436]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	4968      	ldr	r1, [pc, #416]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
 8002ae4:	e025      	b.n	8002b32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae6:	4b66      	ldr	r3, [pc, #408]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a65      	ldr	r2, [pc, #404]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002aec:	f043 0308 	orr.w	r3, r3, #8
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b63      	ldr	r3, [pc, #396]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4960      	ldr	r1, [pc, #384]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b04:	4b5e      	ldr	r3, [pc, #376]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	495b      	ldr	r1, [pc, #364]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fd52 	bl	80035cc <RCC_SetFlashLatencyFromMSIRange>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e380      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b32:	f000 fc87 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 8002b36:	4602      	mov	r2, r0
 8002b38:	4b51      	ldr	r3, [pc, #324]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	4950      	ldr	r1, [pc, #320]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002b44:	5ccb      	ldrb	r3, [r1, r3]
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4e:	4a4e      	ldr	r2, [pc, #312]	@ (8002c88 <HAL_RCC_OscConfig+0x278>)
 8002b50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b52:	4b4e      	ldr	r3, [pc, #312]	@ (8002c8c <HAL_RCC_OscConfig+0x27c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fe00 	bl	800175c <HAL_InitTick>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d052      	beq.n	8002c0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	e364      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d032      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b72:	4b43      	ldr	r3, [pc, #268]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a42      	ldr	r2, [pc, #264]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fe3d 	bl	80017fc <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b86:	f7fe fe39 	bl	80017fc <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e34d      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b98:	4b39      	ldr	r3, [pc, #228]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba4:	4b36      	ldr	r3, [pc, #216]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a35      	ldr	r2, [pc, #212]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b33      	ldr	r3, [pc, #204]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4930      	ldr	r1, [pc, #192]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	492b      	ldr	r1, [pc, #172]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
 8002bd6:	e01a      	b.n	8002c0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bd8:	4b29      	ldr	r3, [pc, #164]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a28      	ldr	r2, [pc, #160]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002be4:	f7fe fe0a 	bl	80017fc <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bec:	f7fe fe06 	bl	80017fc <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e31a      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bfe:	4b20      	ldr	r3, [pc, #128]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x1dc>
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d073      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_OscConfig+0x21c>
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2b0c      	cmp	r3, #12
 8002c24:	d10e      	bne.n	8002c44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d10b      	bne.n	8002c44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2c:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d063      	beq.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d15f      	bne.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e2f7      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c4c:	d106      	bne.n	8002c5c <HAL_RCC_OscConfig+0x24c>
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a0b      	ldr	r2, [pc, #44]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e025      	b.n	8002ca8 <HAL_RCC_OscConfig+0x298>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c64:	d114      	bne.n	8002c90 <HAL_RCC_OscConfig+0x280>
 8002c66:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a05      	ldr	r2, [pc, #20]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b03      	ldr	r3, [pc, #12]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a02      	ldr	r2, [pc, #8]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e013      	b.n	8002ca8 <HAL_RCC_OscConfig+0x298>
 8002c80:	40021000 	.word	0x40021000
 8002c84:	08005bfc 	.word	0x08005bfc
 8002c88:	2000000c 	.word	0x2000000c
 8002c8c:	20000010 	.word	0x20000010
 8002c90:	4ba0      	ldr	r3, [pc, #640]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a9f      	ldr	r2, [pc, #636]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b9d      	ldr	r3, [pc, #628]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a9c      	ldr	r2, [pc, #624]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fda4 	bl	80017fc <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fda0 	bl	80017fc <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	@ 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e2b4      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cca:	4b92      	ldr	r3, [pc, #584]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x2a8>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fd90 	bl	80017fc <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7fe fd8c 	bl	80017fc <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	@ 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e2a0      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cf2:	4b88      	ldr	r3, [pc, #544]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x2d0>
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d060      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_OscConfig+0x310>
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d119      	bne.n	8002d4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d116      	bne.n	8002d4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d20:	4b7c      	ldr	r3, [pc, #496]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_OscConfig+0x328>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e27d      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b76      	ldr	r3, [pc, #472]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	061b      	lsls	r3, r3, #24
 8002d46:	4973      	ldr	r1, [pc, #460]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d4c:	e040      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d023      	beq.n	8002d9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d56:	4b6f      	ldr	r3, [pc, #444]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a6e      	ldr	r2, [pc, #440]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fe fd4b 	bl	80017fc <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6a:	f7fe fd47 	bl	80017fc <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e25b      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d7c:	4b65      	ldr	r3, [pc, #404]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b62      	ldr	r3, [pc, #392]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	495f      	ldr	r1, [pc, #380]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
 8002d9c:	e018      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a5c      	ldr	r2, [pc, #368]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe fd27 	bl	80017fc <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db2:	f7fe fd23 	bl	80017fc <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e237      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dc4:	4b53      	ldr	r3, [pc, #332]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d03c      	beq.n	8002e56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01c      	beq.n	8002e1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de4:	4b4b      	ldr	r3, [pc, #300]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dea:	4a4a      	ldr	r2, [pc, #296]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df4:	f7fe fd02 	bl	80017fc <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfc:	f7fe fcfe 	bl	80017fc <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e212      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e0e:	4b41      	ldr	r3, [pc, #260]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0ef      	beq.n	8002dfc <HAL_RCC_OscConfig+0x3ec>
 8002e1c:	e01b      	b.n	8002e56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e24:	4a3b      	ldr	r2, [pc, #236]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fce5 	bl	80017fc <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e36:	f7fe fce1 	bl	80017fc <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e1f5      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e48:	4b32      	ldr	r3, [pc, #200]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1ef      	bne.n	8002e36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80a6 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e68:	4b2a      	ldr	r3, [pc, #168]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10d      	bne.n	8002e90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e74:	4b27      	ldr	r3, [pc, #156]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e78:	4a26      	ldr	r2, [pc, #152]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e80:	4b24      	ldr	r3, [pc, #144]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e90:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <HAL_RCC_OscConfig+0x508>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d118      	bne.n	8002ece <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002f18 <HAL_RCC_OscConfig+0x508>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f18 <HAL_RCC_OscConfig+0x508>)
 8002ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fca8 	bl	80017fc <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb0:	f7fe fca4 	bl	80017fc <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e1b8      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec2:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <HAL_RCC_OscConfig+0x508>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d108      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4d8>
 8002ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002edc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ee6:	e029      	b.n	8002f3c <HAL_RCC_OscConfig+0x52c>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b05      	cmp	r3, #5
 8002eee:	d115      	bne.n	8002f1c <HAL_RCC_OscConfig+0x50c>
 8002ef0:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef6:	4a07      	ldr	r2, [pc, #28]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ef8:	f043 0304 	orr.w	r3, r3, #4
 8002efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f00:	4b04      	ldr	r3, [pc, #16]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f06:	4a03      	ldr	r2, [pc, #12]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f10:	e014      	b.n	8002f3c <HAL_RCC_OscConfig+0x52c>
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40007000 	.word	0x40007000
 8002f1c:	4b9d      	ldr	r3, [pc, #628]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f22:	4a9c      	ldr	r2, [pc, #624]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f2c:	4b99      	ldr	r3, [pc, #612]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f32:	4a98      	ldr	r2, [pc, #608]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d016      	beq.n	8002f72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7fe fc5a 	bl	80017fc <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fe fc56 	bl	80017fc <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e168      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f62:	4b8c      	ldr	r3, [pc, #560]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0ed      	beq.n	8002f4c <HAL_RCC_OscConfig+0x53c>
 8002f70:	e015      	b.n	8002f9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f72:	f7fe fc43 	bl	80017fc <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7fe fc3f 	bl	80017fc <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e151      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f90:	4b80      	ldr	r3, [pc, #512]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1ed      	bne.n	8002f7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f9e:	7ffb      	ldrb	r3, [r7, #31]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d105      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa4:	4b7b      	ldr	r3, [pc, #492]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa8:	4a7a      	ldr	r2, [pc, #488]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8002faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d03c      	beq.n	8003036 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01c      	beq.n	8002ffe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fc4:	4b73      	ldr	r3, [pc, #460]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8002fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fca:	4a72      	ldr	r2, [pc, #456]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fc12 	bl	80017fc <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fdc:	f7fe fc0e 	bl	80017fc <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e122      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fee:	4b69      	ldr	r3, [pc, #420]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8002ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0ef      	beq.n	8002fdc <HAL_RCC_OscConfig+0x5cc>
 8002ffc:	e01b      	b.n	8003036 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ffe:	4b65      	ldr	r3, [pc, #404]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8003000:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003004:	4a63      	ldr	r2, [pc, #396]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300e:	f7fe fbf5 	bl	80017fc <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003016:	f7fe fbf1 	bl	80017fc <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e105      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003028:	4b5a      	ldr	r3, [pc, #360]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 800302a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1ef      	bne.n	8003016 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80f9 	beq.w	8003232 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	2b02      	cmp	r3, #2
 8003046:	f040 80cf 	bne.w	80031e8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800304a:	4b52      	ldr	r3, [pc, #328]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f003 0203 	and.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305a:	429a      	cmp	r2, r3
 800305c:	d12c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003068:	3b01      	subs	r3, #1
 800306a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d123      	bne.n	80030b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800307a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d11b      	bne.n	80030b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d113      	bne.n	80030b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309a:	085b      	lsrs	r3, r3, #1
 800309c:	3b01      	subs	r3, #1
 800309e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d109      	bne.n	80030b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	3b01      	subs	r3, #1
 80030b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d071      	beq.n	800319c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d068      	beq.n	8003190 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030be:	4b35      	ldr	r3, [pc, #212]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030ca:	4b32      	ldr	r3, [pc, #200]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e0ac      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030da:	4b2e      	ldr	r3, [pc, #184]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a2d      	ldr	r2, [pc, #180]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 80030e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030e6:	f7fe fb89 	bl	80017fc <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fe fb85 	bl	80017fc <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e099      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003100:	4b24      	ldr	r3, [pc, #144]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800310c:	4b21      	ldr	r3, [pc, #132]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	4b21      	ldr	r3, [pc, #132]	@ (8003198 <HAL_RCC_OscConfig+0x788>)
 8003112:	4013      	ands	r3, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800311c:	3a01      	subs	r2, #1
 800311e:	0112      	lsls	r2, r2, #4
 8003120:	4311      	orrs	r1, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003126:	0212      	lsls	r2, r2, #8
 8003128:	4311      	orrs	r1, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800312e:	0852      	lsrs	r2, r2, #1
 8003130:	3a01      	subs	r2, #1
 8003132:	0552      	lsls	r2, r2, #21
 8003134:	4311      	orrs	r1, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800313a:	0852      	lsrs	r2, r2, #1
 800313c:	3a01      	subs	r2, #1
 800313e:	0652      	lsls	r2, r2, #25
 8003140:	4311      	orrs	r1, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003146:	06d2      	lsls	r2, r2, #27
 8003148:	430a      	orrs	r2, r1
 800314a:	4912      	ldr	r1, [pc, #72]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 800314c:	4313      	orrs	r3, r2
 800314e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003150:	4b10      	ldr	r3, [pc, #64]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0f      	ldr	r2, [pc, #60]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8003156:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800315a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800315c:	4b0d      	ldr	r3, [pc, #52]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a0c      	ldr	r2, [pc, #48]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8003162:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003166:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003168:	f7fe fb48 	bl	80017fc <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe fb44 	bl	80017fc <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e058      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003182:	4b04      	ldr	r3, [pc, #16]	@ (8003194 <HAL_RCC_OscConfig+0x784>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800318e:	e050      	b.n	8003232 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e04f      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
 8003194:	40021000 	.word	0x40021000
 8003198:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319c:	4b27      	ldr	r3, [pc, #156]	@ (800323c <HAL_RCC_OscConfig+0x82c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d144      	bne.n	8003232 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031a8:	4b24      	ldr	r3, [pc, #144]	@ (800323c <HAL_RCC_OscConfig+0x82c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a23      	ldr	r2, [pc, #140]	@ (800323c <HAL_RCC_OscConfig+0x82c>)
 80031ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031b4:	4b21      	ldr	r3, [pc, #132]	@ (800323c <HAL_RCC_OscConfig+0x82c>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4a20      	ldr	r2, [pc, #128]	@ (800323c <HAL_RCC_OscConfig+0x82c>)
 80031ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031c0:	f7fe fb1c 	bl	80017fc <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c8:	f7fe fb18 	bl	80017fc <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e02c      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031da:	4b18      	ldr	r3, [pc, #96]	@ (800323c <HAL_RCC_OscConfig+0x82c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x7b8>
 80031e6:	e024      	b.n	8003232 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d01f      	beq.n	800322e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ee:	4b13      	ldr	r3, [pc, #76]	@ (800323c <HAL_RCC_OscConfig+0x82c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a12      	ldr	r2, [pc, #72]	@ (800323c <HAL_RCC_OscConfig+0x82c>)
 80031f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fa:	f7fe faff 	bl	80017fc <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003202:	f7fe fafb 	bl	80017fc <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e00f      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003214:	4b09      	ldr	r3, [pc, #36]	@ (800323c <HAL_RCC_OscConfig+0x82c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f0      	bne.n	8003202 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003220:	4b06      	ldr	r3, [pc, #24]	@ (800323c <HAL_RCC_OscConfig+0x82c>)
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	4905      	ldr	r1, [pc, #20]	@ (800323c <HAL_RCC_OscConfig+0x82c>)
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <HAL_RCC_OscConfig+0x830>)
 8003228:	4013      	ands	r3, r2
 800322a:	60cb      	str	r3, [r1, #12]
 800322c:	e001      	b.n	8003232 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40021000 	.word	0x40021000
 8003240:	feeefffc 	.word	0xfeeefffc

08003244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0e7      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003258:	4b75      	ldr	r3, [pc, #468]	@ (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d910      	bls.n	8003288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b72      	ldr	r3, [pc, #456]	@ (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 0207 	bic.w	r2, r3, #7
 800326e:	4970      	ldr	r1, [pc, #448]	@ (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b6e      	ldr	r3, [pc, #440]	@ (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0cf      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d010      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	4b66      	ldr	r3, [pc, #408]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d908      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a4:	4b63      	ldr	r3, [pc, #396]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4960      	ldr	r1, [pc, #384]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d04c      	beq.n	800335c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ca:	4b5a      	ldr	r3, [pc, #360]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d121      	bne.n	800331a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0a6      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e2:	4b54      	ldr	r3, [pc, #336]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d115      	bne.n	800331a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e09a      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032fa:	4b4e      	ldr	r3, [pc, #312]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e08e      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800330a:	4b4a      	ldr	r3, [pc, #296]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e086      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800331a:	4b46      	ldr	r3, [pc, #280]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f023 0203 	bic.w	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4943      	ldr	r1, [pc, #268]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800332c:	f7fe fa66 	bl	80017fc <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	e00a      	b.n	800334a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003334:	f7fe fa62 	bl	80017fc <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e06e      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	4b3a      	ldr	r3, [pc, #232]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 020c 	and.w	r2, r3, #12
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	429a      	cmp	r2, r3
 800335a:	d1eb      	bne.n	8003334 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d010      	beq.n	800338a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	4b31      	ldr	r3, [pc, #196]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003374:	429a      	cmp	r2, r3
 8003376:	d208      	bcs.n	800338a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003378:	4b2e      	ldr	r3, [pc, #184]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	492b      	ldr	r1, [pc, #172]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800338a:	4b29      	ldr	r3, [pc, #164]	@ (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d210      	bcs.n	80033ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003398:	4b25      	ldr	r3, [pc, #148]	@ (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f023 0207 	bic.w	r2, r3, #7
 80033a0:	4923      	ldr	r1, [pc, #140]	@ (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a8:	4b21      	ldr	r3, [pc, #132]	@ (8003430 <HAL_RCC_ClockConfig+0x1ec>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e036      	b.n	8003428 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	4918      	ldr	r1, [pc, #96]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e4:	4b13      	ldr	r3, [pc, #76]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4910      	ldr	r1, [pc, #64]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033f8:	f000 f824 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <HAL_RCC_ClockConfig+0x1f0>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	091b      	lsrs	r3, r3, #4
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	490b      	ldr	r1, [pc, #44]	@ (8003438 <HAL_RCC_ClockConfig+0x1f4>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
 8003414:	4a09      	ldr	r2, [pc, #36]	@ (800343c <HAL_RCC_ClockConfig+0x1f8>)
 8003416:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003418:	4b09      	ldr	r3, [pc, #36]	@ (8003440 <HAL_RCC_ClockConfig+0x1fc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe f99d 	bl	800175c <HAL_InitTick>
 8003422:	4603      	mov	r3, r0
 8003424:	72fb      	strb	r3, [r7, #11]

  return status;
 8003426:	7afb      	ldrb	r3, [r7, #11]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40022000 	.word	0x40022000
 8003434:	40021000 	.word	0x40021000
 8003438:	08005bfc 	.word	0x08005bfc
 800343c:	2000000c 	.word	0x2000000c
 8003440:	20000010 	.word	0x20000010

08003444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003444:	b480      	push	{r7}
 8003446:	b089      	sub	sp, #36	@ 0x24
 8003448:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003452:	4b3e      	ldr	r3, [pc, #248]	@ (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800345c:	4b3b      	ldr	r3, [pc, #236]	@ (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x34>
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d121      	bne.n	80034b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d11e      	bne.n	80034b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003478:	4b34      	ldr	r3, [pc, #208]	@ (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003484:	4b31      	ldr	r3, [pc, #196]	@ (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 8003486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800348a:	0a1b      	lsrs	r3, r3, #8
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	e005      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003494:	4b2d      	ldr	r3, [pc, #180]	@ (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10d      	bne.n	80034cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034b4:	e00a      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d102      	bne.n	80034c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034bc:	4b25      	ldr	r3, [pc, #148]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x110>)
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	e004      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034c8:	4b23      	ldr	r3, [pc, #140]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x114>)
 80034ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	2b0c      	cmp	r3, #12
 80034d0:	d134      	bne.n	800353c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034d2:	4b1e      	ldr	r3, [pc, #120]	@ (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d003      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0xa6>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d003      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0xac>
 80034e8:	e005      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x110>)
 80034ec:	617b      	str	r3, [r7, #20]
      break;
 80034ee:	e005      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034f0:	4b19      	ldr	r3, [pc, #100]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x114>)
 80034f2:	617b      	str	r3, [r7, #20]
      break;
 80034f4:	e002      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	617b      	str	r3, [r7, #20]
      break;
 80034fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034fc:	4b13      	ldr	r3, [pc, #76]	@ (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	3301      	adds	r3, #1
 8003508:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800350a:	4b10      	ldr	r3, [pc, #64]	@ (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	0a1b      	lsrs	r3, r3, #8
 8003510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	fb03 f202 	mul.w	r2, r3, r2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003520:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003522:	4b0a      	ldr	r3, [pc, #40]	@ (800354c <HAL_RCC_GetSysClockFreq+0x108>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	0e5b      	lsrs	r3, r3, #25
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	3301      	adds	r3, #1
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	fbb2 f3f3 	udiv	r3, r2, r3
 800353a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800353c:	69bb      	ldr	r3, [r7, #24]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3724      	adds	r7, #36	@ 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	08005c14 	.word	0x08005c14
 8003554:	00f42400 	.word	0x00f42400
 8003558:	007a1200 	.word	0x007a1200

0800355c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003560:	4b03      	ldr	r3, [pc, #12]	@ (8003570 <HAL_RCC_GetHCLKFreq+0x14>)
 8003562:	681b      	ldr	r3, [r3, #0]
}
 8003564:	4618      	mov	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	2000000c 	.word	0x2000000c

08003574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003578:	f7ff fff0 	bl	800355c <HAL_RCC_GetHCLKFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	0a1b      	lsrs	r3, r3, #8
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4904      	ldr	r1, [pc, #16]	@ (800359c <HAL_RCC_GetPCLK1Freq+0x28>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40021000 	.word	0x40021000
 800359c:	08005c0c 	.word	0x08005c0c

080035a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035a4:	f7ff ffda 	bl	800355c <HAL_RCC_GetHCLKFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b06      	ldr	r3, [pc, #24]	@ (80035c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	0adb      	lsrs	r3, r3, #11
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4904      	ldr	r1, [pc, #16]	@ (80035c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	08005c0c 	.word	0x08005c0c

080035cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035d4:	2300      	movs	r3, #0
 80035d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035e4:	f7ff f9a0 	bl	8002928 <HAL_PWREx_GetVoltageRange>
 80035e8:	6178      	str	r0, [r7, #20]
 80035ea:	e014      	b.n	8003616 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035ec:	4b25      	ldr	r3, [pc, #148]	@ (8003684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f0:	4a24      	ldr	r2, [pc, #144]	@ (8003684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80035f8:	4b22      	ldr	r3, [pc, #136]	@ (8003684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003604:	f7ff f990 	bl	8002928 <HAL_PWREx_GetVoltageRange>
 8003608:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800360a:	4b1e      	ldr	r3, [pc, #120]	@ (8003684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360e:	4a1d      	ldr	r2, [pc, #116]	@ (8003684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003614:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800361c:	d10b      	bne.n	8003636 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b80      	cmp	r3, #128	@ 0x80
 8003622:	d919      	bls.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2ba0      	cmp	r3, #160	@ 0xa0
 8003628:	d902      	bls.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800362a:	2302      	movs	r3, #2
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	e013      	b.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003630:	2301      	movs	r3, #1
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	e010      	b.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b80      	cmp	r3, #128	@ 0x80
 800363a:	d902      	bls.n	8003642 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800363c:	2303      	movs	r3, #3
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	e00a      	b.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b80      	cmp	r3, #128	@ 0x80
 8003646:	d102      	bne.n	800364e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003648:	2302      	movs	r3, #2
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	e004      	b.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b70      	cmp	r3, #112	@ 0x70
 8003652:	d101      	bne.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003654:	2301      	movs	r3, #1
 8003656:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003658:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f023 0207 	bic.w	r2, r3, #7
 8003660:	4909      	ldr	r1, [pc, #36]	@ (8003688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003668:	4b07      	ldr	r3, [pc, #28]	@ (8003688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	429a      	cmp	r2, r3
 8003674:	d001      	beq.n	800367a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	40022000 	.word	0x40022000

0800368c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003694:	2300      	movs	r3, #0
 8003696:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003698:	2300      	movs	r3, #0
 800369a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d041      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036b0:	d02a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036b6:	d824      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036bc:	d008      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036c2:	d81e      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036cc:	d010      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036ce:	e018      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036d0:	4b86      	ldr	r3, [pc, #536]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a85      	ldr	r2, [pc, #532]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036dc:	e015      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 facd 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036ee:	e00c      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3320      	adds	r3, #32
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fbb6 	bl	8003e68 <RCCEx_PLLSAI2_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003700:	e003      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	74fb      	strb	r3, [r7, #19]
      break;
 8003706:	e000      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800370a:	7cfb      	ldrb	r3, [r7, #19]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003710:	4b76      	ldr	r3, [pc, #472]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003716:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800371e:	4973      	ldr	r1, [pc, #460]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003726:	e001      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	7cfb      	ldrb	r3, [r7, #19]
 800372a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d041      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800373c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003740:	d02a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003742:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003746:	d824      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003748:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800374c:	d008      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800374e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003752:	d81e      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800375c:	d010      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800375e:	e018      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003760:	4b62      	ldr	r3, [pc, #392]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4a61      	ldr	r2, [pc, #388]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800376a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800376c:	e015      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fa85 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800377e:	e00c      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3320      	adds	r3, #32
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fb6e 	bl	8003e68 <RCCEx_PLLSAI2_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003790:	e003      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	74fb      	strb	r3, [r7, #19]
      break;
 8003796:	e000      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800379a:	7cfb      	ldrb	r3, [r7, #19]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037a0:	4b52      	ldr	r3, [pc, #328]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ae:	494f      	ldr	r1, [pc, #316]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037b6:	e001      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80a0 	beq.w	800390a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ca:	2300      	movs	r3, #0
 80037cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037ce:	4b47      	ldr	r3, [pc, #284]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037de:	2300      	movs	r3, #0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00d      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e4:	4b41      	ldr	r3, [pc, #260]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e8:	4a40      	ldr	r2, [pc, #256]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80037f0:	4b3e      	ldr	r3, [pc, #248]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037fc:	2301      	movs	r3, #1
 80037fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003800:	4b3b      	ldr	r3, [pc, #236]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a3a      	ldr	r2, [pc, #232]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800380a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800380c:	f7fd fff6 	bl	80017fc <HAL_GetTick>
 8003810:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003812:	e009      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003814:	f7fd fff2 	bl	80017fc <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d902      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	74fb      	strb	r3, [r7, #19]
        break;
 8003826:	e005      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003828:	4b31      	ldr	r3, [pc, #196]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ef      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d15c      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800383a:	4b2c      	ldr	r3, [pc, #176]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003840:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003844:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01f      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	429a      	cmp	r2, r3
 8003856:	d019      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003858:	4b24      	ldr	r3, [pc, #144]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003862:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003864:	4b21      	ldr	r3, [pc, #132]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386a:	4a20      	ldr	r2, [pc, #128]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003874:	4b1d      	ldr	r3, [pc, #116]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387a:	4a1c      	ldr	r2, [pc, #112]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003884:	4a19      	ldr	r2, [pc, #100]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d016      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003896:	f7fd ffb1 	bl	80017fc <HAL_GetTick>
 800389a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800389c:	e00b      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fd ffad 	bl	80017fc <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d902      	bls.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	74fb      	strb	r3, [r7, #19]
            break;
 80038b4:	e006      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b6:	4b0d      	ldr	r3, [pc, #52]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ec      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ca:	4b08      	ldr	r3, [pc, #32]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038da:	4904      	ldr	r1, [pc, #16]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038e2:	e009      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038e4:	7cfb      	ldrb	r3, [r7, #19]
 80038e6:	74bb      	strb	r3, [r7, #18]
 80038e8:	e006      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038f8:	7c7b      	ldrb	r3, [r7, #17]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d105      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038fe:	4ba6      	ldr	r3, [pc, #664]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003902:	4aa5      	ldr	r2, [pc, #660]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003908:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003916:	4ba0      	ldr	r3, [pc, #640]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391c:	f023 0203 	bic.w	r2, r3, #3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003924:	499c      	ldr	r1, [pc, #624]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003938:	4b97      	ldr	r3, [pc, #604]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393e:	f023 020c 	bic.w	r2, r3, #12
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003946:	4994      	ldr	r1, [pc, #592]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800395a:	4b8f      	ldr	r3, [pc, #572]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003960:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	498b      	ldr	r1, [pc, #556]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800397c:	4b86      	ldr	r3, [pc, #536]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003982:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398a:	4983      	ldr	r1, [pc, #524]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800399e:	4b7e      	ldr	r3, [pc, #504]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ac:	497a      	ldr	r1, [pc, #488]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039c0:	4b75      	ldr	r3, [pc, #468]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ce:	4972      	ldr	r1, [pc, #456]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f0:	4969      	ldr	r1, [pc, #420]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a04:	4b64      	ldr	r3, [pc, #400]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a12:	4961      	ldr	r1, [pc, #388]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a26:	4b5c      	ldr	r3, [pc, #368]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a34:	4958      	ldr	r1, [pc, #352]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a48:	4b53      	ldr	r3, [pc, #332]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a56:	4950      	ldr	r1, [pc, #320]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a78:	4947      	ldr	r1, [pc, #284]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a8c:	4b42      	ldr	r3, [pc, #264]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a92:	f023 0203 	bic.w	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9a:	493f      	ldr	r1, [pc, #252]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d028      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aae:	4b3a      	ldr	r3, [pc, #232]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abc:	4936      	ldr	r1, [pc, #216]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003acc:	d106      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ace:	4b32      	ldr	r3, [pc, #200]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4a31      	ldr	r2, [pc, #196]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ad4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ad8:	60d3      	str	r3, [r2, #12]
 8003ada:	e011      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2101      	movs	r1, #1
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 f8c9 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003af6:	7cfb      	ldrb	r3, [r7, #19]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d028      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b0c:	4b22      	ldr	r3, [pc, #136]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1a:	491f      	ldr	r1, [pc, #124]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b2a:	d106      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4a19      	ldr	r2, [pc, #100]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b36:	60d3      	str	r3, [r2, #12]
 8003b38:	e011      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b42:	d10c      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	2101      	movs	r1, #1
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f89a 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003b5a:	7cfb      	ldrb	r3, [r7, #19]
 8003b5c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d02a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b70:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b78:	4907      	ldr	r1, [pc, #28]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b88:	d108      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b8a:	4b03      	ldr	r3, [pc, #12]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	4a02      	ldr	r2, [pc, #8]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b94:	60d3      	str	r3, [r2, #12]
 8003b96:	e013      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003b98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ba0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	2101      	movs	r1, #1
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 f869 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bb6:	7cfb      	ldrb	r3, [r7, #19]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003bbc:	7cfb      	ldrb	r3, [r7, #19]
 8003bbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d02f      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bda:	4929      	ldr	r1, [pc, #164]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bea:	d10d      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 f846 	bl	8003c84 <RCCEx_PLLSAI1_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bfc:	7cfb      	ldrb	r3, [r7, #19]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d014      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	74bb      	strb	r3, [r7, #18]
 8003c06:	e011      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3320      	adds	r3, #32
 8003c16:	2102      	movs	r1, #2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f925 	bl	8003e68 <RCCEx_PLLSAI2_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c38:	4b11      	ldr	r3, [pc, #68]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c48:	490d      	ldr	r1, [pc, #52]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c5c:	4b08      	ldr	r3, [pc, #32]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c62:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c6c:	4904      	ldr	r1, [pc, #16]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c74:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000

08003c84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c92:	4b74      	ldr	r3, [pc, #464]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d018      	beq.n	8003cd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c9e:	4b71      	ldr	r3, [pc, #452]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0203 	and.w	r2, r3, #3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d10d      	bne.n	8003cca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
       ||
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cb6:	4b6b      	ldr	r3, [pc, #428]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	091b      	lsrs	r3, r3, #4
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
       ||
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d047      	beq.n	8003d5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
 8003cce:	e044      	b.n	8003d5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d018      	beq.n	8003d0a <RCCEx_PLLSAI1_Config+0x86>
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d825      	bhi.n	8003d28 <RCCEx_PLLSAI1_Config+0xa4>
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d002      	beq.n	8003ce6 <RCCEx_PLLSAI1_Config+0x62>
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d009      	beq.n	8003cf8 <RCCEx_PLLSAI1_Config+0x74>
 8003ce4:	e020      	b.n	8003d28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ce6:	4b5f      	ldr	r3, [pc, #380]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d11d      	bne.n	8003d2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf6:	e01a      	b.n	8003d2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cf8:	4b5a      	ldr	r3, [pc, #360]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d116      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d08:	e013      	b.n	8003d32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d0a:	4b56      	ldr	r3, [pc, #344]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10f      	bne.n	8003d36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d16:	4b53      	ldr	r3, [pc, #332]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d26:	e006      	b.n	8003d36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d2c:	e004      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d2e:	bf00      	nop
 8003d30:	e002      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d32:	bf00      	nop
 8003d34:	e000      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d36:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10d      	bne.n	8003d5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d3e:	4b49      	ldr	r3, [pc, #292]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6819      	ldr	r1, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	430b      	orrs	r3, r1
 8003d54:	4943      	ldr	r1, [pc, #268]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d17c      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d60:	4b40      	ldr	r3, [pc, #256]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a3f      	ldr	r2, [pc, #252]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d6c:	f7fd fd46 	bl	80017fc <HAL_GetTick>
 8003d70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d72:	e009      	b.n	8003d88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d74:	f7fd fd42 	bl	80017fc <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d902      	bls.n	8003d88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	73fb      	strb	r3, [r7, #15]
        break;
 8003d86:	e005      	b.n	8003d94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d88:	4b36      	ldr	r3, [pc, #216]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1ef      	bne.n	8003d74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d15f      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d110      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003da0:	4b30      	ldr	r3, [pc, #192]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003da8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6892      	ldr	r2, [r2, #8]
 8003db0:	0211      	lsls	r1, r2, #8
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68d2      	ldr	r2, [r2, #12]
 8003db6:	06d2      	lsls	r2, r2, #27
 8003db8:	430a      	orrs	r2, r1
 8003dba:	492a      	ldr	r1, [pc, #168]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	610b      	str	r3, [r1, #16]
 8003dc0:	e027      	b.n	8003e12 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d112      	bne.n	8003dee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dc8:	4b26      	ldr	r3, [pc, #152]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003dd0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6892      	ldr	r2, [r2, #8]
 8003dd8:	0211      	lsls	r1, r2, #8
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6912      	ldr	r2, [r2, #16]
 8003dde:	0852      	lsrs	r2, r2, #1
 8003de0:	3a01      	subs	r2, #1
 8003de2:	0552      	lsls	r2, r2, #21
 8003de4:	430a      	orrs	r2, r1
 8003de6:	491f      	ldr	r1, [pc, #124]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	610b      	str	r3, [r1, #16]
 8003dec:	e011      	b.n	8003e12 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dee:	4b1d      	ldr	r3, [pc, #116]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003df6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6892      	ldr	r2, [r2, #8]
 8003dfe:	0211      	lsls	r1, r2, #8
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6952      	ldr	r2, [r2, #20]
 8003e04:	0852      	lsrs	r2, r2, #1
 8003e06:	3a01      	subs	r2, #1
 8003e08:	0652      	lsls	r2, r2, #25
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	4915      	ldr	r1, [pc, #84]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e12:	4b14      	ldr	r3, [pc, #80]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a13      	ldr	r2, [pc, #76]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1e:	f7fd fced 	bl	80017fc <HAL_GetTick>
 8003e22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e24:	e009      	b.n	8003e3a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e26:	f7fd fce9 	bl	80017fc <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d902      	bls.n	8003e3a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	73fb      	strb	r3, [r7, #15]
          break;
 8003e38:	e005      	b.n	8003e46 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0ef      	beq.n	8003e26 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d106      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e4c:	4b05      	ldr	r3, [pc, #20]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	4903      	ldr	r1, [pc, #12]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40021000 	.word	0x40021000

08003e68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e76:	4b69      	ldr	r3, [pc, #420]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d018      	beq.n	8003eb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e82:	4b66      	ldr	r3, [pc, #408]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f003 0203 	and.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d10d      	bne.n	8003eae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
       ||
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e9a:	4b60      	ldr	r3, [pc, #384]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
       ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d047      	beq.n	8003f3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
 8003eb2:	e044      	b.n	8003f3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d018      	beq.n	8003eee <RCCEx_PLLSAI2_Config+0x86>
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d825      	bhi.n	8003f0c <RCCEx_PLLSAI2_Config+0xa4>
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d002      	beq.n	8003eca <RCCEx_PLLSAI2_Config+0x62>
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d009      	beq.n	8003edc <RCCEx_PLLSAI2_Config+0x74>
 8003ec8:	e020      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eca:	4b54      	ldr	r3, [pc, #336]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d11d      	bne.n	8003f12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eda:	e01a      	b.n	8003f12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003edc:	4b4f      	ldr	r3, [pc, #316]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d116      	bne.n	8003f16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eec:	e013      	b.n	8003f16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003eee:	4b4b      	ldr	r3, [pc, #300]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10f      	bne.n	8003f1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003efa:	4b48      	ldr	r3, [pc, #288]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f0a:	e006      	b.n	8003f1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f10:	e004      	b.n	8003f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f12:	bf00      	nop
 8003f14:	e002      	b.n	8003f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f16:	bf00      	nop
 8003f18:	e000      	b.n	8003f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10d      	bne.n	8003f3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f22:	4b3e      	ldr	r3, [pc, #248]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6819      	ldr	r1, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	430b      	orrs	r3, r1
 8003f38:	4938      	ldr	r1, [pc, #224]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d166      	bne.n	8004012 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f44:	4b35      	ldr	r3, [pc, #212]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a34      	ldr	r2, [pc, #208]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f50:	f7fd fc54 	bl	80017fc <HAL_GetTick>
 8003f54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f56:	e009      	b.n	8003f6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f58:	f7fd fc50 	bl	80017fc <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d902      	bls.n	8003f6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	73fb      	strb	r3, [r7, #15]
        break;
 8003f6a:	e005      	b.n	8003f78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1ef      	bne.n	8003f58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d149      	bne.n	8004012 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d110      	bne.n	8003fa6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f84:	4b25      	ldr	r3, [pc, #148]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003f8c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6892      	ldr	r2, [r2, #8]
 8003f94:	0211      	lsls	r1, r2, #8
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68d2      	ldr	r2, [r2, #12]
 8003f9a:	06d2      	lsls	r2, r2, #27
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	491f      	ldr	r1, [pc, #124]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	614b      	str	r3, [r1, #20]
 8003fa4:	e011      	b.n	8003fca <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003fae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6892      	ldr	r2, [r2, #8]
 8003fb6:	0211      	lsls	r1, r2, #8
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6912      	ldr	r2, [r2, #16]
 8003fbc:	0852      	lsrs	r2, r2, #1
 8003fbe:	3a01      	subs	r2, #1
 8003fc0:	0652      	lsls	r2, r2, #25
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	4915      	ldr	r1, [pc, #84]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fca:	4b14      	ldr	r3, [pc, #80]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a13      	ldr	r2, [pc, #76]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd6:	f7fd fc11 	bl	80017fc <HAL_GetTick>
 8003fda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fdc:	e009      	b.n	8003ff2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fde:	f7fd fc0d 	bl	80017fc <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d902      	bls.n	8003ff2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	73fb      	strb	r3, [r7, #15]
          break;
 8003ff0:	e005      	b.n	8003ffe <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0ef      	beq.n	8003fde <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d106      	bne.n	8004012 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004004:	4b05      	ldr	r3, [pc, #20]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	4903      	ldr	r1, [pc, #12]	@ (800401c <RCCEx_PLLSAI2_Config+0x1b4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004012:	7bfb      	ldrb	r3, [r7, #15]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000

08004020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e040      	b.n	80040b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fd fa2a 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2224      	movs	r2, #36	@ 0x24
 800404c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fc32 	bl	80048d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f977 	bl	8004360 <UART_SetConfig>
 8004072:	4603      	mov	r3, r0
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e01b      	b.n	80040b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800408a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800409a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fcb1 	bl	8004a14 <UART_CheckIdleState>
 80040b2:	4603      	mov	r3, r0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08a      	sub	sp, #40	@ 0x28
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d177      	bne.n	80041c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <HAL_UART_Transmit+0x24>
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e070      	b.n	80041c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2221      	movs	r2, #33	@ 0x21
 80040f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040f2:	f7fd fb83 	bl	80017fc <HAL_GetTick>
 80040f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	88fa      	ldrh	r2, [r7, #6]
 80040fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	88fa      	ldrh	r2, [r7, #6]
 8004104:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004110:	d108      	bne.n	8004124 <HAL_UART_Transmit+0x68>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d104      	bne.n	8004124 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	e003      	b.n	800412c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004128:	2300      	movs	r3, #0
 800412a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800412c:	e02f      	b.n	800418e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2200      	movs	r2, #0
 8004136:	2180      	movs	r1, #128	@ 0x80
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 fd13 	bl	8004b64 <UART_WaitOnFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d004      	beq.n	800414e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e03b      	b.n	80041c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	881a      	ldrh	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004160:	b292      	uxth	r2, r2
 8004162:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	3302      	adds	r3, #2
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	e007      	b.n	800417c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	781a      	ldrb	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3301      	adds	r3, #1
 800417a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1c9      	bne.n	800412e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2200      	movs	r2, #0
 80041a2:	2140      	movs	r1, #64	@ 0x40
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fcdd 	bl	8004b64 <UART_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e005      	b.n	80041c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e000      	b.n	80041c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80041c4:	2302      	movs	r3, #2
  }
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b08a      	sub	sp, #40	@ 0x28
 80041d2:	af02      	add	r7, sp, #8
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	603b      	str	r3, [r7, #0]
 80041da:	4613      	mov	r3, r2
 80041dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	f040 80b6 	bne.w	8004356 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_UART_Receive+0x28>
 80041f0:	88fb      	ldrh	r3, [r7, #6]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e0ae      	b.n	8004358 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2222      	movs	r2, #34	@ 0x22
 8004206:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004210:	f7fd faf4 	bl	80017fc <HAL_GetTick>
 8004214:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	88fa      	ldrh	r2, [r7, #6]
 800421a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	88fa      	ldrh	r2, [r7, #6]
 8004222:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800422e:	d10e      	bne.n	800424e <HAL_UART_Receive+0x80>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d105      	bne.n	8004244 <HAL_UART_Receive+0x76>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800423e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004242:	e02d      	b.n	80042a0 <HAL_UART_Receive+0xd2>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	22ff      	movs	r2, #255	@ 0xff
 8004248:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800424c:	e028      	b.n	80042a0 <HAL_UART_Receive+0xd2>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10d      	bne.n	8004272 <HAL_UART_Receive+0xa4>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d104      	bne.n	8004268 <HAL_UART_Receive+0x9a>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	22ff      	movs	r2, #255	@ 0xff
 8004262:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004266:	e01b      	b.n	80042a0 <HAL_UART_Receive+0xd2>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	227f      	movs	r2, #127	@ 0x7f
 800426c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004270:	e016      	b.n	80042a0 <HAL_UART_Receive+0xd2>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800427a:	d10d      	bne.n	8004298 <HAL_UART_Receive+0xca>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d104      	bne.n	800428e <HAL_UART_Receive+0xc0>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	227f      	movs	r2, #127	@ 0x7f
 8004288:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800428c:	e008      	b.n	80042a0 <HAL_UART_Receive+0xd2>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	223f      	movs	r2, #63	@ 0x3f
 8004292:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004296:	e003      	b.n	80042a0 <HAL_UART_Receive+0xd2>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042a6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b0:	d108      	bne.n	80042c4 <HAL_UART_Receive+0xf6>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d104      	bne.n	80042c4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	e003      	b.n	80042cc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80042cc:	e037      	b.n	800433e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2200      	movs	r2, #0
 80042d6:	2120      	movs	r1, #32
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fc43 	bl	8004b64 <UART_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e033      	b.n	8004358 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10c      	bne.n	8004310 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	8a7b      	ldrh	r3, [r7, #18]
 8004300:	4013      	ands	r3, r2
 8004302:	b29a      	uxth	r2, r3
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	3302      	adds	r3, #2
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	e00d      	b.n	800432c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004316:	b29b      	uxth	r3, r3
 8004318:	b2da      	uxtb	r2, r3
 800431a:	8a7b      	ldrh	r3, [r7, #18]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	4013      	ands	r3, r2
 8004320:	b2da      	uxtb	r2, r3
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3301      	adds	r3, #1
 800432a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1c1      	bne.n	80042ce <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	e000      	b.n	8004358 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004356:	2302      	movs	r3, #2
  }
}
 8004358:	4618      	mov	r0, r3
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004364:	b08a      	sub	sp, #40	@ 0x28
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	431a      	orrs	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	431a      	orrs	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	4313      	orrs	r3, r2
 8004386:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4ba4      	ldr	r3, [pc, #656]	@ (8004620 <UART_SetConfig+0x2c0>)
 8004390:	4013      	ands	r3, r2
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004398:	430b      	orrs	r3, r1
 800439a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a99      	ldr	r2, [pc, #612]	@ (8004624 <UART_SetConfig+0x2c4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c8:	4313      	orrs	r3, r2
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043dc:	430a      	orrs	r2, r1
 80043de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a90      	ldr	r2, [pc, #576]	@ (8004628 <UART_SetConfig+0x2c8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d126      	bne.n	8004438 <UART_SetConfig+0xd8>
 80043ea:	4b90      	ldr	r3, [pc, #576]	@ (800462c <UART_SetConfig+0x2cc>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d81b      	bhi.n	8004430 <UART_SetConfig+0xd0>
 80043f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004400 <UART_SetConfig+0xa0>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	08004411 	.word	0x08004411
 8004404:	08004421 	.word	0x08004421
 8004408:	08004419 	.word	0x08004419
 800440c:	08004429 	.word	0x08004429
 8004410:	2301      	movs	r3, #1
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004416:	e116      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004418:	2302      	movs	r3, #2
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800441e:	e112      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004420:	2304      	movs	r3, #4
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004426:	e10e      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004428:	2308      	movs	r3, #8
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800442e:	e10a      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004430:	2310      	movs	r3, #16
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004436:	e106      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a7c      	ldr	r2, [pc, #496]	@ (8004630 <UART_SetConfig+0x2d0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d138      	bne.n	80044b4 <UART_SetConfig+0x154>
 8004442:	4b7a      	ldr	r3, [pc, #488]	@ (800462c <UART_SetConfig+0x2cc>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004448:	f003 030c 	and.w	r3, r3, #12
 800444c:	2b0c      	cmp	r3, #12
 800444e:	d82d      	bhi.n	80044ac <UART_SetConfig+0x14c>
 8004450:	a201      	add	r2, pc, #4	@ (adr r2, 8004458 <UART_SetConfig+0xf8>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	0800448d 	.word	0x0800448d
 800445c:	080044ad 	.word	0x080044ad
 8004460:	080044ad 	.word	0x080044ad
 8004464:	080044ad 	.word	0x080044ad
 8004468:	0800449d 	.word	0x0800449d
 800446c:	080044ad 	.word	0x080044ad
 8004470:	080044ad 	.word	0x080044ad
 8004474:	080044ad 	.word	0x080044ad
 8004478:	08004495 	.word	0x08004495
 800447c:	080044ad 	.word	0x080044ad
 8004480:	080044ad 	.word	0x080044ad
 8004484:	080044ad 	.word	0x080044ad
 8004488:	080044a5 	.word	0x080044a5
 800448c:	2300      	movs	r3, #0
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004492:	e0d8      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004494:	2302      	movs	r3, #2
 8004496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800449a:	e0d4      	b.n	8004646 <UART_SetConfig+0x2e6>
 800449c:	2304      	movs	r3, #4
 800449e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044a2:	e0d0      	b.n	8004646 <UART_SetConfig+0x2e6>
 80044a4:	2308      	movs	r3, #8
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044aa:	e0cc      	b.n	8004646 <UART_SetConfig+0x2e6>
 80044ac:	2310      	movs	r3, #16
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044b2:	e0c8      	b.n	8004646 <UART_SetConfig+0x2e6>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a5e      	ldr	r2, [pc, #376]	@ (8004634 <UART_SetConfig+0x2d4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d125      	bne.n	800450a <UART_SetConfig+0x1aa>
 80044be:	4b5b      	ldr	r3, [pc, #364]	@ (800462c <UART_SetConfig+0x2cc>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044c8:	2b30      	cmp	r3, #48	@ 0x30
 80044ca:	d016      	beq.n	80044fa <UART_SetConfig+0x19a>
 80044cc:	2b30      	cmp	r3, #48	@ 0x30
 80044ce:	d818      	bhi.n	8004502 <UART_SetConfig+0x1a2>
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d00a      	beq.n	80044ea <UART_SetConfig+0x18a>
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d814      	bhi.n	8004502 <UART_SetConfig+0x1a2>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <UART_SetConfig+0x182>
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d008      	beq.n	80044f2 <UART_SetConfig+0x192>
 80044e0:	e00f      	b.n	8004502 <UART_SetConfig+0x1a2>
 80044e2:	2300      	movs	r3, #0
 80044e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e8:	e0ad      	b.n	8004646 <UART_SetConfig+0x2e6>
 80044ea:	2302      	movs	r3, #2
 80044ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f0:	e0a9      	b.n	8004646 <UART_SetConfig+0x2e6>
 80044f2:	2304      	movs	r3, #4
 80044f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f8:	e0a5      	b.n	8004646 <UART_SetConfig+0x2e6>
 80044fa:	2308      	movs	r3, #8
 80044fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004500:	e0a1      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004502:	2310      	movs	r3, #16
 8004504:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004508:	e09d      	b.n	8004646 <UART_SetConfig+0x2e6>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a4a      	ldr	r2, [pc, #296]	@ (8004638 <UART_SetConfig+0x2d8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d125      	bne.n	8004560 <UART_SetConfig+0x200>
 8004514:	4b45      	ldr	r3, [pc, #276]	@ (800462c <UART_SetConfig+0x2cc>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800451e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004520:	d016      	beq.n	8004550 <UART_SetConfig+0x1f0>
 8004522:	2bc0      	cmp	r3, #192	@ 0xc0
 8004524:	d818      	bhi.n	8004558 <UART_SetConfig+0x1f8>
 8004526:	2b80      	cmp	r3, #128	@ 0x80
 8004528:	d00a      	beq.n	8004540 <UART_SetConfig+0x1e0>
 800452a:	2b80      	cmp	r3, #128	@ 0x80
 800452c:	d814      	bhi.n	8004558 <UART_SetConfig+0x1f8>
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <UART_SetConfig+0x1d8>
 8004532:	2b40      	cmp	r3, #64	@ 0x40
 8004534:	d008      	beq.n	8004548 <UART_SetConfig+0x1e8>
 8004536:	e00f      	b.n	8004558 <UART_SetConfig+0x1f8>
 8004538:	2300      	movs	r3, #0
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800453e:	e082      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004540:	2302      	movs	r3, #2
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004546:	e07e      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004548:	2304      	movs	r3, #4
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454e:	e07a      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004550:	2308      	movs	r3, #8
 8004552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004556:	e076      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004558:	2310      	movs	r3, #16
 800455a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800455e:	e072      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a35      	ldr	r2, [pc, #212]	@ (800463c <UART_SetConfig+0x2dc>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d12a      	bne.n	80045c0 <UART_SetConfig+0x260>
 800456a:	4b30      	ldr	r3, [pc, #192]	@ (800462c <UART_SetConfig+0x2cc>)
 800456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004570:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004574:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004578:	d01a      	beq.n	80045b0 <UART_SetConfig+0x250>
 800457a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800457e:	d81b      	bhi.n	80045b8 <UART_SetConfig+0x258>
 8004580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004584:	d00c      	beq.n	80045a0 <UART_SetConfig+0x240>
 8004586:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800458a:	d815      	bhi.n	80045b8 <UART_SetConfig+0x258>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <UART_SetConfig+0x238>
 8004590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004594:	d008      	beq.n	80045a8 <UART_SetConfig+0x248>
 8004596:	e00f      	b.n	80045b8 <UART_SetConfig+0x258>
 8004598:	2300      	movs	r3, #0
 800459a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800459e:	e052      	b.n	8004646 <UART_SetConfig+0x2e6>
 80045a0:	2302      	movs	r3, #2
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a6:	e04e      	b.n	8004646 <UART_SetConfig+0x2e6>
 80045a8:	2304      	movs	r3, #4
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ae:	e04a      	b.n	8004646 <UART_SetConfig+0x2e6>
 80045b0:	2308      	movs	r3, #8
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b6:	e046      	b.n	8004646 <UART_SetConfig+0x2e6>
 80045b8:	2310      	movs	r3, #16
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045be:	e042      	b.n	8004646 <UART_SetConfig+0x2e6>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a17      	ldr	r2, [pc, #92]	@ (8004624 <UART_SetConfig+0x2c4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d13a      	bne.n	8004640 <UART_SetConfig+0x2e0>
 80045ca:	4b18      	ldr	r3, [pc, #96]	@ (800462c <UART_SetConfig+0x2cc>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045d8:	d01a      	beq.n	8004610 <UART_SetConfig+0x2b0>
 80045da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045de:	d81b      	bhi.n	8004618 <UART_SetConfig+0x2b8>
 80045e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045e4:	d00c      	beq.n	8004600 <UART_SetConfig+0x2a0>
 80045e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ea:	d815      	bhi.n	8004618 <UART_SetConfig+0x2b8>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <UART_SetConfig+0x298>
 80045f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045f4:	d008      	beq.n	8004608 <UART_SetConfig+0x2a8>
 80045f6:	e00f      	b.n	8004618 <UART_SetConfig+0x2b8>
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fe:	e022      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004600:	2302      	movs	r3, #2
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004606:	e01e      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004608:	2304      	movs	r3, #4
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460e:	e01a      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004610:	2308      	movs	r3, #8
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004616:	e016      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004618:	2310      	movs	r3, #16
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461e:	e012      	b.n	8004646 <UART_SetConfig+0x2e6>
 8004620:	efff69f3 	.word	0xefff69f3
 8004624:	40008000 	.word	0x40008000
 8004628:	40013800 	.word	0x40013800
 800462c:	40021000 	.word	0x40021000
 8004630:	40004400 	.word	0x40004400
 8004634:	40004800 	.word	0x40004800
 8004638:	40004c00 	.word	0x40004c00
 800463c:	40005000 	.word	0x40005000
 8004640:	2310      	movs	r3, #16
 8004642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a9f      	ldr	r2, [pc, #636]	@ (80048c8 <UART_SetConfig+0x568>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d17a      	bne.n	8004746 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004650:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004654:	2b08      	cmp	r3, #8
 8004656:	d824      	bhi.n	80046a2 <UART_SetConfig+0x342>
 8004658:	a201      	add	r2, pc, #4	@ (adr r2, 8004660 <UART_SetConfig+0x300>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	08004685 	.word	0x08004685
 8004664:	080046a3 	.word	0x080046a3
 8004668:	0800468d 	.word	0x0800468d
 800466c:	080046a3 	.word	0x080046a3
 8004670:	08004693 	.word	0x08004693
 8004674:	080046a3 	.word	0x080046a3
 8004678:	080046a3 	.word	0x080046a3
 800467c:	080046a3 	.word	0x080046a3
 8004680:	0800469b 	.word	0x0800469b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004684:	f7fe ff76 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 8004688:	61f8      	str	r0, [r7, #28]
        break;
 800468a:	e010      	b.n	80046ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800468c:	4b8f      	ldr	r3, [pc, #572]	@ (80048cc <UART_SetConfig+0x56c>)
 800468e:	61fb      	str	r3, [r7, #28]
        break;
 8004690:	e00d      	b.n	80046ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004692:	f7fe fed7 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 8004696:	61f8      	str	r0, [r7, #28]
        break;
 8004698:	e009      	b.n	80046ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800469a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800469e:	61fb      	str	r3, [r7, #28]
        break;
 80046a0:	e005      	b.n	80046ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80fb 	beq.w	80048ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d305      	bcc.n	80046d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d903      	bls.n	80046da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046d8:	e0e8      	b.n	80048ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	2200      	movs	r2, #0
 80046de:	461c      	mov	r4, r3
 80046e0:	4615      	mov	r5, r2
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	022b      	lsls	r3, r5, #8
 80046ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80046f0:	0222      	lsls	r2, r4, #8
 80046f2:	68f9      	ldr	r1, [r7, #12]
 80046f4:	6849      	ldr	r1, [r1, #4]
 80046f6:	0849      	lsrs	r1, r1, #1
 80046f8:	2000      	movs	r0, #0
 80046fa:	4688      	mov	r8, r1
 80046fc:	4681      	mov	r9, r0
 80046fe:	eb12 0a08 	adds.w	sl, r2, r8
 8004702:	eb43 0b09 	adc.w	fp, r3, r9
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004714:	4650      	mov	r0, sl
 8004716:	4659      	mov	r1, fp
 8004718:	f7fb fdc2 	bl	80002a0 <__aeabi_uldivmod>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4613      	mov	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800472a:	d308      	bcc.n	800473e <UART_SetConfig+0x3de>
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004732:	d204      	bcs.n	800473e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	60da      	str	r2, [r3, #12]
 800473c:	e0b6      	b.n	80048ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004744:	e0b2      	b.n	80048ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800474e:	d15e      	bne.n	800480e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004750:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004754:	2b08      	cmp	r3, #8
 8004756:	d828      	bhi.n	80047aa <UART_SetConfig+0x44a>
 8004758:	a201      	add	r2, pc, #4	@ (adr r2, 8004760 <UART_SetConfig+0x400>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	08004785 	.word	0x08004785
 8004764:	0800478d 	.word	0x0800478d
 8004768:	08004795 	.word	0x08004795
 800476c:	080047ab 	.word	0x080047ab
 8004770:	0800479b 	.word	0x0800479b
 8004774:	080047ab 	.word	0x080047ab
 8004778:	080047ab 	.word	0x080047ab
 800477c:	080047ab 	.word	0x080047ab
 8004780:	080047a3 	.word	0x080047a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004784:	f7fe fef6 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 8004788:	61f8      	str	r0, [r7, #28]
        break;
 800478a:	e014      	b.n	80047b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800478c:	f7fe ff08 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8004790:	61f8      	str	r0, [r7, #28]
        break;
 8004792:	e010      	b.n	80047b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004794:	4b4d      	ldr	r3, [pc, #308]	@ (80048cc <UART_SetConfig+0x56c>)
 8004796:	61fb      	str	r3, [r7, #28]
        break;
 8004798:	e00d      	b.n	80047b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800479a:	f7fe fe53 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 800479e:	61f8      	str	r0, [r7, #28]
        break;
 80047a0:	e009      	b.n	80047b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047a6:	61fb      	str	r3, [r7, #28]
        break;
 80047a8:	e005      	b.n	80047b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d077      	beq.n	80048ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	005a      	lsls	r2, r3, #1
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	441a      	add	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b0f      	cmp	r3, #15
 80047d6:	d916      	bls.n	8004806 <UART_SetConfig+0x4a6>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047de:	d212      	bcs.n	8004806 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f023 030f 	bic.w	r3, r3, #15
 80047e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	8afb      	ldrh	r3, [r7, #22]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	8afa      	ldrh	r2, [r7, #22]
 8004802:	60da      	str	r2, [r3, #12]
 8004804:	e052      	b.n	80048ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800480c:	e04e      	b.n	80048ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800480e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004812:	2b08      	cmp	r3, #8
 8004814:	d827      	bhi.n	8004866 <UART_SetConfig+0x506>
 8004816:	a201      	add	r2, pc, #4	@ (adr r2, 800481c <UART_SetConfig+0x4bc>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	08004841 	.word	0x08004841
 8004820:	08004849 	.word	0x08004849
 8004824:	08004851 	.word	0x08004851
 8004828:	08004867 	.word	0x08004867
 800482c:	08004857 	.word	0x08004857
 8004830:	08004867 	.word	0x08004867
 8004834:	08004867 	.word	0x08004867
 8004838:	08004867 	.word	0x08004867
 800483c:	0800485f 	.word	0x0800485f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004840:	f7fe fe98 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 8004844:	61f8      	str	r0, [r7, #28]
        break;
 8004846:	e014      	b.n	8004872 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004848:	f7fe feaa 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 800484c:	61f8      	str	r0, [r7, #28]
        break;
 800484e:	e010      	b.n	8004872 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004850:	4b1e      	ldr	r3, [pc, #120]	@ (80048cc <UART_SetConfig+0x56c>)
 8004852:	61fb      	str	r3, [r7, #28]
        break;
 8004854:	e00d      	b.n	8004872 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004856:	f7fe fdf5 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 800485a:	61f8      	str	r0, [r7, #28]
        break;
 800485c:	e009      	b.n	8004872 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004862:	61fb      	str	r3, [r7, #28]
        break;
 8004864:	e005      	b.n	8004872 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004870:	bf00      	nop
    }

    if (pclk != 0U)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d019      	beq.n	80048ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	085a      	lsrs	r2, r3, #1
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	441a      	add	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	fbb2 f3f3 	udiv	r3, r2, r3
 800488a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	2b0f      	cmp	r3, #15
 8004890:	d909      	bls.n	80048a6 <UART_SetConfig+0x546>
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004898:	d205      	bcs.n	80048a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60da      	str	r2, [r3, #12]
 80048a4:	e002      	b.n	80048ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80048b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3728      	adds	r7, #40	@ 0x28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048c6:	bf00      	nop
 80048c8:	40008000 	.word	0x40008000
 80048cc:	00f42400 	.word	0x00f42400

080048d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01a      	beq.n	80049e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049ce:	d10a      	bne.n	80049e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	605a      	str	r2, [r3, #4]
  }
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b098      	sub	sp, #96	@ 0x60
 8004a18:	af02      	add	r7, sp, #8
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a24:	f7fc feea 	bl	80017fc <HAL_GetTick>
 8004a28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d12e      	bne.n	8004a96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a40:	2200      	movs	r2, #0
 8004a42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f88c 	bl	8004b64 <UART_WaitOnFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d021      	beq.n	8004a96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a66:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a78:	e841 2300 	strex	r3, r2, [r1]
 8004a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e6      	bne.n	8004a52 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2220      	movs	r2, #32
 8004a88:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e062      	b.n	8004b5c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d149      	bne.n	8004b38 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aac:	2200      	movs	r2, #0
 8004aae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f856 	bl	8004b64 <UART_WaitOnFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d03c      	beq.n	8004b38 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	623b      	str	r3, [r7, #32]
   return(result);
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004adc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ade:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e6      	bne.n	8004abe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3308      	adds	r3, #8
 8004af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b10:	61fa      	str	r2, [r7, #28]
 8004b12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	69b9      	ldr	r1, [r7, #24]
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e5      	bne.n	8004af0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e011      	b.n	8004b5c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3758      	adds	r7, #88	@ 0x58
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b74:	e04f      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d04b      	beq.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7e:	f7fc fe3d 	bl	80017fc <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d302      	bcc.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e04e      	b.n	8004c36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d037      	beq.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b80      	cmp	r3, #128	@ 0x80
 8004baa:	d034      	beq.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b40      	cmp	r3, #64	@ 0x40
 8004bb0:	d031      	beq.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d110      	bne.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 f838 	bl	8004c3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e029      	b.n	8004c36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bf0:	d111      	bne.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f81e 	bl	8004c3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e00f      	b.n	8004c36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	bf0c      	ite	eq
 8004c26:	2301      	moveq	r3, #1
 8004c28:	2300      	movne	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d0a0      	beq.n	8004b76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b095      	sub	sp, #84	@ 0x54
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c64:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e6      	bne.n	8004c46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3308      	adds	r3, #8
 8004c96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e5      	bne.n	8004c78 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d118      	bne.n	8004ce6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f023 0310 	bic.w	r3, r3, #16
 8004cc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cd2:	61bb      	str	r3, [r7, #24]
 8004cd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	6979      	ldr	r1, [r7, #20]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1e6      	bne.n	8004cb4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004cfa:	bf00      	nop
 8004cfc:	3754      	adds	r7, #84	@ 0x54
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <_vsiprintf_r>:
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	b09a      	sub	sp, #104	@ 0x68
 8004d0c:	2400      	movs	r4, #0
 8004d0e:	9100      	str	r1, [sp, #0]
 8004d10:	9104      	str	r1, [sp, #16]
 8004d12:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d16:	9105      	str	r1, [sp, #20]
 8004d18:	9102      	str	r1, [sp, #8]
 8004d1a:	4905      	ldr	r1, [pc, #20]	@ (8004d30 <_vsiprintf_r+0x28>)
 8004d1c:	9103      	str	r1, [sp, #12]
 8004d1e:	4669      	mov	r1, sp
 8004d20:	9419      	str	r4, [sp, #100]	@ 0x64
 8004d22:	f000 f999 	bl	8005058 <_svfiprintf_r>
 8004d26:	9b00      	ldr	r3, [sp, #0]
 8004d28:	701c      	strb	r4, [r3, #0]
 8004d2a:	b01a      	add	sp, #104	@ 0x68
 8004d2c:	bd10      	pop	{r4, pc}
 8004d2e:	bf00      	nop
 8004d30:	ffff0208 	.word	0xffff0208

08004d34 <vsiprintf>:
 8004d34:	4613      	mov	r3, r2
 8004d36:	460a      	mov	r2, r1
 8004d38:	4601      	mov	r1, r0
 8004d3a:	4802      	ldr	r0, [pc, #8]	@ (8004d44 <vsiprintf+0x10>)
 8004d3c:	6800      	ldr	r0, [r0, #0]
 8004d3e:	f7ff bfe3 	b.w	8004d08 <_vsiprintf_r>
 8004d42:	bf00      	nop
 8004d44:	20000038 	.word	0x20000038

08004d48 <memset>:
 8004d48:	4402      	add	r2, r0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d100      	bne.n	8004d52 <memset+0xa>
 8004d50:	4770      	bx	lr
 8004d52:	f803 1b01 	strb.w	r1, [r3], #1
 8004d56:	e7f9      	b.n	8004d4c <memset+0x4>

08004d58 <__errno>:
 8004d58:	4b01      	ldr	r3, [pc, #4]	@ (8004d60 <__errno+0x8>)
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000038 	.word	0x20000038

08004d64 <__libc_init_array>:
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	4d0d      	ldr	r5, [pc, #52]	@ (8004d9c <__libc_init_array+0x38>)
 8004d68:	4c0d      	ldr	r4, [pc, #52]	@ (8004da0 <__libc_init_array+0x3c>)
 8004d6a:	1b64      	subs	r4, r4, r5
 8004d6c:	10a4      	asrs	r4, r4, #2
 8004d6e:	2600      	movs	r6, #0
 8004d70:	42a6      	cmp	r6, r4
 8004d72:	d109      	bne.n	8004d88 <__libc_init_array+0x24>
 8004d74:	4d0b      	ldr	r5, [pc, #44]	@ (8004da4 <__libc_init_array+0x40>)
 8004d76:	4c0c      	ldr	r4, [pc, #48]	@ (8004da8 <__libc_init_array+0x44>)
 8004d78:	f000 fc64 	bl	8005644 <_init>
 8004d7c:	1b64      	subs	r4, r4, r5
 8004d7e:	10a4      	asrs	r4, r4, #2
 8004d80:	2600      	movs	r6, #0
 8004d82:	42a6      	cmp	r6, r4
 8004d84:	d105      	bne.n	8004d92 <__libc_init_array+0x2e>
 8004d86:	bd70      	pop	{r4, r5, r6, pc}
 8004d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8c:	4798      	blx	r3
 8004d8e:	3601      	adds	r6, #1
 8004d90:	e7ee      	b.n	8004d70 <__libc_init_array+0xc>
 8004d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d96:	4798      	blx	r3
 8004d98:	3601      	adds	r6, #1
 8004d9a:	e7f2      	b.n	8004d82 <__libc_init_array+0x1e>
 8004d9c:	08005c80 	.word	0x08005c80
 8004da0:	08005c80 	.word	0x08005c80
 8004da4:	08005c80 	.word	0x08005c80
 8004da8:	08005c84 	.word	0x08005c84

08004dac <__retarget_lock_acquire_recursive>:
 8004dac:	4770      	bx	lr

08004dae <__retarget_lock_release_recursive>:
 8004dae:	4770      	bx	lr

08004db0 <_free_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4605      	mov	r5, r0
 8004db4:	2900      	cmp	r1, #0
 8004db6:	d041      	beq.n	8004e3c <_free_r+0x8c>
 8004db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dbc:	1f0c      	subs	r4, r1, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bfb8      	it	lt
 8004dc2:	18e4      	addlt	r4, r4, r3
 8004dc4:	f000 f8e0 	bl	8004f88 <__malloc_lock>
 8004dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e40 <_free_r+0x90>)
 8004dca:	6813      	ldr	r3, [r2, #0]
 8004dcc:	b933      	cbnz	r3, 8004ddc <_free_r+0x2c>
 8004dce:	6063      	str	r3, [r4, #4]
 8004dd0:	6014      	str	r4, [r2, #0]
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dd8:	f000 b8dc 	b.w	8004f94 <__malloc_unlock>
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	d908      	bls.n	8004df2 <_free_r+0x42>
 8004de0:	6820      	ldr	r0, [r4, #0]
 8004de2:	1821      	adds	r1, r4, r0
 8004de4:	428b      	cmp	r3, r1
 8004de6:	bf01      	itttt	eq
 8004de8:	6819      	ldreq	r1, [r3, #0]
 8004dea:	685b      	ldreq	r3, [r3, #4]
 8004dec:	1809      	addeq	r1, r1, r0
 8004dee:	6021      	streq	r1, [r4, #0]
 8004df0:	e7ed      	b.n	8004dce <_free_r+0x1e>
 8004df2:	461a      	mov	r2, r3
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	b10b      	cbz	r3, 8004dfc <_free_r+0x4c>
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	d9fa      	bls.n	8004df2 <_free_r+0x42>
 8004dfc:	6811      	ldr	r1, [r2, #0]
 8004dfe:	1850      	adds	r0, r2, r1
 8004e00:	42a0      	cmp	r0, r4
 8004e02:	d10b      	bne.n	8004e1c <_free_r+0x6c>
 8004e04:	6820      	ldr	r0, [r4, #0]
 8004e06:	4401      	add	r1, r0
 8004e08:	1850      	adds	r0, r2, r1
 8004e0a:	4283      	cmp	r3, r0
 8004e0c:	6011      	str	r1, [r2, #0]
 8004e0e:	d1e0      	bne.n	8004dd2 <_free_r+0x22>
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	6053      	str	r3, [r2, #4]
 8004e16:	4408      	add	r0, r1
 8004e18:	6010      	str	r0, [r2, #0]
 8004e1a:	e7da      	b.n	8004dd2 <_free_r+0x22>
 8004e1c:	d902      	bls.n	8004e24 <_free_r+0x74>
 8004e1e:	230c      	movs	r3, #12
 8004e20:	602b      	str	r3, [r5, #0]
 8004e22:	e7d6      	b.n	8004dd2 <_free_r+0x22>
 8004e24:	6820      	ldr	r0, [r4, #0]
 8004e26:	1821      	adds	r1, r4, r0
 8004e28:	428b      	cmp	r3, r1
 8004e2a:	bf04      	itt	eq
 8004e2c:	6819      	ldreq	r1, [r3, #0]
 8004e2e:	685b      	ldreq	r3, [r3, #4]
 8004e30:	6063      	str	r3, [r4, #4]
 8004e32:	bf04      	itt	eq
 8004e34:	1809      	addeq	r1, r1, r0
 8004e36:	6021      	streq	r1, [r4, #0]
 8004e38:	6054      	str	r4, [r2, #4]
 8004e3a:	e7ca      	b.n	8004dd2 <_free_r+0x22>
 8004e3c:	bd38      	pop	{r3, r4, r5, pc}
 8004e3e:	bf00      	nop
 8004e40:	200003f0 	.word	0x200003f0

08004e44 <sbrk_aligned>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	4e0f      	ldr	r6, [pc, #60]	@ (8004e84 <sbrk_aligned+0x40>)
 8004e48:	460c      	mov	r4, r1
 8004e4a:	6831      	ldr	r1, [r6, #0]
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	b911      	cbnz	r1, 8004e56 <sbrk_aligned+0x12>
 8004e50:	f000 fba4 	bl	800559c <_sbrk_r>
 8004e54:	6030      	str	r0, [r6, #0]
 8004e56:	4621      	mov	r1, r4
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f000 fb9f 	bl	800559c <_sbrk_r>
 8004e5e:	1c43      	adds	r3, r0, #1
 8004e60:	d103      	bne.n	8004e6a <sbrk_aligned+0x26>
 8004e62:	f04f 34ff 	mov.w	r4, #4294967295
 8004e66:	4620      	mov	r0, r4
 8004e68:	bd70      	pop	{r4, r5, r6, pc}
 8004e6a:	1cc4      	adds	r4, r0, #3
 8004e6c:	f024 0403 	bic.w	r4, r4, #3
 8004e70:	42a0      	cmp	r0, r4
 8004e72:	d0f8      	beq.n	8004e66 <sbrk_aligned+0x22>
 8004e74:	1a21      	subs	r1, r4, r0
 8004e76:	4628      	mov	r0, r5
 8004e78:	f000 fb90 	bl	800559c <_sbrk_r>
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d1f2      	bne.n	8004e66 <sbrk_aligned+0x22>
 8004e80:	e7ef      	b.n	8004e62 <sbrk_aligned+0x1e>
 8004e82:	bf00      	nop
 8004e84:	200003ec 	.word	0x200003ec

08004e88 <_malloc_r>:
 8004e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e8c:	1ccd      	adds	r5, r1, #3
 8004e8e:	f025 0503 	bic.w	r5, r5, #3
 8004e92:	3508      	adds	r5, #8
 8004e94:	2d0c      	cmp	r5, #12
 8004e96:	bf38      	it	cc
 8004e98:	250c      	movcc	r5, #12
 8004e9a:	2d00      	cmp	r5, #0
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	db01      	blt.n	8004ea4 <_malloc_r+0x1c>
 8004ea0:	42a9      	cmp	r1, r5
 8004ea2:	d904      	bls.n	8004eae <_malloc_r+0x26>
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	6033      	str	r3, [r6, #0]
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f84 <_malloc_r+0xfc>
 8004eb2:	f000 f869 	bl	8004f88 <__malloc_lock>
 8004eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8004eba:	461c      	mov	r4, r3
 8004ebc:	bb44      	cbnz	r4, 8004f10 <_malloc_r+0x88>
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	f7ff ffbf 	bl	8004e44 <sbrk_aligned>
 8004ec6:	1c43      	adds	r3, r0, #1
 8004ec8:	4604      	mov	r4, r0
 8004eca:	d158      	bne.n	8004f7e <_malloc_r+0xf6>
 8004ecc:	f8d8 4000 	ldr.w	r4, [r8]
 8004ed0:	4627      	mov	r7, r4
 8004ed2:	2f00      	cmp	r7, #0
 8004ed4:	d143      	bne.n	8004f5e <_malloc_r+0xd6>
 8004ed6:	2c00      	cmp	r4, #0
 8004ed8:	d04b      	beq.n	8004f72 <_malloc_r+0xea>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	4639      	mov	r1, r7
 8004ede:	4630      	mov	r0, r6
 8004ee0:	eb04 0903 	add.w	r9, r4, r3
 8004ee4:	f000 fb5a 	bl	800559c <_sbrk_r>
 8004ee8:	4581      	cmp	r9, r0
 8004eea:	d142      	bne.n	8004f72 <_malloc_r+0xea>
 8004eec:	6821      	ldr	r1, [r4, #0]
 8004eee:	1a6d      	subs	r5, r5, r1
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f7ff ffa6 	bl	8004e44 <sbrk_aligned>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d03a      	beq.n	8004f72 <_malloc_r+0xea>
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	442b      	add	r3, r5
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	f8d8 3000 	ldr.w	r3, [r8]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	bb62      	cbnz	r2, 8004f64 <_malloc_r+0xdc>
 8004f0a:	f8c8 7000 	str.w	r7, [r8]
 8004f0e:	e00f      	b.n	8004f30 <_malloc_r+0xa8>
 8004f10:	6822      	ldr	r2, [r4, #0]
 8004f12:	1b52      	subs	r2, r2, r5
 8004f14:	d420      	bmi.n	8004f58 <_malloc_r+0xd0>
 8004f16:	2a0b      	cmp	r2, #11
 8004f18:	d917      	bls.n	8004f4a <_malloc_r+0xc2>
 8004f1a:	1961      	adds	r1, r4, r5
 8004f1c:	42a3      	cmp	r3, r4
 8004f1e:	6025      	str	r5, [r4, #0]
 8004f20:	bf18      	it	ne
 8004f22:	6059      	strne	r1, [r3, #4]
 8004f24:	6863      	ldr	r3, [r4, #4]
 8004f26:	bf08      	it	eq
 8004f28:	f8c8 1000 	streq.w	r1, [r8]
 8004f2c:	5162      	str	r2, [r4, r5]
 8004f2e:	604b      	str	r3, [r1, #4]
 8004f30:	4630      	mov	r0, r6
 8004f32:	f000 f82f 	bl	8004f94 <__malloc_unlock>
 8004f36:	f104 000b 	add.w	r0, r4, #11
 8004f3a:	1d23      	adds	r3, r4, #4
 8004f3c:	f020 0007 	bic.w	r0, r0, #7
 8004f40:	1ac2      	subs	r2, r0, r3
 8004f42:	bf1c      	itt	ne
 8004f44:	1a1b      	subne	r3, r3, r0
 8004f46:	50a3      	strne	r3, [r4, r2]
 8004f48:	e7af      	b.n	8004eaa <_malloc_r+0x22>
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	bf0c      	ite	eq
 8004f50:	f8c8 2000 	streq.w	r2, [r8]
 8004f54:	605a      	strne	r2, [r3, #4]
 8004f56:	e7eb      	b.n	8004f30 <_malloc_r+0xa8>
 8004f58:	4623      	mov	r3, r4
 8004f5a:	6864      	ldr	r4, [r4, #4]
 8004f5c:	e7ae      	b.n	8004ebc <_malloc_r+0x34>
 8004f5e:	463c      	mov	r4, r7
 8004f60:	687f      	ldr	r7, [r7, #4]
 8004f62:	e7b6      	b.n	8004ed2 <_malloc_r+0x4a>
 8004f64:	461a      	mov	r2, r3
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	42a3      	cmp	r3, r4
 8004f6a:	d1fb      	bne.n	8004f64 <_malloc_r+0xdc>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6053      	str	r3, [r2, #4]
 8004f70:	e7de      	b.n	8004f30 <_malloc_r+0xa8>
 8004f72:	230c      	movs	r3, #12
 8004f74:	6033      	str	r3, [r6, #0]
 8004f76:	4630      	mov	r0, r6
 8004f78:	f000 f80c 	bl	8004f94 <__malloc_unlock>
 8004f7c:	e794      	b.n	8004ea8 <_malloc_r+0x20>
 8004f7e:	6005      	str	r5, [r0, #0]
 8004f80:	e7d6      	b.n	8004f30 <_malloc_r+0xa8>
 8004f82:	bf00      	nop
 8004f84:	200003f0 	.word	0x200003f0

08004f88 <__malloc_lock>:
 8004f88:	4801      	ldr	r0, [pc, #4]	@ (8004f90 <__malloc_lock+0x8>)
 8004f8a:	f7ff bf0f 	b.w	8004dac <__retarget_lock_acquire_recursive>
 8004f8e:	bf00      	nop
 8004f90:	200003e8 	.word	0x200003e8

08004f94 <__malloc_unlock>:
 8004f94:	4801      	ldr	r0, [pc, #4]	@ (8004f9c <__malloc_unlock+0x8>)
 8004f96:	f7ff bf0a 	b.w	8004dae <__retarget_lock_release_recursive>
 8004f9a:	bf00      	nop
 8004f9c:	200003e8 	.word	0x200003e8

08004fa0 <__ssputs_r>:
 8004fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa4:	688e      	ldr	r6, [r1, #8]
 8004fa6:	461f      	mov	r7, r3
 8004fa8:	42be      	cmp	r6, r7
 8004faa:	680b      	ldr	r3, [r1, #0]
 8004fac:	4682      	mov	sl, r0
 8004fae:	460c      	mov	r4, r1
 8004fb0:	4690      	mov	r8, r2
 8004fb2:	d82d      	bhi.n	8005010 <__ssputs_r+0x70>
 8004fb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004fbc:	d026      	beq.n	800500c <__ssputs_r+0x6c>
 8004fbe:	6965      	ldr	r5, [r4, #20]
 8004fc0:	6909      	ldr	r1, [r1, #16]
 8004fc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fc6:	eba3 0901 	sub.w	r9, r3, r1
 8004fca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fce:	1c7b      	adds	r3, r7, #1
 8004fd0:	444b      	add	r3, r9
 8004fd2:	106d      	asrs	r5, r5, #1
 8004fd4:	429d      	cmp	r5, r3
 8004fd6:	bf38      	it	cc
 8004fd8:	461d      	movcc	r5, r3
 8004fda:	0553      	lsls	r3, r2, #21
 8004fdc:	d527      	bpl.n	800502e <__ssputs_r+0x8e>
 8004fde:	4629      	mov	r1, r5
 8004fe0:	f7ff ff52 	bl	8004e88 <_malloc_r>
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	b360      	cbz	r0, 8005042 <__ssputs_r+0xa2>
 8004fe8:	6921      	ldr	r1, [r4, #16]
 8004fea:	464a      	mov	r2, r9
 8004fec:	f000 fae6 	bl	80055bc <memcpy>
 8004ff0:	89a3      	ldrh	r3, [r4, #12]
 8004ff2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ffa:	81a3      	strh	r3, [r4, #12]
 8004ffc:	6126      	str	r6, [r4, #16]
 8004ffe:	6165      	str	r5, [r4, #20]
 8005000:	444e      	add	r6, r9
 8005002:	eba5 0509 	sub.w	r5, r5, r9
 8005006:	6026      	str	r6, [r4, #0]
 8005008:	60a5      	str	r5, [r4, #8]
 800500a:	463e      	mov	r6, r7
 800500c:	42be      	cmp	r6, r7
 800500e:	d900      	bls.n	8005012 <__ssputs_r+0x72>
 8005010:	463e      	mov	r6, r7
 8005012:	6820      	ldr	r0, [r4, #0]
 8005014:	4632      	mov	r2, r6
 8005016:	4641      	mov	r1, r8
 8005018:	f000 faa6 	bl	8005568 <memmove>
 800501c:	68a3      	ldr	r3, [r4, #8]
 800501e:	1b9b      	subs	r3, r3, r6
 8005020:	60a3      	str	r3, [r4, #8]
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	4433      	add	r3, r6
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	2000      	movs	r0, #0
 800502a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502e:	462a      	mov	r2, r5
 8005030:	f000 fad2 	bl	80055d8 <_realloc_r>
 8005034:	4606      	mov	r6, r0
 8005036:	2800      	cmp	r0, #0
 8005038:	d1e0      	bne.n	8004ffc <__ssputs_r+0x5c>
 800503a:	6921      	ldr	r1, [r4, #16]
 800503c:	4650      	mov	r0, sl
 800503e:	f7ff feb7 	bl	8004db0 <_free_r>
 8005042:	230c      	movs	r3, #12
 8005044:	f8ca 3000 	str.w	r3, [sl]
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800504e:	81a3      	strh	r3, [r4, #12]
 8005050:	f04f 30ff 	mov.w	r0, #4294967295
 8005054:	e7e9      	b.n	800502a <__ssputs_r+0x8a>
	...

08005058 <_svfiprintf_r>:
 8005058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505c:	4698      	mov	r8, r3
 800505e:	898b      	ldrh	r3, [r1, #12]
 8005060:	061b      	lsls	r3, r3, #24
 8005062:	b09d      	sub	sp, #116	@ 0x74
 8005064:	4607      	mov	r7, r0
 8005066:	460d      	mov	r5, r1
 8005068:	4614      	mov	r4, r2
 800506a:	d510      	bpl.n	800508e <_svfiprintf_r+0x36>
 800506c:	690b      	ldr	r3, [r1, #16]
 800506e:	b973      	cbnz	r3, 800508e <_svfiprintf_r+0x36>
 8005070:	2140      	movs	r1, #64	@ 0x40
 8005072:	f7ff ff09 	bl	8004e88 <_malloc_r>
 8005076:	6028      	str	r0, [r5, #0]
 8005078:	6128      	str	r0, [r5, #16]
 800507a:	b930      	cbnz	r0, 800508a <_svfiprintf_r+0x32>
 800507c:	230c      	movs	r3, #12
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	f04f 30ff 	mov.w	r0, #4294967295
 8005084:	b01d      	add	sp, #116	@ 0x74
 8005086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508a:	2340      	movs	r3, #64	@ 0x40
 800508c:	616b      	str	r3, [r5, #20]
 800508e:	2300      	movs	r3, #0
 8005090:	9309      	str	r3, [sp, #36]	@ 0x24
 8005092:	2320      	movs	r3, #32
 8005094:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005098:	f8cd 800c 	str.w	r8, [sp, #12]
 800509c:	2330      	movs	r3, #48	@ 0x30
 800509e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800523c <_svfiprintf_r+0x1e4>
 80050a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050a6:	f04f 0901 	mov.w	r9, #1
 80050aa:	4623      	mov	r3, r4
 80050ac:	469a      	mov	sl, r3
 80050ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050b2:	b10a      	cbz	r2, 80050b8 <_svfiprintf_r+0x60>
 80050b4:	2a25      	cmp	r2, #37	@ 0x25
 80050b6:	d1f9      	bne.n	80050ac <_svfiprintf_r+0x54>
 80050b8:	ebba 0b04 	subs.w	fp, sl, r4
 80050bc:	d00b      	beq.n	80050d6 <_svfiprintf_r+0x7e>
 80050be:	465b      	mov	r3, fp
 80050c0:	4622      	mov	r2, r4
 80050c2:	4629      	mov	r1, r5
 80050c4:	4638      	mov	r0, r7
 80050c6:	f7ff ff6b 	bl	8004fa0 <__ssputs_r>
 80050ca:	3001      	adds	r0, #1
 80050cc:	f000 80a7 	beq.w	800521e <_svfiprintf_r+0x1c6>
 80050d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050d2:	445a      	add	r2, fp
 80050d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80050d6:	f89a 3000 	ldrb.w	r3, [sl]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 809f 	beq.w	800521e <_svfiprintf_r+0x1c6>
 80050e0:	2300      	movs	r3, #0
 80050e2:	f04f 32ff 	mov.w	r2, #4294967295
 80050e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050ea:	f10a 0a01 	add.w	sl, sl, #1
 80050ee:	9304      	str	r3, [sp, #16]
 80050f0:	9307      	str	r3, [sp, #28]
 80050f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80050f8:	4654      	mov	r4, sl
 80050fa:	2205      	movs	r2, #5
 80050fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005100:	484e      	ldr	r0, [pc, #312]	@ (800523c <_svfiprintf_r+0x1e4>)
 8005102:	f7fb f87d 	bl	8000200 <memchr>
 8005106:	9a04      	ldr	r2, [sp, #16]
 8005108:	b9d8      	cbnz	r0, 8005142 <_svfiprintf_r+0xea>
 800510a:	06d0      	lsls	r0, r2, #27
 800510c:	bf44      	itt	mi
 800510e:	2320      	movmi	r3, #32
 8005110:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005114:	0711      	lsls	r1, r2, #28
 8005116:	bf44      	itt	mi
 8005118:	232b      	movmi	r3, #43	@ 0x2b
 800511a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800511e:	f89a 3000 	ldrb.w	r3, [sl]
 8005122:	2b2a      	cmp	r3, #42	@ 0x2a
 8005124:	d015      	beq.n	8005152 <_svfiprintf_r+0xfa>
 8005126:	9a07      	ldr	r2, [sp, #28]
 8005128:	4654      	mov	r4, sl
 800512a:	2000      	movs	r0, #0
 800512c:	f04f 0c0a 	mov.w	ip, #10
 8005130:	4621      	mov	r1, r4
 8005132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005136:	3b30      	subs	r3, #48	@ 0x30
 8005138:	2b09      	cmp	r3, #9
 800513a:	d94b      	bls.n	80051d4 <_svfiprintf_r+0x17c>
 800513c:	b1b0      	cbz	r0, 800516c <_svfiprintf_r+0x114>
 800513e:	9207      	str	r2, [sp, #28]
 8005140:	e014      	b.n	800516c <_svfiprintf_r+0x114>
 8005142:	eba0 0308 	sub.w	r3, r0, r8
 8005146:	fa09 f303 	lsl.w	r3, r9, r3
 800514a:	4313      	orrs	r3, r2
 800514c:	9304      	str	r3, [sp, #16]
 800514e:	46a2      	mov	sl, r4
 8005150:	e7d2      	b.n	80050f8 <_svfiprintf_r+0xa0>
 8005152:	9b03      	ldr	r3, [sp, #12]
 8005154:	1d19      	adds	r1, r3, #4
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	9103      	str	r1, [sp, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	bfbb      	ittet	lt
 800515e:	425b      	neglt	r3, r3
 8005160:	f042 0202 	orrlt.w	r2, r2, #2
 8005164:	9307      	strge	r3, [sp, #28]
 8005166:	9307      	strlt	r3, [sp, #28]
 8005168:	bfb8      	it	lt
 800516a:	9204      	strlt	r2, [sp, #16]
 800516c:	7823      	ldrb	r3, [r4, #0]
 800516e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005170:	d10a      	bne.n	8005188 <_svfiprintf_r+0x130>
 8005172:	7863      	ldrb	r3, [r4, #1]
 8005174:	2b2a      	cmp	r3, #42	@ 0x2a
 8005176:	d132      	bne.n	80051de <_svfiprintf_r+0x186>
 8005178:	9b03      	ldr	r3, [sp, #12]
 800517a:	1d1a      	adds	r2, r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	9203      	str	r2, [sp, #12]
 8005180:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005184:	3402      	adds	r4, #2
 8005186:	9305      	str	r3, [sp, #20]
 8005188:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800524c <_svfiprintf_r+0x1f4>
 800518c:	7821      	ldrb	r1, [r4, #0]
 800518e:	2203      	movs	r2, #3
 8005190:	4650      	mov	r0, sl
 8005192:	f7fb f835 	bl	8000200 <memchr>
 8005196:	b138      	cbz	r0, 80051a8 <_svfiprintf_r+0x150>
 8005198:	9b04      	ldr	r3, [sp, #16]
 800519a:	eba0 000a 	sub.w	r0, r0, sl
 800519e:	2240      	movs	r2, #64	@ 0x40
 80051a0:	4082      	lsls	r2, r0
 80051a2:	4313      	orrs	r3, r2
 80051a4:	3401      	adds	r4, #1
 80051a6:	9304      	str	r3, [sp, #16]
 80051a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ac:	4824      	ldr	r0, [pc, #144]	@ (8005240 <_svfiprintf_r+0x1e8>)
 80051ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051b2:	2206      	movs	r2, #6
 80051b4:	f7fb f824 	bl	8000200 <memchr>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d036      	beq.n	800522a <_svfiprintf_r+0x1d2>
 80051bc:	4b21      	ldr	r3, [pc, #132]	@ (8005244 <_svfiprintf_r+0x1ec>)
 80051be:	bb1b      	cbnz	r3, 8005208 <_svfiprintf_r+0x1b0>
 80051c0:	9b03      	ldr	r3, [sp, #12]
 80051c2:	3307      	adds	r3, #7
 80051c4:	f023 0307 	bic.w	r3, r3, #7
 80051c8:	3308      	adds	r3, #8
 80051ca:	9303      	str	r3, [sp, #12]
 80051cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051ce:	4433      	add	r3, r6
 80051d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80051d2:	e76a      	b.n	80050aa <_svfiprintf_r+0x52>
 80051d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80051d8:	460c      	mov	r4, r1
 80051da:	2001      	movs	r0, #1
 80051dc:	e7a8      	b.n	8005130 <_svfiprintf_r+0xd8>
 80051de:	2300      	movs	r3, #0
 80051e0:	3401      	adds	r4, #1
 80051e2:	9305      	str	r3, [sp, #20]
 80051e4:	4619      	mov	r1, r3
 80051e6:	f04f 0c0a 	mov.w	ip, #10
 80051ea:	4620      	mov	r0, r4
 80051ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051f0:	3a30      	subs	r2, #48	@ 0x30
 80051f2:	2a09      	cmp	r2, #9
 80051f4:	d903      	bls.n	80051fe <_svfiprintf_r+0x1a6>
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0c6      	beq.n	8005188 <_svfiprintf_r+0x130>
 80051fa:	9105      	str	r1, [sp, #20]
 80051fc:	e7c4      	b.n	8005188 <_svfiprintf_r+0x130>
 80051fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005202:	4604      	mov	r4, r0
 8005204:	2301      	movs	r3, #1
 8005206:	e7f0      	b.n	80051ea <_svfiprintf_r+0x192>
 8005208:	ab03      	add	r3, sp, #12
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	462a      	mov	r2, r5
 800520e:	4b0e      	ldr	r3, [pc, #56]	@ (8005248 <_svfiprintf_r+0x1f0>)
 8005210:	a904      	add	r1, sp, #16
 8005212:	4638      	mov	r0, r7
 8005214:	f3af 8000 	nop.w
 8005218:	1c42      	adds	r2, r0, #1
 800521a:	4606      	mov	r6, r0
 800521c:	d1d6      	bne.n	80051cc <_svfiprintf_r+0x174>
 800521e:	89ab      	ldrh	r3, [r5, #12]
 8005220:	065b      	lsls	r3, r3, #25
 8005222:	f53f af2d 	bmi.w	8005080 <_svfiprintf_r+0x28>
 8005226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005228:	e72c      	b.n	8005084 <_svfiprintf_r+0x2c>
 800522a:	ab03      	add	r3, sp, #12
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	462a      	mov	r2, r5
 8005230:	4b05      	ldr	r3, [pc, #20]	@ (8005248 <_svfiprintf_r+0x1f0>)
 8005232:	a904      	add	r1, sp, #16
 8005234:	4638      	mov	r0, r7
 8005236:	f000 f879 	bl	800532c <_printf_i>
 800523a:	e7ed      	b.n	8005218 <_svfiprintf_r+0x1c0>
 800523c:	08005c44 	.word	0x08005c44
 8005240:	08005c4e 	.word	0x08005c4e
 8005244:	00000000 	.word	0x00000000
 8005248:	08004fa1 	.word	0x08004fa1
 800524c:	08005c4a 	.word	0x08005c4a

08005250 <_printf_common>:
 8005250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005254:	4616      	mov	r6, r2
 8005256:	4698      	mov	r8, r3
 8005258:	688a      	ldr	r2, [r1, #8]
 800525a:	690b      	ldr	r3, [r1, #16]
 800525c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005260:	4293      	cmp	r3, r2
 8005262:	bfb8      	it	lt
 8005264:	4613      	movlt	r3, r2
 8005266:	6033      	str	r3, [r6, #0]
 8005268:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800526c:	4607      	mov	r7, r0
 800526e:	460c      	mov	r4, r1
 8005270:	b10a      	cbz	r2, 8005276 <_printf_common+0x26>
 8005272:	3301      	adds	r3, #1
 8005274:	6033      	str	r3, [r6, #0]
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	0699      	lsls	r1, r3, #26
 800527a:	bf42      	ittt	mi
 800527c:	6833      	ldrmi	r3, [r6, #0]
 800527e:	3302      	addmi	r3, #2
 8005280:	6033      	strmi	r3, [r6, #0]
 8005282:	6825      	ldr	r5, [r4, #0]
 8005284:	f015 0506 	ands.w	r5, r5, #6
 8005288:	d106      	bne.n	8005298 <_printf_common+0x48>
 800528a:	f104 0a19 	add.w	sl, r4, #25
 800528e:	68e3      	ldr	r3, [r4, #12]
 8005290:	6832      	ldr	r2, [r6, #0]
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	42ab      	cmp	r3, r5
 8005296:	dc26      	bgt.n	80052e6 <_printf_common+0x96>
 8005298:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800529c:	6822      	ldr	r2, [r4, #0]
 800529e:	3b00      	subs	r3, #0
 80052a0:	bf18      	it	ne
 80052a2:	2301      	movne	r3, #1
 80052a4:	0692      	lsls	r2, r2, #26
 80052a6:	d42b      	bmi.n	8005300 <_printf_common+0xb0>
 80052a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052ac:	4641      	mov	r1, r8
 80052ae:	4638      	mov	r0, r7
 80052b0:	47c8      	blx	r9
 80052b2:	3001      	adds	r0, #1
 80052b4:	d01e      	beq.n	80052f4 <_printf_common+0xa4>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	6922      	ldr	r2, [r4, #16]
 80052ba:	f003 0306 	and.w	r3, r3, #6
 80052be:	2b04      	cmp	r3, #4
 80052c0:	bf02      	ittt	eq
 80052c2:	68e5      	ldreq	r5, [r4, #12]
 80052c4:	6833      	ldreq	r3, [r6, #0]
 80052c6:	1aed      	subeq	r5, r5, r3
 80052c8:	68a3      	ldr	r3, [r4, #8]
 80052ca:	bf0c      	ite	eq
 80052cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052d0:	2500      	movne	r5, #0
 80052d2:	4293      	cmp	r3, r2
 80052d4:	bfc4      	itt	gt
 80052d6:	1a9b      	subgt	r3, r3, r2
 80052d8:	18ed      	addgt	r5, r5, r3
 80052da:	2600      	movs	r6, #0
 80052dc:	341a      	adds	r4, #26
 80052de:	42b5      	cmp	r5, r6
 80052e0:	d11a      	bne.n	8005318 <_printf_common+0xc8>
 80052e2:	2000      	movs	r0, #0
 80052e4:	e008      	b.n	80052f8 <_printf_common+0xa8>
 80052e6:	2301      	movs	r3, #1
 80052e8:	4652      	mov	r2, sl
 80052ea:	4641      	mov	r1, r8
 80052ec:	4638      	mov	r0, r7
 80052ee:	47c8      	blx	r9
 80052f0:	3001      	adds	r0, #1
 80052f2:	d103      	bne.n	80052fc <_printf_common+0xac>
 80052f4:	f04f 30ff 	mov.w	r0, #4294967295
 80052f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052fc:	3501      	adds	r5, #1
 80052fe:	e7c6      	b.n	800528e <_printf_common+0x3e>
 8005300:	18e1      	adds	r1, r4, r3
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	2030      	movs	r0, #48	@ 0x30
 8005306:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800530a:	4422      	add	r2, r4
 800530c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005310:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005314:	3302      	adds	r3, #2
 8005316:	e7c7      	b.n	80052a8 <_printf_common+0x58>
 8005318:	2301      	movs	r3, #1
 800531a:	4622      	mov	r2, r4
 800531c:	4641      	mov	r1, r8
 800531e:	4638      	mov	r0, r7
 8005320:	47c8      	blx	r9
 8005322:	3001      	adds	r0, #1
 8005324:	d0e6      	beq.n	80052f4 <_printf_common+0xa4>
 8005326:	3601      	adds	r6, #1
 8005328:	e7d9      	b.n	80052de <_printf_common+0x8e>
	...

0800532c <_printf_i>:
 800532c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005330:	7e0f      	ldrb	r7, [r1, #24]
 8005332:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005334:	2f78      	cmp	r7, #120	@ 0x78
 8005336:	4691      	mov	r9, r2
 8005338:	4680      	mov	r8, r0
 800533a:	460c      	mov	r4, r1
 800533c:	469a      	mov	sl, r3
 800533e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005342:	d807      	bhi.n	8005354 <_printf_i+0x28>
 8005344:	2f62      	cmp	r7, #98	@ 0x62
 8005346:	d80a      	bhi.n	800535e <_printf_i+0x32>
 8005348:	2f00      	cmp	r7, #0
 800534a:	f000 80d1 	beq.w	80054f0 <_printf_i+0x1c4>
 800534e:	2f58      	cmp	r7, #88	@ 0x58
 8005350:	f000 80b8 	beq.w	80054c4 <_printf_i+0x198>
 8005354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005358:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800535c:	e03a      	b.n	80053d4 <_printf_i+0xa8>
 800535e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005362:	2b15      	cmp	r3, #21
 8005364:	d8f6      	bhi.n	8005354 <_printf_i+0x28>
 8005366:	a101      	add	r1, pc, #4	@ (adr r1, 800536c <_printf_i+0x40>)
 8005368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800536c:	080053c5 	.word	0x080053c5
 8005370:	080053d9 	.word	0x080053d9
 8005374:	08005355 	.word	0x08005355
 8005378:	08005355 	.word	0x08005355
 800537c:	08005355 	.word	0x08005355
 8005380:	08005355 	.word	0x08005355
 8005384:	080053d9 	.word	0x080053d9
 8005388:	08005355 	.word	0x08005355
 800538c:	08005355 	.word	0x08005355
 8005390:	08005355 	.word	0x08005355
 8005394:	08005355 	.word	0x08005355
 8005398:	080054d7 	.word	0x080054d7
 800539c:	08005403 	.word	0x08005403
 80053a0:	08005491 	.word	0x08005491
 80053a4:	08005355 	.word	0x08005355
 80053a8:	08005355 	.word	0x08005355
 80053ac:	080054f9 	.word	0x080054f9
 80053b0:	08005355 	.word	0x08005355
 80053b4:	08005403 	.word	0x08005403
 80053b8:	08005355 	.word	0x08005355
 80053bc:	08005355 	.word	0x08005355
 80053c0:	08005499 	.word	0x08005499
 80053c4:	6833      	ldr	r3, [r6, #0]
 80053c6:	1d1a      	adds	r2, r3, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6032      	str	r2, [r6, #0]
 80053cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053d4:	2301      	movs	r3, #1
 80053d6:	e09c      	b.n	8005512 <_printf_i+0x1e6>
 80053d8:	6833      	ldr	r3, [r6, #0]
 80053da:	6820      	ldr	r0, [r4, #0]
 80053dc:	1d19      	adds	r1, r3, #4
 80053de:	6031      	str	r1, [r6, #0]
 80053e0:	0606      	lsls	r6, r0, #24
 80053e2:	d501      	bpl.n	80053e8 <_printf_i+0xbc>
 80053e4:	681d      	ldr	r5, [r3, #0]
 80053e6:	e003      	b.n	80053f0 <_printf_i+0xc4>
 80053e8:	0645      	lsls	r5, r0, #25
 80053ea:	d5fb      	bpl.n	80053e4 <_printf_i+0xb8>
 80053ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053f0:	2d00      	cmp	r5, #0
 80053f2:	da03      	bge.n	80053fc <_printf_i+0xd0>
 80053f4:	232d      	movs	r3, #45	@ 0x2d
 80053f6:	426d      	negs	r5, r5
 80053f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053fc:	4858      	ldr	r0, [pc, #352]	@ (8005560 <_printf_i+0x234>)
 80053fe:	230a      	movs	r3, #10
 8005400:	e011      	b.n	8005426 <_printf_i+0xfa>
 8005402:	6821      	ldr	r1, [r4, #0]
 8005404:	6833      	ldr	r3, [r6, #0]
 8005406:	0608      	lsls	r0, r1, #24
 8005408:	f853 5b04 	ldr.w	r5, [r3], #4
 800540c:	d402      	bmi.n	8005414 <_printf_i+0xe8>
 800540e:	0649      	lsls	r1, r1, #25
 8005410:	bf48      	it	mi
 8005412:	b2ad      	uxthmi	r5, r5
 8005414:	2f6f      	cmp	r7, #111	@ 0x6f
 8005416:	4852      	ldr	r0, [pc, #328]	@ (8005560 <_printf_i+0x234>)
 8005418:	6033      	str	r3, [r6, #0]
 800541a:	bf14      	ite	ne
 800541c:	230a      	movne	r3, #10
 800541e:	2308      	moveq	r3, #8
 8005420:	2100      	movs	r1, #0
 8005422:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005426:	6866      	ldr	r6, [r4, #4]
 8005428:	60a6      	str	r6, [r4, #8]
 800542a:	2e00      	cmp	r6, #0
 800542c:	db05      	blt.n	800543a <_printf_i+0x10e>
 800542e:	6821      	ldr	r1, [r4, #0]
 8005430:	432e      	orrs	r6, r5
 8005432:	f021 0104 	bic.w	r1, r1, #4
 8005436:	6021      	str	r1, [r4, #0]
 8005438:	d04b      	beq.n	80054d2 <_printf_i+0x1a6>
 800543a:	4616      	mov	r6, r2
 800543c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005440:	fb03 5711 	mls	r7, r3, r1, r5
 8005444:	5dc7      	ldrb	r7, [r0, r7]
 8005446:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800544a:	462f      	mov	r7, r5
 800544c:	42bb      	cmp	r3, r7
 800544e:	460d      	mov	r5, r1
 8005450:	d9f4      	bls.n	800543c <_printf_i+0x110>
 8005452:	2b08      	cmp	r3, #8
 8005454:	d10b      	bne.n	800546e <_printf_i+0x142>
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	07df      	lsls	r7, r3, #31
 800545a:	d508      	bpl.n	800546e <_printf_i+0x142>
 800545c:	6923      	ldr	r3, [r4, #16]
 800545e:	6861      	ldr	r1, [r4, #4]
 8005460:	4299      	cmp	r1, r3
 8005462:	bfde      	ittt	le
 8005464:	2330      	movle	r3, #48	@ 0x30
 8005466:	f806 3c01 	strble.w	r3, [r6, #-1]
 800546a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800546e:	1b92      	subs	r2, r2, r6
 8005470:	6122      	str	r2, [r4, #16]
 8005472:	f8cd a000 	str.w	sl, [sp]
 8005476:	464b      	mov	r3, r9
 8005478:	aa03      	add	r2, sp, #12
 800547a:	4621      	mov	r1, r4
 800547c:	4640      	mov	r0, r8
 800547e:	f7ff fee7 	bl	8005250 <_printf_common>
 8005482:	3001      	adds	r0, #1
 8005484:	d14a      	bne.n	800551c <_printf_i+0x1f0>
 8005486:	f04f 30ff 	mov.w	r0, #4294967295
 800548a:	b004      	add	sp, #16
 800548c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	f043 0320 	orr.w	r3, r3, #32
 8005496:	6023      	str	r3, [r4, #0]
 8005498:	4832      	ldr	r0, [pc, #200]	@ (8005564 <_printf_i+0x238>)
 800549a:	2778      	movs	r7, #120	@ 0x78
 800549c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	6831      	ldr	r1, [r6, #0]
 80054a4:	061f      	lsls	r7, r3, #24
 80054a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80054aa:	d402      	bmi.n	80054b2 <_printf_i+0x186>
 80054ac:	065f      	lsls	r7, r3, #25
 80054ae:	bf48      	it	mi
 80054b0:	b2ad      	uxthmi	r5, r5
 80054b2:	6031      	str	r1, [r6, #0]
 80054b4:	07d9      	lsls	r1, r3, #31
 80054b6:	bf44      	itt	mi
 80054b8:	f043 0320 	orrmi.w	r3, r3, #32
 80054bc:	6023      	strmi	r3, [r4, #0]
 80054be:	b11d      	cbz	r5, 80054c8 <_printf_i+0x19c>
 80054c0:	2310      	movs	r3, #16
 80054c2:	e7ad      	b.n	8005420 <_printf_i+0xf4>
 80054c4:	4826      	ldr	r0, [pc, #152]	@ (8005560 <_printf_i+0x234>)
 80054c6:	e7e9      	b.n	800549c <_printf_i+0x170>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	f023 0320 	bic.w	r3, r3, #32
 80054ce:	6023      	str	r3, [r4, #0]
 80054d0:	e7f6      	b.n	80054c0 <_printf_i+0x194>
 80054d2:	4616      	mov	r6, r2
 80054d4:	e7bd      	b.n	8005452 <_printf_i+0x126>
 80054d6:	6833      	ldr	r3, [r6, #0]
 80054d8:	6825      	ldr	r5, [r4, #0]
 80054da:	6961      	ldr	r1, [r4, #20]
 80054dc:	1d18      	adds	r0, r3, #4
 80054de:	6030      	str	r0, [r6, #0]
 80054e0:	062e      	lsls	r6, r5, #24
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	d501      	bpl.n	80054ea <_printf_i+0x1be>
 80054e6:	6019      	str	r1, [r3, #0]
 80054e8:	e002      	b.n	80054f0 <_printf_i+0x1c4>
 80054ea:	0668      	lsls	r0, r5, #25
 80054ec:	d5fb      	bpl.n	80054e6 <_printf_i+0x1ba>
 80054ee:	8019      	strh	r1, [r3, #0]
 80054f0:	2300      	movs	r3, #0
 80054f2:	6123      	str	r3, [r4, #16]
 80054f4:	4616      	mov	r6, r2
 80054f6:	e7bc      	b.n	8005472 <_printf_i+0x146>
 80054f8:	6833      	ldr	r3, [r6, #0]
 80054fa:	1d1a      	adds	r2, r3, #4
 80054fc:	6032      	str	r2, [r6, #0]
 80054fe:	681e      	ldr	r6, [r3, #0]
 8005500:	6862      	ldr	r2, [r4, #4]
 8005502:	2100      	movs	r1, #0
 8005504:	4630      	mov	r0, r6
 8005506:	f7fa fe7b 	bl	8000200 <memchr>
 800550a:	b108      	cbz	r0, 8005510 <_printf_i+0x1e4>
 800550c:	1b80      	subs	r0, r0, r6
 800550e:	6060      	str	r0, [r4, #4]
 8005510:	6863      	ldr	r3, [r4, #4]
 8005512:	6123      	str	r3, [r4, #16]
 8005514:	2300      	movs	r3, #0
 8005516:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800551a:	e7aa      	b.n	8005472 <_printf_i+0x146>
 800551c:	6923      	ldr	r3, [r4, #16]
 800551e:	4632      	mov	r2, r6
 8005520:	4649      	mov	r1, r9
 8005522:	4640      	mov	r0, r8
 8005524:	47d0      	blx	sl
 8005526:	3001      	adds	r0, #1
 8005528:	d0ad      	beq.n	8005486 <_printf_i+0x15a>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	079b      	lsls	r3, r3, #30
 800552e:	d413      	bmi.n	8005558 <_printf_i+0x22c>
 8005530:	68e0      	ldr	r0, [r4, #12]
 8005532:	9b03      	ldr	r3, [sp, #12]
 8005534:	4298      	cmp	r0, r3
 8005536:	bfb8      	it	lt
 8005538:	4618      	movlt	r0, r3
 800553a:	e7a6      	b.n	800548a <_printf_i+0x15e>
 800553c:	2301      	movs	r3, #1
 800553e:	4632      	mov	r2, r6
 8005540:	4649      	mov	r1, r9
 8005542:	4640      	mov	r0, r8
 8005544:	47d0      	blx	sl
 8005546:	3001      	adds	r0, #1
 8005548:	d09d      	beq.n	8005486 <_printf_i+0x15a>
 800554a:	3501      	adds	r5, #1
 800554c:	68e3      	ldr	r3, [r4, #12]
 800554e:	9903      	ldr	r1, [sp, #12]
 8005550:	1a5b      	subs	r3, r3, r1
 8005552:	42ab      	cmp	r3, r5
 8005554:	dcf2      	bgt.n	800553c <_printf_i+0x210>
 8005556:	e7eb      	b.n	8005530 <_printf_i+0x204>
 8005558:	2500      	movs	r5, #0
 800555a:	f104 0619 	add.w	r6, r4, #25
 800555e:	e7f5      	b.n	800554c <_printf_i+0x220>
 8005560:	08005c55 	.word	0x08005c55
 8005564:	08005c66 	.word	0x08005c66

08005568 <memmove>:
 8005568:	4288      	cmp	r0, r1
 800556a:	b510      	push	{r4, lr}
 800556c:	eb01 0402 	add.w	r4, r1, r2
 8005570:	d902      	bls.n	8005578 <memmove+0x10>
 8005572:	4284      	cmp	r4, r0
 8005574:	4623      	mov	r3, r4
 8005576:	d807      	bhi.n	8005588 <memmove+0x20>
 8005578:	1e43      	subs	r3, r0, #1
 800557a:	42a1      	cmp	r1, r4
 800557c:	d008      	beq.n	8005590 <memmove+0x28>
 800557e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005582:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005586:	e7f8      	b.n	800557a <memmove+0x12>
 8005588:	4402      	add	r2, r0
 800558a:	4601      	mov	r1, r0
 800558c:	428a      	cmp	r2, r1
 800558e:	d100      	bne.n	8005592 <memmove+0x2a>
 8005590:	bd10      	pop	{r4, pc}
 8005592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800559a:	e7f7      	b.n	800558c <memmove+0x24>

0800559c <_sbrk_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4d06      	ldr	r5, [pc, #24]	@ (80055b8 <_sbrk_r+0x1c>)
 80055a0:	2300      	movs	r3, #0
 80055a2:	4604      	mov	r4, r0
 80055a4:	4608      	mov	r0, r1
 80055a6:	602b      	str	r3, [r5, #0]
 80055a8:	f7fc f84e 	bl	8001648 <_sbrk>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_sbrk_r+0x1a>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_sbrk_r+0x1a>
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	200003e4 	.word	0x200003e4

080055bc <memcpy>:
 80055bc:	440a      	add	r2, r1
 80055be:	4291      	cmp	r1, r2
 80055c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80055c4:	d100      	bne.n	80055c8 <memcpy+0xc>
 80055c6:	4770      	bx	lr
 80055c8:	b510      	push	{r4, lr}
 80055ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055d2:	4291      	cmp	r1, r2
 80055d4:	d1f9      	bne.n	80055ca <memcpy+0xe>
 80055d6:	bd10      	pop	{r4, pc}

080055d8 <_realloc_r>:
 80055d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055dc:	4607      	mov	r7, r0
 80055de:	4614      	mov	r4, r2
 80055e0:	460d      	mov	r5, r1
 80055e2:	b921      	cbnz	r1, 80055ee <_realloc_r+0x16>
 80055e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055e8:	4611      	mov	r1, r2
 80055ea:	f7ff bc4d 	b.w	8004e88 <_malloc_r>
 80055ee:	b92a      	cbnz	r2, 80055fc <_realloc_r+0x24>
 80055f0:	f7ff fbde 	bl	8004db0 <_free_r>
 80055f4:	4625      	mov	r5, r4
 80055f6:	4628      	mov	r0, r5
 80055f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055fc:	f000 f81a 	bl	8005634 <_malloc_usable_size_r>
 8005600:	4284      	cmp	r4, r0
 8005602:	4606      	mov	r6, r0
 8005604:	d802      	bhi.n	800560c <_realloc_r+0x34>
 8005606:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800560a:	d8f4      	bhi.n	80055f6 <_realloc_r+0x1e>
 800560c:	4621      	mov	r1, r4
 800560e:	4638      	mov	r0, r7
 8005610:	f7ff fc3a 	bl	8004e88 <_malloc_r>
 8005614:	4680      	mov	r8, r0
 8005616:	b908      	cbnz	r0, 800561c <_realloc_r+0x44>
 8005618:	4645      	mov	r5, r8
 800561a:	e7ec      	b.n	80055f6 <_realloc_r+0x1e>
 800561c:	42b4      	cmp	r4, r6
 800561e:	4622      	mov	r2, r4
 8005620:	4629      	mov	r1, r5
 8005622:	bf28      	it	cs
 8005624:	4632      	movcs	r2, r6
 8005626:	f7ff ffc9 	bl	80055bc <memcpy>
 800562a:	4629      	mov	r1, r5
 800562c:	4638      	mov	r0, r7
 800562e:	f7ff fbbf 	bl	8004db0 <_free_r>
 8005632:	e7f1      	b.n	8005618 <_realloc_r+0x40>

08005634 <_malloc_usable_size_r>:
 8005634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005638:	1f18      	subs	r0, r3, #4
 800563a:	2b00      	cmp	r3, #0
 800563c:	bfbc      	itt	lt
 800563e:	580b      	ldrlt	r3, [r1, r0]
 8005640:	18c0      	addlt	r0, r0, r3
 8005642:	4770      	bx	lr

08005644 <_init>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	bf00      	nop
 8005648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564a:	bc08      	pop	{r3}
 800564c:	469e      	mov	lr, r3
 800564e:	4770      	bx	lr

08005650 <_fini>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	bf00      	nop
 8005654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005656:	bc08      	pop	{r3}
 8005658:	469e      	mov	lr, r3
 800565a:	4770      	bx	lr
